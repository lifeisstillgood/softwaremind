==================
The Software Mind
==================

Coders as managers
------------------

What is management ?
Drunker etc
but fundamentally it is command and control of a machine designed for a specific, repeatable job

operating pacific navy in midway, Runnign GM etc

the capital investment has been made, the global strategic decisions have been set (every level has strategic and tactical decisions)

And management at each level is concerned with minimising the failures and the system behaving as expected.

Automation is the primary means of achieving that, manual decisin minimised by directing software another major part. 

A naval vessel that fires its guns by software that flies aircraft by software - sounds bad but that is primarily what IS navy has built as a sort of response to th e problems of WW2 era

The main point is that a naval vessel and a fleet are a machine designed to do one thing - even if that thing is very complicated. It has been carefully designed to do it.  And the people doing the design, the people creating not just the blueprints of the bulkheads but the rules and regulations, (business processes) are also designing that navy - the doctrine if you will.

And that is less and less the job of the "manager".  

the manager used to be the boss.  The guy who told you what to do.  But admirals don't do that. They set direction and provide funding, maybe set standards (but not in detail just "excellent").  

Look at google's rules for better managers - this is not MBA stuff - it's not resource allocation, it's not 

The resource allocation part is pushed up to the admiral level. The political level.  "go to Pearl and don't come back till war is won".  (you now have command of the pacific navy till the end of the war plus all the funding there in)

so what's left? The actual design is done by coders - they are actually building the processes.  

The managers (even the google good ones) are baby sitting coders, and 

We don't need babysitters - the management job has split into two - the actual 

two kinds of companies - the kind where a job / area / function / component is identified as being neeed and someone allocates people / coders to develop that 

and then 

1. coders go do it and "managers"
look after them 

2. coders are told what to produce (either by waterfall, or by having a agile system that actually is just a ticket system that "manager" allocates people to go build 5 story points at a time)

the version 2. company has been failing for ten years honestly 

There are plenty of companies where codes go do it and get it wrong.  Of course.  But this is never ever going to be solved by adding "managers"  - you won't get a better football team by adding more coaches - there is an ideal number of coaches to players.  and there are ideal levels of skill in players.

(psychosis share video games and politics)

Why openness and democracy wins
-------------------------
Because it solves to co-ordination problem and the 
agreement problem

- Paxos and raft are trying to solve this problem - but they solve it with voting !

openness and voting solves the problem - as long as everyone agrees to abide by the majority decision.  

what if the majority decision is "wrong"? Prove it and they will chnage.

what if people had to vote for linux? or facebook? they did.

This is about co-ordinating large groups of people in a single organisation (which may be small groups in other orgs but ...)

- that is agile and project mgmt and so on.  And it's much much easier to just have open discussions and agree somehow.

- and dictatorship is often not the best way.  opennness and pushbdecisions down (but not negligent but genuine decentralised sharing of power)

also if coders are managers there are still many functions that need human touch - anything that has a human on the other side basically : negotiation being a major part (sales, contracts,) and creativity (marketing, advertising)  but these are professionalised or semi pro functions that will be centaur like - 


coders are managers: example: major corporation has to comply with big regulatory upset, everyone gets upset, policies are written and handed out and ... suddenly fifteen spreadsheets, you must fill out these web sites before a code release and now the different departments have different ... no it should be one place only one code base one set of policies.

that is partly bad management off the bat, but you know it was going to be bad because it was not a common code base across that whole company - so they thought they were changing one policy document but no they were changing the artist impression not the design - and that is the failure - policy documents are not the design of a company - we have upgraded from word sto code.  and that is worrying given how laws are made ! 

ignorance of the law is no defence 
-------------------
read the code ! 


Major Models in mind
---------------------

* Beasly maps
* Coasian Thoery of firm
* code is the Design,  design is the whole thing
* openness really really works - it is the best comunincation model
* most management is dead - supervision much more effectgive by software
* software is a new form of litersacy
* mgmt activies:
  - monitoring (supervision)
  - modelling
  - mentoring
  - hiring
  - resource allocation (free market?)
  - decision making in uncertainty
  - decide new form of org needed, and build it (thats software writing!)

* Software literacy
* Programmable company
* immutable company (a version)
* Map making as a function of a company -
  https://twitter.com/swardley/status/1146447217886224384
* introspection and extrospection
  What does the world look like, and how did we fit it?
* coase, thoery of firm and theory of many small pieces.
* democracy, value capture, value return, who works for whom
* why are the executives "blessed"? Will software coders as managers changes this?
* how do we get to democratic companies, that can take scientific discoveries and apply them widely and find new methods to acheive engineering?  Why is tesla building a new car? Because the old car makers were stagnant.  Because no one voted the executuves out.
* end of tournament style progress to executvie positions. all the excess salary gets voted down to all the participants.



Coders are the new managers.
=============================

Mgmt and capital and labour
Social good is for all indivuduals to be self actualised
Drucker had GM as ideal, but it leads to "management as a special class" -
to elites.  instead of simply being given the decision making opportunitu

and those decisions can be complex.
But there is strategy, operations and otehr factors in deciding what is appropriate - should we have lots of aircraft carriers or small attack boats.

Porcupine strategy as a decentralised response.


Management is changing
Google experiment - in 2002 they got rid of all managers.

- coach
- not micromanage
- care about team as people
- results / outcome orientated
- good communicators
- career aware
- clear vision
- technically skilled

But this does not mean "manager" as we understand it is needed.
The manager shown above is not a "boss". Not a supervisior, but an
... inspirer....

SO what is the gap filling in?

Software as a means of sharing communications of the company - what is going on
what is planned etc.

we dont have a thing that does X, and communicates with Y, in this form.

This is architecture.... But we dont like architecture cos its not town planning.

So ... building codes tell us if building is safe, town planning tell us if it is fit in the ecosystem. (thorughout of cars or people or sewage)

So is the dev mnaual really town planners guide for a company.

And if there is a town planners guide, then the size of the company can vary.

Coase...


In the end we live in a liberal democracy
We think that there are huge benefits to that arrangement, that come from
avoiding the autocractic and dobling down on democracy.
And companies are going to find that autocractic government does not work
- top down planning, limiting openness, no ability to adaptt o local conditions
etc, are less effective than the others.

We want to see freer markets, better competition, reduced government subsidy,fairer treatments.  We like that. We just want it applied across the board.


Cutting through the noise
-------------------------

we have fast and slow reactions
we have noise that keeps us pinging  - but we all want ways to set a course and stick to it - set sensible defaults

thaler and libertarian paternalism 

but coding the behaviour of a company is a way to set the defaults

and it's a way for ourselves too - what is a programmable life? Pension plans etc 

https://news.ycombinator.com/item?id=29747414

- value produced : the goal is to limit the value produced by an employee so that they can be fungible - there are only so many subway foot kings you can make in one hour so there are only so many to sell.  
- but this is because the process has had most human options replaced with a codified menu of choices.  Software is not new here - just faster more explicit.  The franchise policy manual is to all intents and purposes a piece of software ! 

Finally attribution is bad for adverts and salespeople

How do society and companies for together
----------------------

Simple model of sandwich risk management and growth 

- government exists to manage risk (ensure we continue to exist through planned capital - utilities basically) 

- capitalist profit seeking exists to spread growth / discover new methods / - it is discovery and exploration 

- sandwich of pure science 



swardley on next decade of chnage - https://twitter.com/swardley/status/1478702842764566537?s=21

similar to mine in factional change in compni s - i go further to say democracy change will drive moves and of course be strongly opposed 

https://en.m.wikipedia.org/wiki/The_purpose_of_a_system_is_what_it_does





The end of traditional management
---------------------------------

* Businesses can be controlled by software.
Amazon warehouses and indeed all logistics, heavy industry, energy generaation,
most transport.

* most problems in business are problems in the process of designing.  The facotry does not have enough space to do X. You desinged it wrong.  Sometimes you cannt iterate out of a problem - see the ward cunnigham sudoko thing. sometimes you need to be better.

* More and better inputs .... 

Drucker is still relevant:

Decentralisation is key - liberal democracy again.

theory of the business - assumptions / finding product market fit.
This dials into the idea of an immutable company. this version is now acting.
This version needs to be monitored and seen if it acts.

Software has now adjusted the business to be like this - see facebookrelease process.  They are *all* managers now.

Google has softened the "manager" tag to go from druckers defintions, to basically becoming Druvker ... a coach for the people who define and decide upon the
business

1. if the code is the design, then the person doing the coding is making decisions for the business

2. The theory of business is that you create a business and (every three years) recreate it to challenge every assumption.  The same is true for an immutable buinsess.  Just the timescales have dialle dup to 11.

3. an immutable copany is one *controlled* by software - wehre decisions have been encoded into the software so that there is no lattitude, the decision is deterministic from the inputs and the decisions alreaydy made at design stage

4. any changes to the algorithm is determined by the "designers" and may include Facebook like moderators and scope to make different decsions).


Google is a bellweather for a software company - it is an advert driven business and si almost totally virtual, so it can be seen as a good example: thousnds of workers, whole google process is in code. The design of the whole thing is
shown in code.  It can be modelled (indeed using software to find out what you have designed is part of process)



* need software that models your software, and shows how it will perform under different corcumstances.  Like regulatory stress testing, but better.

* do you have SMEs who "know" how the various pieces fit together?  They should be encded into a model.  its not an expert system. The damn stuff is written down - its running on your servers.  If you cannot introspect your own runnign code thats your problem.  Management should not be needed to keep introspection of the systems in their heads. (although that is a good defintion of a coder - but then that says managers are like coders.  Yes.  But thats bad if their activiteis do not prodiuce code - its supposed to be "written down" - see software literacy)

* a software litersate comapny is not pne where everyobne can code.  Its wjere everyone can code, and does so, building the immutable form of a company that will act in the real world, and collect data about the outside worl d and tits own performance (introspection and extraspection)

A normal literate company 






What bout AI???



How does a liberal democracy cope with software freedoms being stripped away. How doe s atrade union?






The new technology of Writing Software is going to impact everything.





An optimist in skeptic's clothing takes a tour of the software future

Democracy and individual freedom, versus software and internet

internet has communication net from eachindivdual to eachindividual
democracy - push down decisin to lowest level (ie indivdual)
enterprises and governmetns pay lip service to this but prefer
to act at level of their understanding

Freedom exists in the space where government cannot break through its own abstraction to interfere.

I am sounding a lot like a right wing ledilog

But it is *feasible* that gov / org / society can track all information
needed to break through abstraction

If this is good or bad depends on ... the original design, and the individual freedom.



problem of curating at scale


Democracy- Thrasybulus' message - cut down all ears of corn higher than yourself. Not the message we want to find ways of overcoming the future

https://www.thebulwark.com/ancient-insurrections-and-ours/

Also MMO as form of government - if carriers are dead, if modern
system of warfare is facing issues??? esp if large organisations are
too unwieldy (esp conglomerates) will we see smaller states (violence)
and smaller companies - but using voting to band together for common
investment

How would Indesign the software literate company? 

- Topless computing hybrid remote, HSM secure, 

the dev manual is that - everything queryabke. everything available 
data decides if it can be read or not 


Also the two big effects: software makes the implicit explicit and
pushes decision making back to design stage not build/implement stage

so that gives us architecture that has to be explicit and upfront -
also gives us trolley problems - but makes us aware of he workings of
the invisible hand - it makes the invisible hand visible

Supply chains 

seeing this in companies that are removing middle management later -
by having direct feedback loops from workers to resource allocators

(eventually removing resource allocators - who by the way always
become able to hoard most of resource - again socialist direction)


Also - DAO and crypto

I am not a fan of smart contracts outside of any other legal framework
- see https://networked.substack.com/p/web3-i-have-my-daots


Future of states - nation states were based around agriculture - hard
to conquer people who just up and move.  This freedom (see america?)
is something maybe coming back - as remote working and knowledge work
comes into world harder to tax people ??


End of the elite?
-----------------

Elites - "the reap yet they do not sow"

Elites - management / middle managermt - removed?

Elite are "management" - gathering resources and decision making power
to themselves - is this the best way to organise? how does software
alter this balance - can better decisions and resource allocation be
maker?

yes - market is very efficient - so see rials coase and why forms are
a given size

decision making - usually based on previous data but also better
decisions are made when people are watching and when decisions made
not in service of the organisation that has sprung up (nazi party?)

sunlight makes for better decision making 


swedish mission and delegation and 

strategy
operations
tactics / doctrine
weather 
leadership (brexit / internal model of how world works) - whic h feeds to strategy 

roles of management
- resource allocation
- decision making under uncertainty 
- all of this can be done better through democracy - if we can trust / view others incentives and mental models 

which feeds to shared models being shred not with words but programs and simulations - and how we might better make decisions collectively 

software shared simulations - alternative history is about uncovering mental models of how historic events ran 

PreProd is about simulation - which is about management and best ideas and AB testing and resource allocation 





politicians are sales people of political packages  

choosing which packages exist should not be purview of cabal
of political party hacks 




pointing at democracy and liberalism (define difference) 

so my take is management is bad, well regulated markets are good and
democracy and individual human rights are great

https://news.ycombinator.com/item?id=29519679


End of organisation as hierarchy
-----------------------

Why not have a decision making where specialised units make
recommendations to whole body - inknow soujds like idealised committee
but it s how we want democracies to work (citizen juries etc) - and it
will be useful across company of only they can put their decisions
into paper - but wait it does not need to be paper just into software
encoded processes - and allow nuances to be handled by courts (!) -
software enables everyone to follow the rules without having to now
the rules upfront flor read the policy !!!

management and leadership:

leadership is least important part of business success and management
least important part of leadership

Battlefield morale and unit cohesion have enormous effect on success -
and leadership affects that.  But so do many other factors that
democracy, freedom and individuals choosing how to combat have deeper
impacts on - democracy, awareness and choice make those decisions not
inspirational leadership.

Software, architecture and tacit knowledge
--------------------

Problem of knowledge work is tacit knowledge - cannot realistically
capture it.  But that is at the design stage (ie plucking one design
out of phase space of many) - so you can build an immutable company by
engineering it correctly.

Then it is possible to  AB test into improvements 

This is like building / architect- you cannot rely on tacit knowledge the whole building must be explicit - but once it is done it is done 

so is this a future of vast utilities capturing all wealth? 

"Band-aid" is less attractive title than "manager"


{{ conceptchapters/masteroverview.rst }}


Start off here - 
https://news.ycombinator.com/item?id=25816422


We want to cover some of the history of software (software cowboys
book) and things like therac-25 and pre-microsoft history (and ms
history) bugs, retrospectives, mindset


The new software wave won't create new businesses like search or news feeds - but it will make existing business (like supply chain) completely different ... 

yeah yeah disruptive
bunniestudio blog

Also Captiain disillusion is a journalist, if journalist is providing "truth" to the AI of society ... i like that idea ... how to trust your training set ? answer - journalism 

journalism as the training set labellig process for slow AI that is society
biblio: https://www.vox.com/recode/2020/12/4/22153786/google-timnit-gebru-ethical-ai-jeff-dean-controversy-fired

NFT currency - non fungible currency.  
https://youtu.be/ggUduBmvQ_4
Will it arrive out of airline frequent flyer miles? This is the business that is what's profitable in airlines. it's a tax free item and props up airlines. Most likely to correctly adjust for externality ??

Ability to track which currency was paid will be ... interesting - technically how to do it? 


another theory of the firm
--------------------------

https://news.ycombinator.com/item?id=29606492

So when an org becomes so big it needs middle managers it falls prey to beaurucracy - but will a software mediated firm do so? Once the architect has designed the software to do everything (franchise like) then can it dispense with middle managers ?

point of middle managers 
- firing the arseholes 
- but ... where is the creativity - is this just heading towards amazonnwarehouse solutions with humans filling in the bits too awkward for robots?


Creative project - everyone tells a story at every level - star trek be star wars and coherent or fractal stories - this is how software scales - by having common story threads and vision / mission.

also fits in one persons head (see devmanual)

Trust
-----

https://news.ycombinator.com/item?id=29599409

it's basically impossible to buy ethically sourced clothes - we need to find ways of trusting at scale 

Initial trust is really important - look at baby birds imprinting on mothers - if maitre rnature after a billion years cannot solve it, we can't either.


Important: developing in the open developing at scale (software
engineering is programming integrated over time - all your
dependencies change) corollary to that is immutable company is a
machine that is run on abs by software with no significant decisions
by humans in it (ie amazon warehouse) This is analogous to children in
the loom in 1840s - they are not supposed to be in there at all and it
is damaging to them.  and the solution is not to break the looms but
build better looms without children in them ... now!

but this leads to immutable companies and only have coders working on
org that changes the company - companies are factories that output
immutable companies a

some concetps to ensure we capture:

https://abseil.io/resources/swe_at_google.2.pdf

https://blog.pragmaticengineer.com/holiday-tech-book-recommendations/#software-engineering-careers

Implementing Service Level Objectives by Alex Hidalgo
Thinking in Systems by Donella H. Meadows
Working in Public: The Making and Maintenance of Open Source Software  by Nadia Eghbal
Understanding Distributed Systems by Roberto Vitillo

Ultimate goal - systems that fit in one persons head.
We are heading towards software lawyers.  This is probably a good thing.
law is a great example - there is clear change process and people working on the factory to produce the code.

1776 and all that
-----------------
- participation in politics is granted to those with economic power - 1832 / 1871 / labour government 

- alternatively - participation in economy is based on the political power - so this is the explanation for hatred of social justice warriors - it's a arrow direction 

Life logging - moop and intro into business 

the point of management (and generals) is to make decisions in the fog of war (uncertainty) and so relies on taste and risk appetite - 

Organisational changes (roald coase) - drive towards smaller immutable companies and federalism? 

socialism - its capitalism with added fairness.  but it tends to point towards smaller more automated companies / societies 


Revolution in military affairs
--------
https://en.m.wikipedia.org/wiki/Revolution_in_military_affairs

the main issues are co-ordination and co-operation (which open source is most successful at)


my conjectures 

- openly co-operating businesses will be most effective - that generating profit will run counter to business survival - no one likes perfect markets apart from  economists and society at large

Socialist Revolution: perfect markets are desirable and socialist in nature

example : supply chain 






{{ conceptchapters/sm_software_literacy.rst }}




{{ conceptchapters/sm_firms_coase_democracy.rst }}



{{ conceptchapters/sm_pikkety_social_regulation.rst }}



{{ conceptchapters/sm_futuresoftwaretrends.rst }}


{{ conceptchapters/landscapestrategy.rst }}

{{ conceptchapters/conclusions.rst }}



{{ conceptchapters/bookemail.txt }}
{{ conceptchapters/emailnotes.txt }}
{{ conceptchapters/freespeech.rst }}
{{ conceptchapters/housing.rst }}

{{ conceptchapters/manifesto-policy.rst }}
{{ conceptchapters/masteroverview.rst }}
{{ conceptchapters/OpenSourceStrategy.rst }}
{{ conceptchapters/roughideas.rst }}
{{ conceptchapters/shorterconclusion.rst }}


{{ conceptchapters/sm_howtothinkabout.rst }}



wrongwithbitcoin
----------------
{{ conceptchapters/wrongwithbitcoin.rst }}

ibelieve
--------
{{ conceptchapters/ibelieve.rst }}
