----------------------------------------
book death project mint

typing pool


Yours
---
Paul Brian
paul@mikadosoftware.com
07540456115
@lifeisstillgood
----------------------------------------
----------------------------------------
book death project mint

typing pool


Yours
---
Paul Brian
paul@mikadosoftware.com
07540456115
@lifeisstillgood
----------------------------------------
----------------------------------------
book: going too far with monitored agent life

how about tinder profiles that show past performance in bad (daily blow jobs, swipe right) 


Yours
---
Paul Brian
paul@mikadosoftware.com
07540456115
@lifeisstillgood----------------------------------------
----------------------------------------
book: local services Fwd: missing

something useful is beginning
location matters - 

Yours
---
Paul Brian
paul@mikadosoftware.com
07540456115
@lifeisstillgood

Begin forwarded message:

> From: Nextdoor Kings Hill <reply@rs.email.nextdoor.co.uk>
> Date: 12 January 2020 at 11:59:09 GMT
> To: paul@mikadosoftware.com
> Subject: missing
> Reply-To: reply+GE3TKOJSGE4DQMZWGM3TONC7OBZG6ZDVMN2GS33OL5IE6U2UL4YTONJZGIYTSMRZGU3DGMBT@reply.nextdoor.co.uk
> 
> ﻿  
>  
>  	
> View on Nextdoor
>  
>  
>  
>  	Michael Skinner, East Malling
>  
> hi could everyone from east malling chapman way and surrounding areas look in and around their gardens as my neighbor who is 83 and has dementia has gone missing.he was last seen around 8 o;clock shops area east malling.if you have seen elderly guy with walking stick please get in touch..police are... See more
>  
> Crime and Safety · 11 Jan	 		2		 		7
>  
>  
> See 5 previous replies
>  
>  
> 		
>  
> Betty Piles
> Angie Hill fantastic news, i do hope hes ok and not too distressed, My Nan my mums twin Brother had...
>  
>  
>  
> 		
>  
> Michael Skinner
> thank you everyone i can confirm my neighbor was found safe
>  
>  
>  
>  
> View or reply
>  
>  
>  
> This message is intended for paul@mikadosoftware.com. Unsubscribe here. Nextdoor, 90 Fetter Lane, London, EC4A 1EQ
>   
----------------------------------------
----------------------------------------
book: socialism, oceans and index  trackers


people are worried about index trackers - because something something price discovery

but socialism is same - what is common (held in trust for common usage) is growing - roman aqueducts and so on 

over years just keep growing - this is why google ads are just going to be ... an annoyance - think of ads as similar size relative to normal economy - most services are never advertised, and perhaps never this "efficient" 

so we have increased efficiency because increased discover ability / competition 

also we have better use of resources - most resources in western world are public??? most income yes. most resources???? 

trend towards digital agents unstoppable which will deliver greater human value (much harder to measure)

our own genie of the lamp

but the knowledge the genie uses must be held in common, a public good and "free" like beer, speech and science



Yours
---
Paul Brian
paul@mikadosoftware.com
07540456115
@lifeisstillgood----------------------------------------
----------------------------------------
book: moop and black stone Fwd: Money Stuff: Keep the Clowns Out of Email

see brodgewater comment - employees videotaped

this is weird but frankly inevitable ... and probably will make for waaay better decision making - see the culture of emails at linux 

Yours
---
Paul Brian
paul@mikadosoftware.com
07540456115
@lifeisstillgood

Begin forwarded message:

> From: Matt Levine <noreply@mail.bloombergview.com>
> Date: 10 January 2020 at 17:46:36 GMT
> To: paul@mikadosoftware.com
> Subject: Money Stuff: Keep the Clowns Out of Email
> 
> ﻿
>  
> Don’t! Put! It! In! Email!
> The basic issue is, you are building a complicated thing, and there are lots of decisions to make, and you have lots of people involved in making those decisions, and sometimes they will disagree. One person will argue for using the size 5 widget, for safety, while another will argue for using the size 4 widget, for ease of use. Really you hope that they will frequently disagree, particularly about the hard decisions that involve real tradeoffs; if they always agree then that is a sign of bigger problems. (A lack of courage or creativity or commitment or intellectual diversity, etc.) If you hire good people who care deeply about their work, their disagreements will be passionate, and they will bring evidence and argument and rhetoric and sarcasm and hyperbole to bear to try to convince their colleagues that they are right. Using the size 5 widget would be the greatest crime against good design and common sense ever perpetrated by mankind, someone will say, if they care enough about widgets.
> 
> The tone of their disagreements will probably say something about the culture of your organization. If the disagreements are passionate but respectful, if everyone acknowledges that their colleagues are brilliant and well-intentioned while disagreeing deeply on the right answer, if they can shout at each other all day while remaining friends, then that’s probably a good sign about your process. If the disagreements are hopeless and cynical, if they take the form “I know no one here cares about safety but I’ll just point out again that if you use the size 4 widget everyone will die,” then that’s bad. If you have a large corpus of these disagreements—if you save everything everyone said about every decision in some searchable format—then reviewing it will be revealing.
> 
> But there is another sort of meta-question of culture that has a huge practical importance, and that question is: Are you having those disagreements in a format that is easily preserved and searched? Are you creating a corpus? Are you writing this stuff down? Because if you are, and a decision turns out to be wrong or debatable—if something goes wrong with the complicated thing that you built—then, guess what, those disagreements are going to come out, and they are going to look bad for you. Even the good ones will look bad for you; even if your culture is one of passionate but respectful disagreement among talented people searching for the right answer, the passion, taken out of context, will look bad. 
> 
> And if your culture is bad, that will look even worse:
> 
> “Would you put your family on a Max simulator trained aircraft? I wouldn’t,” one employee said to a colleague in another exchange from 2018, before the first crash. “No,” the colleague responded.
> 
> In another set of messages, employees questioned the design of the Max and even denigrated their own colleagues. “This airplane is designed by clowns, who are in turn supervised by monkeys,” an employee wrote in an exchange from 2017.
> 
> That’s from a corpus of “over a hundred pages of internal messages delivered Thursday to congressional investigators” by Boeing Co. yesterday, in the aftermath of the Boeing 737 Max’s grounding after two fatal crashes. One thing to say about these messages is that the internal critics—the people who thought that the design was flawed—seem to have been correct, while the people who thought it was fine seem to have been wrong. Another thing to say about them is that the tone of the internal critics—“clowns,” “monkeys”—does not seem like one of passionate but respectful disagreement; the messages do not fill you with a sense of confidence about Boeing’s robust decision-making process. I mean this is pretty explicit:
> 
> “We put ourselves in this position by picking the lowest cost supplier and signing up to impossible schedules. Why did the lowest ranking and most unproven supplier receive the contract? Solely based on bottom dollar. Not just MAX but also the 777X!”
> 
> Added the employee: “I don’t know how to fix these things... it’s systematic. It’s culture. It’s the fact that we have a senior leadership team that understand very little about the business and yet are driving us to certain objectives. Its lots of individual groups that aren’t working closely and being accountable. It exemplifies the ‘lazy B’” -- the nickname the person used for Boeing.
> 
> “This is a joke. This airplane is ridiculous,” said another. And: “I’ll be shocked if the FAA passes this turd.” Many messages are even more cynical, not criticisms of the design process but celebrations of putting one past regulators. 
> 
> But one more thing to say about these messages is: Boy, they are in writing! After the fact—after the crashes—these messages are evidence; they are bad. “We regret the content of these communications, and apologize to the FAA, Congress, our airline customers, and to the flying public for them,” says Boeing.
> 
> But before the crashes, they were objections; they were, in some sense, good. (Some of them, anyway.) They had some ex ante chance of fixing things. You want people to go around saying things like “We put ourselves in this position by picking the lowest cost supplier and signing up to impossible schedules,” because then maybe the person they say it to will think “huh you are right, let’s choose a better supplier,” and the problem will be fixed. If you think that the airplane you are working on was “designed by clowns,” it is much better to say that, to the other people you work with, than to just mutter it to yourself. You should even say it in a rhetorically compelling way—“designed by clowns” rather than “slide 17 of the attached summarizes several key considerations for effective operationalization”—and in a format that they can forward to their bosses. Maybe they will. Maybe the bosses will care. 
> 
> In other words, if you are trying to build a good engineering culture, you might want to encourage your employees to send hyperbolic, overstated, highly quotable emails to a broad internal distribution list when they object to a decision. On the other hand your lawyers, and your public relations people, will obviously and correctly tell you that that is insane: If anything goes wrong, those emails will come out, and the headlines will say “Designed by Clowns,” and how are you going to defend that? But arguably the bad thing at Boeing was not that people sometimes sent these angry critical messages, but that they didn’t send enough of them: They did their angry sarcastic grumbling to their buddies, not to their bosses; they spoke out in unproductive ways that didn’t go anywhere.
> 
> Perhaps the lesson is, “encourage open and passionate disagreement but use disappearing messaging platforms”? I don’t know. The traditional lesson is, “encourage open and passionate disagreement but only in person.” “LTL”—“let’s talk live”—is how potentially contentious written conversations in the financial industry often end, before they actually get contentious. My favorite example of this was when David Viniar, the former chief financial officer at Goldman Sachs Group Inc., testified in Congress about some complicated things that Goldman built that also blew up:
> 
> At one point Mr. Viniar prompted a collective gasp when Mr. Levin asked him how he felt when he learned that Goldman employees had used vulgar terms to describe the poor quality of certain Goldman deals. Mr. Viniar replied, “I think that’s very unfortunate to have on e-mail.”
> 
> But he was kind of right! You do want your employees who think that a deal is bad to feel free to say that it’s bad, and even to use colorful language in expressing that view! Just, not on email.
> 
> By the way, famously the weirdest decision-making culture in the financial industry is the one at Bridgewater Associates LP, the world’s largest hedge fund firm, where employees are (1) encouraged to disagree openly and examine every decision from first principles and (2) constantly videotaped for later review. Compared to most other organizations, disagreement is both more encouraged and better archived, although in a format that is not easy to search for embarrassing words. (Perhaps a Bridgewater employee once said “this investment algorithm was designed by clowns,” but even if you had the tapes how would you find out?) It seems to basically work? Like, Bridgewater is an extremely successful business—though its recent performance is disappointing—and its founder is widely viewed as a management guru.
> 
> But if you’re going to do that, you have to have a very high degree of confidence that your archive is never going to be used as public evidence against you in a congressional hearing. Making the archive non-text and hard to search helps with that, but the main thing is that you have to either (1) get every decision right or (2) only make things that don’t affect lots of people in crucial ways. Bridgewater is not designing planes; no one will die if its flagship fund is down 0.5% in a year; if there was a record of a Bridgewater employee saying “this algorithm was designed by clowns and will surely lead to a 0.5% annual loss,” it just wouldn’t matter that much. (I sometimes cynically think that the reason this works is that Bridgewater never decides anything at all, and that all the meetings they record are just about each other rather than about their investments.) But there is kind of a loss there. You want to apply the best decision process to the most important decisions! If it’s a matter of life or death, it’s extra important to have radical transparency and thoughtful disagreement and so forth. But it’s harder to achieve.
> 
> Global insider trading network
> I don’t know. “Swiss Trader Spills Secrets of Global Insider Network.” I keep reading about this global insider trading network and wishing that it featured, like, investment bank CEOs, and high government officials, and the Pope. I want it to be a secret Illuminati of the powerful, all leaking each other inside information. And it’s not … quite that? It’s fine, it’s good, it’s big, it just leaves you wanting a bit more:
> 
> On Wednesday, Marc Demane Debih, a failed Swiss entrepreneur, revealed to a New York jury the secret methods he used to earn $70 million in illegal profit from a global insider-trading network. Testifying for U.S. prosecutors, he is the government’s star witness in the trial of Telemaque Lavidas, the first to face a U.S. jury after a multiyear government probe of a wider alleged conspiracy.
> 
> “We agree (with) each other to share inside information and rumors,” Demane Debih said about his relationship with one member of the network. “If he got inside information, he would give it to me. I would trade it for him.”
> 
> Demane Debih has been jailed since his 2018 arrest in Serbia and pleaded guilty in October to 38 insider-trading charges. Prosecutors say he was a key player in a sprawling network of contacts on three continents that shared information about pending corporate takeovers and paid off tipsters -- from executives to bankers to an art collector.
> 
> But if you went to watch the trial looking for tips on how to run your own insider trading ring, there was some useful stuff there. For instance:
> 
> He told jurors he learned early on to disguise illegal trades by using other people to make share purchases, buying other stocks in the same sector as the target stock and selling off part of a profitable position before an expected share move.
> 
> I should caveat that advice by saying that it didn’t end up working, since Demane Debih is, after all, in jail. Still it strikes me as clever (illegal) advice. The classic way that insider traders are caught is by making large clean leveraged bets on a single tip: If you know that one company is going to buy another, the economically rational thing is to put all your money on out-of-the-money call options on the target, wait until the merger announcement, and make a large profit. The authorities know this, though, and the easiest way to get caught insider trading is by doing that. On the other hand if you buy shares of the target and five other stocks in the same sector, and then sell some of your target shares the day before the merger announcement, and the authorities do come and ask you questions, you can say “I just liked the sector, you can tell I had no inside information because I made the boneheaded move of selling some of the target stock just before it went up.” It sounds so plausible. 
> 
> Or here’s this, about Demane Debih’s former girlfriend Zeynep Yenel, an investment banker:
> 
> Demane Debih told jurors that in 2010 or 2011 he got information from Yenel on London Mining Plc, Breakwater Resources Ltd. and Copper Mountain Mining Corp. He testified that he traded on the Copper Mountain information and passed a Breakwater tip to his friend Nikas. He said he doesn’t remember whether he traded on London Mining.
> 
> Yenel wasn’t aware that he was able to determine the identity of her clients, Demane Debih said.
> 
> “How did you figure that out?” Assistant U.S. Attorney Daniel Tracer asked.
> 
> “From asking her different questions, and I was looking at the market, and figured out which company she was working for,” Demane Debih responded.
> 
> It’s not even an insider tip. It’s subtler than that, something I have sometimes called “insider guessing”: You take some inside information that is itself not enough to trade on, you combine it with public information or clever sleuthing or good intuition, and you end up with a good trade where the insider doesn’t even know that she tipped you. 
> 
> Sardines
> I assume that the reason you’d buy a cryptocurrency backed by sardines is that it’s funny. The idea is a little funny, the white paper is a little funny, there is a sort of sly monetary reference to the use of mackerel as currency in U.S. federal prisons, sure, fine, good one:
> 
> On Wednesday, MY Sardines, a Luxembourg-based company, announced its intention to launch a cryptocurrency backed by – are you sitting? – vintage sardines. 
> 
> Word of the unconventional initial coin offering (ICO) prompted piscine puns, stimulated discussions about fractional reserve banking and "flummoxed one hack," according to Decrypt Media. 
> 
> Between the novel collateral, a white paper thin on details (who is the unnamed external auditor for the stock of sardines?) and an April 1 (April Fools’ Day) end date for the sale, crypto commentators suspected SardineCoin was an elaborate prank. …
> 
> Those looking to acquire the sardine cans can either go to Luxembourg and visit MY Sardine’s secure fish facilities (giving “cold storage” a whole new meaning) or pay for shipping (and insurance, should they want it).
> 
> But why back the stablecoin with sardines? 
> 
> "It’s fun and the regulator was not afraid of sardines," said co-founder Jérôme Grandidier.
> 
> It is true that if you back a stablecoin even with something as boring and straightforward as U.S. dollars, people will go around complaining that your coin should be registered as a security, or that you should have to get a banking license. But if you back it with sardines people will be like, “heh, sardines, whatever.”
> 
> Also, though, there’s a charming collapse-of-society appeal to cryptosardines. If the global monetary system does collapse along with civilized society as we know it, dollars may not be worth much. Perhaps Bitcoin or gold will hold their value, perhaps they won’t. But if we are reduced to a Mad Max world, having nonperishable things to eat will surely be valuable. Having blockchain-enabled entitlements to sardines stored in a Luxembourg vault surely won’t be—how are you getting to Luxembourg, who will check off your entitlement and give you your fish, etc.—but as a joke about the black-swan-insurance value of cryptocurrency, it is a good one. 
> 
> Long-termism
> One popular theory is that U.S. public stock markets are laser-focused on short-term profitability and do not reward long-term visions, and that this problem is getting worse, and that if you want to build a business for the long term you have to do it in private markets where you are not subject to the short-term whims of Wall Street analysts and short sellers and high-frequency traders and blah blah blah it is just not particularly true:
> 
> The combination of forces has pushed the percentage of listed companies in the U.S. losing money over 12 months to close to 40%, its highest level since the late 1990s outside of postrecession periods. …
> 
> Tesla is the biggest of the loss makers investors like; although it posted a rare profit in the most-recent quarter, it has lost money over 12 months. With a market value of $89 billion, it is worth more than Ford and General Motors put together despite only four prior quarters of profit in its 12-year life.
> 
> Investors who back Tesla are right not to care too much about near-term profit. They think Tesla’s success in building an electric-car brand will translate into far higher sales, and that takes spending. …
> 
> Tesla is part of a broader pattern. The proportion of U.S.-listed companies losing money for three years reached its highest last year in data stretching back to the late 1990s, according to calculations by Andrew Lapthorne, global head of quantitative research at Société Générale. …
> 
> The shares of three-quarters of the 100 biggest companies that reported losses rose over the past 12 months, because big loss-making companies tend to be growth stories where investors don’t much mind the losses. 
> 
> Of course one of the biggest proponents of the public-markets-don’t-care-about-the-long-term thesis is Elon Musk, the chief executive officer of Tesla Inc., who went so far as to pretend he was going to take Tesla private to get away from the short-termist public shareholders who gave his money-losing future-focused company the highest valuation of any American car maker ever. The problem with public markets is not that they can’t stomach short-term losses in pursuit of higher long-term value. The problem with public markets is that they have a diversity of opinion. Some people will think that the short-term losses are acceptable in the pursuit of long-term vision, and they’ll buy the stock. Other people will think that the short-term losses demonstrate a long-term problem, and they’ll short the stock. In private markets, the only investors you deal with are the believers. Some people won’t believe in your long-term vision, but you’ll never hear from them. In public markets you will, and you might not like it.
> 
> Things happen
> How private equity can write the paycheck of a public-company CEO and not have to disclose it. Life on the Run Is Proving Expensive for Carlos Ghosn. Traders across Europe face up to the cost of failure. Venture Firms’ Dry Powder Reaches Record Level. Analysis: Three Decades of IPO Deals (1990-2019). Lille’s player-trading business model attracts hedge fund Elliott. Travelex Ransomware Outage Hits Foreign-Currency Transactions at Retail Banks. Japanese Billionaire Fires Up Twitter With Free Money Pledge. A scandal in Oxford: the curious case of the stolen gospel. 
> 
> If you'd like to get Money Stuff in handy email form, right in your inbox, please subscribe at this link. Or you can subscribe to Money Stuff and other great Bloomberg newsletters here. Thanks!
> 
>  
> Before it’s here, it’s on the Bloomberg Terminal. Find out more about how the Terminal delivers information and analysis that financial professionals can’t find anywhere else. Learn more.
> 
>  
> You received this message because you are subscribed to Bloomberg's Money Stuff newsletter.
> Unsubscribe | Bloomberg.com | Contact Us
> Bloomberg L.P. 731 Lexington, New York, NY, 10022
----------------------------------------
----------------------------------------
book: Open source is the only way for Medicine - Marcus Baw - Medium


https://medium.com/@marcus_baw/open-source-is-the-only-way-for-medicine-9e698de0447e


Yours
---
Paul Brian
paul@mikadosoftware.com
07540456115
@lifeisstillgood----------------------------------------
----------------------------------------
book: AI enables company and programmable company


if we take Sql enabled company and extend to ai enabled - what is it a company that is designed to take advantage of AI will
look like? 

maybe it needs to be programmable so that the AI can learn and interact with it fast enough ? sort of like a learning to walk

if so then what will it do? is there really value in say taking the Apple supply chain and how to book and making it AI? surely the build a factory solely to fulfill apple
orders is not something AI can help? 

Yours
---
Paul Brian
paul@mikadosoftware.com
07540456115
@lifeisstillgood----------------------------------------
----------------------------------------
book: The End of the Beginning – Stratechery by Ben Thompson

implication is that the end point of mainframe to personal computing is a combo of mobile and cloud, but cloud is next step of serverless?

https://stratechery.com/2020/the-end-of-the-beginning/

so next and perhaps last revolution is serverless - truly run anywhere on demand and only on demand

agents being prime driver and voice being new UI


Yours
---
Paul Brian
paul@mikadosoftware.com
07540456115
@lifeisstillgood----------------------------------------
----------------------------------------
book: vaex How to analyse 100 GB of data on your laptop with Python


https://towardsdatascience.com/how-to-analyse-100s-of-gbs-of-data-on-your-laptop-with-python-f83363dda94


Yours
---
Paul Brian
paul@mikadosoftware.com
07540456115
@lifeisstillgood----------------------------------------
----------------------------------------
book: Agile

Change Control is what matters

- What has changed 
- What we plan on changing

- what we planned on changing and the diff between that and what did change



Yours
---
Paul Brian
paul@mikadosoftware.com
07540456115
@lifeisstillgood
----------------------------------------
----------------------------------------
book: coase Aragon, DAOstack, Colony, Moloch


http://kronosapiens.github.io/blog/2019/06/16/aragon-daostack-colony-moloch.html


Yours
---
Paul Brian
paul@mikadosoftware.com
07540456115
@lifeisstillgood----------------------------------------
----------------------------------------
book: Living in the Age of Software Fuckery — Medium


https://web.archive.org/web/20160308032127/https://medium.com/@bryanedds/living-in-the-age-of-software-fuckery-8859f81ca877


will having engineers like railways sign off code based be any hood?? 

Yours
---
Paul Brian
paul@mikadosoftware.com
07540456115
@lifeisstillgood----------------------------------------
----------------------------------------
Re: book: agile is about change control

So, the obvious one is the oculus guy who writes a doc saying what he is working on and everyone else reads it - change control enables *coordination* amount developers and "business"

it is not too down anymore as IT is the business now

it is about coordination amount  different specialism of business 

so my tendency towards do it then document and ticket it on the commit is fine

clock "ticks" can be seen as sprints 

Yours
---
Paul Brian
paul@mikadosoftware.com
07540456115
@lifeisstillgood

> On 5 Jan 2020, at 12:34, Paul Brian <paul@mikadosoftware.com> wrote:
> 
> ﻿
> 
> Yours
> ---
> Paul Brian
> paul@mikadosoftware.com
> 07540456115
> @lifeisstillgood
----------------------------------------
----------------------------------------
book: new forms of company Invasion of The Ethical Licenses – Bruce Perens


https://perens.com/2019/10/12/invasion-of-the-ethical-licenses/


Yours
---
Paul Brian
paul@mikadosoftware.com
07540456115
@lifeisstillgood
----------------------------------------
----------------------------------------
book::logging



Yours
---
Paul Brian
paul@mikadosoftware.com
07540456115
@lifeisstillgood----------------------------------------
----------------------------------------
book::logging



Yours
---
Paul Brian
paul@mikadosoftware.com
07540456115
@lifeisstillgood----------------------------------------
----------------------------------------
book: logging: Ask HN: How do you manage logs for your backend services? | Hacker News


https://news.ycombinator.com/item?id=21949997


Yours
---
Paul Brian
paul@mikadosoftware.com
07540456115
@lifeisstillgood
----------------------------------------
----------------------------------------
book: Listen to Why We Should Be Optimistic About the Future on Apple Podcasts



Yours
---
Paul Brian
paul@mikadosoftware.com
07540456115
@lifeisstillgood----------------------------------------
----------------------------------------
book: democracy

it's very young - 1921/1945/1965
it's not handled power imbalances structural very well (slavery uk vs slavery is (payments)

the idea of a vote is a good one - everyone in society votes equally this has an equal share

but equal share is not how businesses allocate resources - and so we need to think about how they will allocate - is regulation suffice to?

what about democratically controlled 

CEOs have significantly more political
power than others (bofa finds solar projects) but that is not votes for ...

so do we think market is right approach - no we don't 

poor and equality


Yours
---
Paul Brian
paul@mikadosoftware.com
07540456115
@lifeisstillgood----------------------------------------
----------------------------------------
book: moons agents

mooc and agents

agents should be next big thing - help
me spend less money on shit i don't need and help me be better - love a better life

mooc 
agents defending us from adverts or pointless series of got
or from e-commerce - just living nicer life 

Yours
---
Paul Brian
paul@mikadosoftware.com
07540456115
@lifeisstillgood----------------------------------------
----------------------------------------
book



Yours
---
Paul Brian
paul@mikadosoftware.com
07540456115
@lifeisstillgood----------------------------------------
----------------------------------------
book: star wars theories programmable companies cattle and open coding

So star wars: it's a mess but luckily everyone on the internet could have done it better.

but actually ... they could

look at the jedi star wars xbox game - it's basically a movie - call it pre viz

and at some point enough people could put together enough spec scripts that become voted on to be enough pre via that actually a movie fan designed becomes real

is this a way to make a good movie? i don't know but it is possible way so it is likely to happen

but it does sound like a good way to make a *company* - or a process.

don't like the three months pay back - well design a new code system - put it up - if someone thinks the biz case makes sense maybe they will run it.  maybe there is a career in being a company designer

and this tends to mean companies are like cattle not pets

here is my business that does not exist: 1% mortgage company for life 

Yours
---
Paul Brian
paul@mikadosoftware.com
07540456115
@lifeisstillgood----------------------------------------
----------------------------------------
book: Electric Cars Threaten the Heart of Germany’s Economy | Hacker News


https://news.ycombinator.com/item?id=21922018


Yours
---
Paul Brian
paul@mikadosoftware.com
07540456115
@lifeisstillgood
----------------------------------------
----------------------------------------
book: yagni devmanual

devmanual for teams that don't have world class problems just need to make a profit - yaev not spark 


Yours
---
Paul Brian
paul@mikadosoftware.com
07540456115
@lifeisstillgood----------------------------------------
----------------------------------------
book: challenger banks are pro typing industry in a box

tsb failure https://www.tsb.co.uk/news-releases/slaughter-and-may/slaughter-and-may-report.pdf

was clear failure of what *any* developer would have been able to tell then - the risks were stratospheric 

would have been better to buy working systems from say Monzo 

this is a model for each industry for the next few years - multichannel (working properly) - it basically is why amazon beats ass





Yours
---
Paul Brian
paul@mikadosoftware.com
07540456115
@lifeisstillgood----------------------------------------
----------------------------------------
book: Wage isn’t based on the difficulty of the job. Wage is based on the opportunity... | Hacker News


https://news.ycombinator.com/item?id=21904299


so pressure against dumping carrying cost is the capture value of employment 
this is meaningful to theory of firm ? 


Yours
---
Paul Brian
paul@mikadosoftware.com
07540456115
@lifeisstillgood
----------------------------------------
----------------------------------------
book: prepper maths The Surprisingly Solid Mathematical Case of the Tin Foil Hat Gun Prepper


https://medium.com/s/story/the-surprisingly-solid-mathematical-case-of-the-tin-foil-hat-gun-prepper-15fce7d10437


Yours
---
Paul Brian
paul@mikadosoftware.com
07540456115
@lifeisstillgood----------------------------------------
----------------------------------------
Re: book: privacy An investigation into the smartphone tracking industry | Hacker News

trusting governments

- 1816 end of income tax and the records of income were burned public ally
copies were kept of course (dan snow, on this day in history, p11)

Yours
---
Paul Brian
paul@mikadosoftware.com
07540456115
@lifeisstillgood

> On 28 Dec 2019, at 20:54, Paul Brian <paul@mikadosoftware.com> wrote:
> 
> ﻿
> https://news.ycombinator.com/item?id=21833718
> 
> 
> Yours
> ---
> Paul Brian
> paul@mikadosoftware.com
> 07540456115
> @lifeisstillgood
----------------------------------------
----------------------------------------
book: privacy Opinion | Think Alexa Is Too Creepy For Your Kitchen? Don’t Give It to Aunty Mary. - The New York Times


https://www.nytimes.com/2019/12/25/opinion/location-tracking-gifts.html


Yours
---
Paul Brian
paul@mikadosoftware.com
07540456115
@lifeisstillgood
----------------------------------------
----------------------------------------
Re: book: trolley problems programmable companies an referendimst

programmable companies a are findished companies like a movie is finished 

you could describe the code (rerun the whole set of code from wireframe model to lighting) to generate the same output

this the creative act is the animation - look at jedi - it's basically a film, but interactive 

a programmable company is a more expanded  version

think stripe or google - how much has been the basic advertising model, how often have upgrade to AI and to infrastructure 

but the big lesson is carrying costs - expensive talent lying around


this is brutal - see EA and others 

Yours
---
Paul Brian
paul@mikadosoftware.com
07540456115
@lifeisstillgood

> On 27 Dec 2019, at 13:46, Paul Brian <paul@mikadosoftware.com> wrote:
> 
> ﻿policy - is this changing the infrastructure of a company? no but it can be seen as a product change
> 
> facebook and moderation
> 
> sears catalogue and selling to black families outside of post office
> 
> code vs policy vs change of company
> 
> 
> 
> Yours
> ---
> Paul Brian
> paul@mikadosoftware.com
> 07540456115
> @lifeisstillgood
> 
>> On 27 Dec 2019, at 13:03, Paul Brian <paul@mikadosoftware.com> wrote:
>> 
>> ﻿Carrying cost will likely drove companies to be small people and lots automation and then  end it and keep limite people to change the company - if devmanual is right then the cost of creating a new company (maybe cross marketing) will be low ? 
>> 
>> Yours
>> ---
>> Paul Brian
>> paul@mikadosoftware.com
>> 07540456115
>> @lifeisstillgood
>> 
>>>> On 26 Dec 2019, at 23:29, Paul Brian <paul@mikadosoftware.com> wrote:
>>> 
>>> ﻿Also: the point of an enterprise is *one* journey, one trip to the spiff islands
>>> 
>>> now having got back ok it's probably a good idea to go find experienced crews and repeat it
>>> 
>>> but if the boat was automated it really would be pointless creating a ne
>>> 
>>> 
>>> - google vs apple
>>> at what point did google stop being a good idea to invest and grow? ad revenue went in a fe months before IPO - and kaboom
>>> 
>>> afte that what drove it - it's same or similar AI based search optimisation 
>>> 
>>> was there ever a reason google was better at this than say a university ? pay was better ?
>>> 
>>> why not return capital to the investment market - is VC finding actually better than google management at resource allocation?
>>> 
>>> i mean assuming that founders with a food idea are genius at resource allocation is a weird assumption - brought on by form size and firm kaizen v karazrn - that the same people running the form are the right ones to make decisions about changing the firm
>>> 
>>> once a firm becomes automated and valuable it becomes a public goof - this process likely to speed up - and easy to take a fully automated firm into public ownership without destroying it
>>> 
>>> but the decision  about what new form to create is unlikely to be best handled by executives 
>>> 
>>> see interest rate swap global market
>>> 
>>> so incremental improvement of business can be done by automated companies having their code changed
>>> 
>>> but at some politburo returning money to shareholders is best because VC model is more efficient - and that should happen more often
>>> 
>>> silicon valley   ?
>>> 
>>> Yours
>>> ---
>>> Paul Brian
>>> paul@mikadosoftware.com
>>> 07540456115
>>> @lifeisstillgood
>>> 
>>>>> On 26 Dec 2019, at 23:04, Paul Brian <paul@mikadosoftware.com> wrote:
>>>> 
>>>> ﻿OK Ok so i had to show horn brexit in somehow
>>>> 
>>>> - the automouns car trolley problem 
>>>> - it's not up to "experts" and it's not the sort of thing we trust "the market" (#)
>>>> - so we have a kind of referendum with really specific code (like brexit was not)
>>>> 
>>>> - now if we also have programmable companies - then we can see their source code - and we can perhaps vote on it - the source code of say volkswagen catalytic oc better core is what we want to see
>>>> 
>>>> so why not see all of it (competitve advantage be dammed  - your competitor cannot copy it - unless they pay you a license fee)
>>>> 
>>>> do we start voting on what should or should not be allowed in companies code?
>>>> 
>>>> what about software engineers signing off on code in same way railway engineers sign off - far more limited code and scope that interacts with hardware in well defined manners
>>>> 
>>>> where will the innovation be? away from the utilities? 
>>>> 
>>>> 
>>>> (#) libertarians think there is some functioning market because they think people pay attention to everything
>>>> 
>>>> we don't think that - so voting in referendums is getting people to pay attention to the important things
>>>> 
>>>> this the market in referendums works better for things we are not paying attention to 
>>>> 
>>>> Yours
>>>> ---
>>>> Paul Brian
>>>> paul@mikadosoftware.com
>>>> 07540456115
>>>> @lifeisstillgood
----------------------------------------
----------------------------------------
book: Relative wealth buys you status, position > pecking order Some of this can't ... | Hacker News


https://news.ycombinator.com/item?id=21887264


top 10% wealthiest  has what % of power ?
This is reality of inequality - it's in equal power that matters - and so things like rule of law matter because it limits power 



Yours
---
Paul Brian
paul@mikadosoftware.com
07540456115
@lifeisstillgood----------------------------------------
----------------------------------------
book: middle way pixar


pixar - creative and bureaucratic balanced 

Yours
---
Paul Brian
paul@mikadosoftware.com
07540456115
@lifeisstillgood
----------------------------------------
----------------------------------------
book: pixar trust the process

Pixar trust the process
Process is about trusting not the executives with the deadlines and budgets but the story process

this will be the idea of trusting the engineers to run the company - to make decisions on best interest of the code 
- rewrite where needed



Yours
---
Paul Brian
paul@mikadosoftware.com
07540456115
@lifeisstillgood----------------------------------------
----------------------------------------
book: A disastrous IT migration corrupted 1.3B customer records | Hacker News


https://news.ycombinator.com/item?id=21870089


Yours
---
Paul Brian
paul@mikadosoftware.com
07540456115
@lifeisstillgood
----------------------------------------
----------------------------------------
book: What broke the bank – Increment: Testing


https://increment.com/testing/what-broke-the-bank/


Yours
---
Paul Brian
paul@mikadosoftware.com
07540456115
@lifeisstillgood
----------------------------------------
----------------------------------------
book: overview

 software literacy leads to software company 

Theory of firm - why are forms the size they are? How does the existence of software change that

- automation
- data ledger (industry ledgers)

software company and theory of form leads to programmable company - idea that we can determine in code how a company will behave - simply because we either automate it all, or restrict the behaviour of people in it by codifying what they do do do not do - scripting as in writing a script as actors or call centre workers

this sounds terrible obviously  - but it's the difference between a film and ad-lobbed theatre.  One makes a lot more money

programmable company can be scaled (see Google trying to avoid support) and it can be changed and amended - this is the run the company and change the company

What will forms look like - hard to say 

major influences 

- regulation and privacy

How much of a firm can be understood by one person - see banks or Boeing and the lack of a aerospace engineer at the top 

ships captain 

use of common aligned incentives - but 2008 failed that.  as such good regulatiors will dive deep into all aspects of a companies model - see ben even 
but the basics will remain - we want to see how your model and your reality match up - the problem with trusting experts is transparency and code is a ultimately transparent 


Yours
---
Paul Brian
paul@mikadosoftware.com
07540456115
@lifeisstillgood----------------------------------------
----------------------------------------
Re: book: programmable companies will invert conways law

can we defeat mythical man month?



Yours
---
Paul Brian
paul@mikadosoftware.com
07540456115
@lifeisstillgood

> On 23 Dec 2019, at 08:57, Paul Brian <paul@mikadosoftware.com> wrote:
> 
> ﻿because - you need to choose the best software architecture to achieve your business goal - and so you cannot let politics of company interfere - why startups seems o food but then ossifiy 
> 
> see google and death of google
> 
> so drivers - smaller companies with less politics will enable change - but again we are not chaingong - we are creating anew like films 
> 
> Yours
> ---
> Paul Brian
> paul@mikadosoftware.com
> 07540456115
> @lifeisstillgood
----------------------------------------
----------------------------------------
book: Benedict's Newsletter: No. 317






Yours
---
Paul Brian
paul@mikadosoftware.com
07540456115
@lifeisstillgood

Begin forwarded message:

> From: Benedict Evans <list@ben-evans.com>
> Date: 22 December 2019 at 20:33:32 GMT
> To: P <Paul@mikadosoftware.com>
> Subject: Benedict's Newsletter: No. 317
> Reply-To: <us6-83e8125980-b5f25679bf@inbound.mailchimpapp.net>
> 
> ﻿
> Benedict's
> Newsletter
> This is a weekly newsletter of what I've seen in tech and thought was interesting. 
> 
> Not a subscriber yet? Sign up here.
> A personal note: after 6 years working for Andreessen Horowitz in Silicon Valley, I've moved back to London to work on some new projects. 🚀
> 
>  
> 
> ✏️ My blog posts
> What's Amazon's market share? 35% or 5%? Link
> 
>  
> 
> 🗞 News
> Location privacy: the NY Times has a big story on smartphone apps and location privacy: many apps ask for your location (for example, a weather app) but then sell it on to data brokers for all sorts of purposes - it's generally at least notionally anonymous (the weather app doesn't know your name) but in practice it's possible to identify individuals ('you spend all day here, go to this school, and spend the night here'), including people at, say, the Pentagon or the CIA. This is a classic platform problem: Google and (especially) Apple are rigorous in making apps explicitly ask for this data, but a weather app does need your location. Do Apple/Google create an option for 'what city?' location rather than 'exact GPS fix?' location? Do they try to police what every developer does with data after it leaves the phone? (How?) Both of these options would obviously conflict with a lot of the competition complaints people have about Google/Apple's control over developers. Or, is this a top-down privacy regulation issue, with the entire practice being banned or limited? Would the US do that, or the EU, or both? Link
> 
> Smart home standards: most of the major companies (Google, Apple, Amazon, Samsung...) involved in smart home have created a new alliance to create better local connectivity standards. I can see the case for arguing an easier out-of-the-box setup would be good, but I'd suggest the real questions are around which devices are actually useful and how many people will care (as I wrote here a while ago). Link
> 
> Dangerous fakes on Amazon Marketplace: Amazon Marketplace is having all the same problems with fraud and fakes, including dangerous ones, that eBay had in the past, but worse, because consumers generally don't understand that buying from Amazon is not the same as buying on Amazon, and yet Marketplace is now 60% of total Amazon ecommerce The underlying problem of course is that any platform that takes some segment of the real world and brings it into software will also bring in all that segment's problems. Amazon took products and so it has to deal with bad and fake products (whereas one might say that Facebook took people, and so has bad and fake people). Link
> 
> Adtech and a view into the future of tech regulation: the UK's competition agency (the CMA) is half-way through investigating Google and Facebook's market power and behaviour in the UK digital advertising market. This is an old-fashioned competition inquiry - nothing to do with privacy. The interesting thing with broader relevance is the approach: they're looking at a dozen or more different linkages within the adtech industry and doing academic economic analysis to work out whether they think each one has some unfair and (too) profitable mechanic, and then talking about very specific technical interventions on each of those different components. This is a million miles from headline-grabbing lawsuits or facile 'Break Them Up!' book titles, and it's much more the way real regulation works, especially outside the USA. This approach was applied to European mobile operators in the 2000s and resulted in lower prices and margins across the industry almost entirely by focusing on arcane internal business mechanics that no consumer had ever heard of (most obviously interconnection rates). I don't know enough about adtech to have a view on what will happen here (and it's complicated by the much more global nature of the industry), but the general take-way should be that large parts of tech are slowly becoming a regulated industry, and that means several dozen different regulators spending years poking away at the internals of your industry and creating lists of rules that get handed to your compliance department. Link
> 
> Uber and Airbnb regulation. A German court has banned Uber for not applying with taxi regulations; conversely, AirBNB won in France: it can't be forced to be regulated as an estate agent. The endless 'software eats the world' question: how far do we treat a new way of doing X in the same way as the old one? Uber is clearly a different way of doing what we previously called taxis and 'limousines' and should probably be subject to the same high-level policy objectives. (You might be able to achieve those objectives differently - you don't need a physical meter to have a guaranteed fare because GPS can do that - but the objectives might not change.) On the other hand, AirBNB is not doing the same things that a conventional real estate agent (or hotel) does 'but with an app and with GPS' - it's doing something different, and poses different questions (which might or might not require new regulation). Links: Uber, AirBNB
> 
> Age of wonders: Google's Assistant now has a live audio interpreter mode. Link
> 
> Open Twitter: Twitter is exploring a much more open, open source approach to clients, making it easier for other companies to make Twitter apps. Twitter famously killed its developer ecosystem years ago. This is an interesting challenge: on one hand, the problem for a new user, and a lot of the long tail of existing users, is that you shout into the void (you don't have enough followers to get a response for anything you say) and it's really hard to work out who to follow so that there's interesting stuff in your feed. Third-party innovation around solving that could be great. But, the other Twitter problem is toxic, unhealthy behaviour, which has a lot to do with product design choices - if you fragment and decentralise the user interface, that becomes harder to solve. If you want to fix a mechanic that's encouraging abuse, or make blocking or muting easier, how do you do that if there are 30 different clients? What if a popular client does something that makes abuse worse - do you ban it? The history of solving user interface problems though decentralised open source development is not good, to put it mildly. Link
> 
> More spy apps: Totok, an up-and-coming new messaging app, is actually run by the UAE intelligence services (most messaging and VOIP apps are banned and blocked in the UAE). Link
> 
>  
> 
> 🔮 Reading
> 
> Long story in The Information on Facebook's hardware efforts - thousands of people now working on VR and AR, and a project for its own hardware OS led by a co-author of Windows NT (Mark Lucovsky). I am skeptical that VR is 'the next platform' (it might be a big business but it won't replace smartphones), and though AR might be that platform, we're not there yet. Link ($$$)
> 
> BBC study on deploying VR to mass audiences in local libraries. Link
> 
> Bloomberg has a story about one of Apple's blue sky projects: apparently they have a team looking at satellite data. I wouldn't get very excited about this (there are very basic law-of-physics challenges in connected a pocket device to a satellite) but it's normal for big tech companies to experiment with things like this to see what comes out, and this is a look into one such team. Link
> 
> Reuters and Facebook have created an online course, mostly aimed at journalists, for spotting and dealing with manipulated and fake content, especial ML-generated 'deep fake' images and video. Link
> 
> Amazon talks a lot abut free cash flow, but what does it really generate? Adjust for stock options and capital leases and things get pretty complicated. Link
> 
> Interesting paper on Chinese state policy towards AI. Link
> 
> Google AI chief Jeff Dean interview: Machine learning trends in 2020. Link
> 
> WSJ on how Chinese influencers sell products in live-streams. Link ($)
> 
> Fjord's 2020 Trends 2020. Always interesting ideas in these (for me especially because it's often about the stuff I don't spend time looking about). Link
> 
> Interesting long paper by François Chollet, an ML scientist at Google, on future models of artificial intelligence, how we would define it, and what we might do next. Link
> 
> The Ultimate Guide to Amazon Advertising. Link
> 
>  
> 
> 😮 Interesting things of the week
> 
> How Do Bullets Work in Video Games? Link
> 
> Chinese criminal gangs use drones to spread swine fever. Link
> 
> The London commuter rail system had a major technical failure recently, and the agency responsible for it responded not with the usual 'sorry for the inconvenience' but by tweeting a detailed technical explanation of what went wrong. Interesting as tech but much more interesting as an approach to PR. Link
> 
>  
> 
> 📊 Stats
> 
> Angelist analysis of early stage VC returns. Link
> 
> Netflix released some Irishman numbers: 26 million streams in the first week. Link
> 
> Morgan Stanley estimates Amazon is now delivering half of its packages itself. Link
> 
> Netflix released a breakdown of subscribers outside the USA. Link
> 
> US online grocery market share estimates. Link
> 
>  
> 
> Like this? Subscribe!
> You signed up to this list at http://www.ben-evans.com/newsletter
> 
> To stop receiving updates, you can unsubscribe. Is this email not displaying correctly? View it in a browser. 
> 
> Copyright © 2013-2019 Benedict Evans, All rights reserved.
----------------------------------------
----------------------------------------
book: NSA's Backdoor Key from Lotus Notes | Hacker News


https://news.ycombinator.com/item?id=5846189


Yours
---
Paul Brian
paul@mikadosoftware.com
07540456115
@lifeisstillgood
----------------------------------------
----------------------------------------
Re: book: civics lessons

brexit re al

dominic cummings theory behind it is make government work better

but the risk is high in any revolution

using automation has simple check - does automation produce same results? if so then we can proceed 

this gives us a evolutionary approach to a revolutionary desire

discuss Chinese dilemma


AI and it's unexplained are not needed


Yours
---
Paul Brian
paul@mikadosoftware.com
07540456115
@lifeisstillgood

> On 20 Dec 2019, at 08:34, Paul Brian <paul@mikadosoftware.com> wrote:
> 
> ﻿
> michael lewis and trump - astronauts and finger
> but really not knowing and not being humble to learn
> 
> 
> ceos of banks - also needed civics lesson - did not know else reckless 
> 
> but idea we do not know is likely - only solution is to make it explicit - larger more complex orgs need programmable companies 
> Yours
> ---
> Paul Brian
> paul@mikadosoftware.com
> 07540456115
> @lifeisstillgood
----------------------------------------
----------------------------------------
book:Satisficing - Wikipedia


https://en.wikipedia.org/wiki/Satisficing

coase and satisficing:
the satisfactory position for api company is much faster and data driven
in addition most things don't need high level satisficing just low level
and 
Yours
---
Paul Brian
paul@mikadosoftware.com
07540456115
@lifeisstillgood
----------------------------------------
----------------------------------------
book:Google's Dangerous Monopoly-Based Foreign Policy


https://mattstoller.substack.com/p/googles-dangerous-monopoly-based


Yours
---
Paul Brian
paul@mikadosoftware.com
07540456115
@lifeisstillgood
----------------------------------------
----------------------------------------
book:Post Office Trial: Start here


https://www.postofficetrial.com/2019/01/articles.html

why public it code should be open 


Yours
---
Paul Brian
paul@mikadosoftware.com
07540456115
@lifeisstillgood
----------------------------------------
----------------------------------------
book: Fwd: Money Stuff: It’s Hard to Get Rid of the IPO

Internet makes it possible to search for ten thousand gloves

But it is providing enormous amounts of information so the traditional gatekeeper paternalism role is no longer necessary - even if it is desirable

so the old roles are going - can agents replace it? 

Yours
---
Paul Brian
paul@mikadosoftware.com
07540456115
@lifeisstillgood

Begin forwarded message:

> From: Matt Levine <noreply@mail.bloombergview.com>
> Date: 13 December 2019 at 17:34:40 GMT
> To: paul@mikadosoftware.com
> Subject: Money Stuff: It’s Hard to Get Rid of the IPO
> 
> ﻿
> BloombergOpinion
> Money Stuff
>  Matt Levine
> Lockups
> 
> When a company does an initial public offering to sell its stock to public investors for the first time, it will hire some banks to act as underwriters for the IPO. It will pay them a fee, often as much as 7% of the IPO proceeds. The underwriters will help the company write its prospectus and market the deal to investors, and they’ll advise it on the right price for the IPO. As repeat players in the IPO business, they will also have lots of general advice on the process for the company.
> 
> One thing that they will tell the company is that it needs to have a lockup: For six months after the IPO, the company has to promise not to sell any more stock, and all of its pre-IPO insiders—its founders and executives and venture-capitalist investors—have to promise not to sell any either. The point of the lockup is to protect investors in the IPO. It limits the supply of the stock, increasing the likelihood that investors who buy stock in the IPO will make money.
> 
> Founders and venture capitalists, on the other hand, might not want to be locked up. They might say, look, if it turns out that people want to buy this stock, we want to be able to sell. A lot can change in six months, and we want the flexibility to manage our money however we want. We’d rather not sign the lockup.
> 
> What do the underwriters say in that situation? There is a standard answer. The standard answer is: You need the lockup because investors demand it. If you don’t sign the lockup then investors will not buy stock in the IPO, or they will only buy stock at a lower price. The lockup is standard in every IPO, and it’s material to investors, and if you don’t have it they will pass on the deal. We are just looking out for your interests, and it is essential for you to include the lockup.
> 
> I am not convinced this answer is always true. My impression is that investors will tolerate a lot, and for a hot IPO in a strong market they’re not going to insist on a lockup. One piece of evidence for this is that investors pretty regularly pile into IPOs despite complaining about even more material structural problems like non-voting stock. But my best evidence is that several big U.S. companies have recently gone public via direct listings without any lockups, and investors have cheerfully bought those companies’ shares. It turns out that, empirically, investors do not in fact insist on lockups. 
> 
> But the underwriters could give a different answer. They could say: Look, we don’t really work for you. You hired us, and you are paying us, and we’re trying to deliver a good result for you. But that’s not our whole job. We represent the market. We put our stamp of approval on this deal. If our names go on the cover of your prospectus, then we are vouching for you, we are telling investors that you are a good company and that your IPO is a good deal. And we think that doing an IPO without a lockup is a bad deal for investors, even if they don’t care. Because they might care later on: If you sell stock now without a lockup, and they buy it without complaint, and a month later you dump a bunch of stock and drive down the price, they will complain to us. We will be on the hook.
> 
> I find this answer very convincing. (Disclosure: I am a former capital markets banker, and have in my time given both of these answers to companies who pushed back on terms.) The underwriters are the representatives of the market, not just in the mechanical sense that they aggregate the expressed desires of investors, but also in the more paternalistic sense that they understand what investors should want and try to give it to them. They are responsible for making sure that securities offerings comply not just with law but with market custom, that investors get terms that are reasonable and customary and expected, that they will not be surprised later on.
> 
> That is the point of underwriting. The point of underwriting is that the underwriters are repeat players, and they develop a reputation in the market for bringing good deals that treat investors fairly, and then they rent out this reputation to each new issuer. An issuer who says “we are the client, we’re paying you, we don’t want a lockup, so get rid of the lockup” is missing the point. The value that the underwriter is providing to the issuer is its reputation, and that reputation depends on it sometimes refusing to do what issuers want. In the dumb obvious sense this means refusing to underwrite deals that are frauds. But in harder cases it means refusing to put non-standard terms deep in the IPO document because investors might later feel aggrieved by those terms. The underwriters aren’t just making sure the document is accurate; they are also, in a sense, reading it so the investors don’t have to. If page 103 of the prospectus lets the issuer do something weird and horrible, and later the issuer does that horrible thing, and investors call the underwriters to complain, and the underwriters say “well it was disclosed in the prospectus,” that is a good legal defense, but it is not a good commercial defense. The investors will still be mad. 
> 
> But this is a tough answer. It’s a tough answer in part because it is not easily and universally true; the underwriters partly play a gatekeeping role and partly play a neutral middleman role, particularly though not exclusively on price. These days nobody really thinks that the underwriters of an IPO are vouching for the price; they are trying to get a price that balances supply and demand, not one that “correctly” values the company in their own subjective judgment. Several big banks seemed perfectly happy to underwrite WeWork’s IPO despite all sorts of (fully disclosed but not at all standard) governance weirdness, and at an aggressive valuation; the IPO ultimately didn’t happen because investors read the prospectus and said “no way.” (Jamie “Dimon said he never believed WeWork was worth $47 billion,” even though his bank was hoping to sell it at that valuation.) A normal issuer could quite reasonably say “wait you’d let WeWork do all that stuff and you won’t let me do an IPO without a lockup?”
> 
> But it’s also a tough answer because the issuer, after all, is paying the underwriters. There is no written rulebook saying what terms the underwriters have to insist on; the lockup isn’t required by law. And all of this stuff is very obviously a conflict of interest. When the underwriters insist on terms that are good for investors but restrictive for the issuer, like lockups,[1] then it looks like they are putting their own interests ahead of their clients’. “Wall Street banks are helping Wall Street investors at the expense of their Main Street clients,” the issuers might say, “because the banks and the investors are repeat players, and the banks care more about getting future trading business from the investors than they do about protecting their IPO clients.”[2] And that will be kind of true! And it is kind of the point! If you’re an issuer, you are hiring underwriters exactly for their conflicts of interest, for the trust that they have built up with investors. But when the banks tell you “you can’t do that because we don’t want to upset investors,” you will find it very unfair. It will seem like an evil cartel designed to perpetuate its own power and extract value for itself.
> 
> Also separately your stock will probably go up 10 or 20% on the first trading day after the IPO, and everyone who bought stock in the IPO will have underpaid you for it, and you will say “man, just another case of Wall Street banks favoring Wall Street investors over their actual clients.” Again, true, again, the point.
> 
> Anyway issuers and founders and venture capitalists find all of this annoying enough that direct listings are having a real vogue, and the New York Stock Exchange sought permission from the Securities and Exchange Commission to let companies raise money in direct listings and basically disintermediate the IPO process entirely. And last week the SEC said no, for reasons that are still unclear. (The NYSE has filed a revised proposal.) We talked about this on Tuesday, and I speculated that the SEC might have been concerned about getting rid of the underwriters’ gatekeeping function. Direct listings in the U.S. so far have kind of had underwriters, but not exactly, and there is no guarantee that future direct listings will have even that. And the SEC might reasonably think that the underwriters play an important role in protecting investors.
> 
> At the Information, Kevin Dugan has more on the SEC’s decision:
> 
> Some investors and other observers say doing away with protections afforded by IPOs, particularly lockup provisions, could hurt small investors in the public market. Lockups prohibit early investors and employees from selling for three to six months after an IPO. They prevent situations where company executives or early investors hype a stock offering and then quickly dump their shares. ...
> 
> Another issue was the elimination in direct listings of lockup agreements, which prevent early shareholders from selling for six months in a traditional IPO. While federal law doesn’t require lockups, banks use them to carry out their responsibility to protect investors from market manipulation. Underwriters argue that lockups favor the interests of shareholders by showing officers’ confidence in the company, which could then justify a higher share price, said John C. Coffee, director of Columbia Law School’s Center on Corporate Governance and a former member of the NYSE’s legal advisory board.
> 
> “Typically, these lockups have been meant to protect investors coming in,” Kathleen Smith, principal at IPO research and investment firm Renaissance Capital, told The Information. “Without a lockup, you have the chance for a lot of information being promised and finding out the company doesn’t deliver. But in the meantime, the selling has already happened by insiders.”
> 
> In a sense these are weird concerns. “We want companies to do IPOs instead of direct listings because IPOs require lockups” is a strange thing for the SEC to conclude, because IPOs don’t require lockups. It’s just a custom, a thing that underwriters usually ask for but that isn’t in the law anywhere. 
> 
> But I think that the SEC would be basically correct to think that having underwriters as representatives of the market does tend to protect investors. That’s exactly why companies want to do direct listings! The thing that bothers direct-listing proponents is that, in an IPO, the underwriters sometimes aren’t working wholeheartedly on behalf of issuers; they are sometimes working in the interests of investors instead. If you are an issuer who will only ever do one IPO, you want that IPO to maximize your own interests; if you are an underwriter who will do dozens, you want each one to make investors happy. Getting rid of the underwriters might be good for the issuers, though I suspect it mostly wouldn’t be; I suspect that the reputation-rental function of the underwriters actually adds value for issuers. But if the underwriters are partly in the business of representing investors, then getting rid of them would be bad for investors, and that might be what the SEC is worried about.
> 
> Mr. Stone
> 
> Okay my most important rule around here, more important than the Laws of Insider Trading, is: Never participate in a corporate parody video of any kind, for any reason. That is my best life advice for you, and really it is almost legal advice; ask the opioid salesman who faces years in prison after he played a rapping bottle of opioids in a corporate video. But even if you are not committing felonies in these videos, you will inevitably be committing crimes against good taste. They are so rarely funny! So often embarrassing! It is extremely unlikely that the inside jokes you dream up in a conference room will resonate even with your coworkers, but the real problem is that when the video comes out on the internet, all the stuff that you thought was hilarious will just be gibberish, and everyone will just see you, like, rapping in your business casual clothes. It is terrible, do not do it, there are no exceptions.
> 
> Ugh fine though I will concede that this year’s Blackstone Group Inc. holiday video is pretty good? Like I laughed a few times, and not only in an awkward horrified way (“We were on such a great trajectory with our C-corp conversion,” says a guy, possibly as part of a joke) but also in a genuine though nerdy way. At about 4:30 there is a joke about footnotes that I fully enjoyed!
> 
> The central joke of the video is that Blackstone President Jon Gray decides that the firm needs a mascot, and everyone rolls their eyes, and there are auditions for the mascot (“Mr. Stone”), and then a mystery person shows up in the costume and dances and dunks a toy basketball and wins the role, and then there are a bunch of scenes of him being an awesome and high-energy and universally beloved mascot, and all these Blackstone employees are like “but whooooooo could this amazing perfect genius be,” and it is immediately completely obvious to anyone who has skimmed the acknowledgments of Steve Schwarzman’s book that the video is going to end with Schwarzman, Blackstone’s founder and CEO, revealing that he was Mr. Stone all along and then plugging his book. So it ends on a bit of a clunker. But on the whole the thing … works? I’m sorry, I can’t really believe it either. Still my advice stands.
> 
> Is conceptual art a security?
> 
> No, but here is a law review article by Brian Frye that argues the answer is yes:
> 
> A certificate of ownership of a work of conceptual art is quite obviously and literally a security. The purchaser of a work of conceptual art invests money in a concept, with the expectation of profiting based on the efforts of the artist. It is trivially the case that the sale of a work of conceptual art is the illegal sale of an unregistered security. The buyer of a certificate in a work of conceptual art is literally investing in a common enterprise controlled by the artist, in the hope of selling their interest in that enterprise at a profit in the future.
> 
> I don’t think that any of that is true. (The purchaser might invest money primarily for an aesthetic experience, not for profit; the value of the artwork does not depend on the future efforts of the artist, and might in fact be enhanced by the artist’s early death, but instead depends on social acceptance of the art as art; there is no “common enterprise” because no future efforts are required, etc.) 
> 
> Still! There is a basic element of truth to it, which is that:
> 
> people buy lots of different intangible things hoping that they will increase in price; 
> some of them are securities and some of them aren’t; and
> even experienced lawyers can be unsure which is which.
> In particular lots of cryptocurrency tokens are arguably securities and arguably not. In fact some meaningful number of cryptocurrency tokens are also conceptual art, and if you are buying them it is not clear whether you are speculating on a currency, or speculating on a security, or speculating on art, or just paying for an aesthetic experience.
> 
> Also it is a pleasing artifact of financial capitalism to think, like, “art is a subset of securities law.” Why not! “Everything is securities fraud,” I often say, but I mean “everything” in a narrow sense, something like “all bad behavior by a public company is also securities fraud.” But what if everything is securities fraud? What if all of human culture is just an “investment in a common enterprise with the expectation of profits from the efforts of others,” which is almost the famous Howey definition of a “security” in U.S. law? What if every time we interact, hoping to get something out of it, hoping to make our lives better through our shared humanity, we are participating in an unregistered offering of securities? Seems reasonable really.
> 
> Things happen
> 
> Saudi Aramco Set to Pay Banks Only $64 Million for Record IPO. Fed plans to double repo market intervention to avoid cash crunch. FTC Weighs Seeking Injunction Against Facebook Over How Its Apps Interact. Goldman Sachs CEO David Solomon and his management team are ditching their stuffy offices and moving to an open floor plan closer to the people so they can feel the buzz of New York headquarters. Battle over Volcker’s rule outlives its creator. Elliott Says PG&E-Backed Restructuring Plan Ignores State Mandates. Robinhood has fractional shares now. (Earlier.) “It took Del Frisco 2,723 words to explain what Ebitda means, the most of any borrower included in the study.” “‘Obviously nobody invests in a hedge fund...based on an article in a no-name online blog,’ Mr. Gottlieb said in a statement, though he added it has ‘improved my reception on Tinder.’”
> 
> If you'd like to get Money Stuff in handy email form, right in your inbox, please subscribe at this link. Or you can subscribe to Money Stuff and other great Bloomberg newsletters here. Thanks!
> 
> [1] But especially like covenants in *debt* underwriting, where all of this is more fraught.
> 
> [2] With lockups specifically, the fact that the underwriters can waive the lockup also gives them some economic leverage over the company: If the company asks them to waive the lockup so it can sell more stock, they will demand to underwrite that offering too. 
> 
> 
> Bloomberg L.P. ● 731 Lexington Avenue, New York, NY 10022
> 
> Web ● Facebook ● Twitter
> 
> Feedback ● Unsubscribe
----------------------------------------
----------------------------------------
book: Many Strategies Fail Because They’re Not Actually Strategies


https://hbr.org/2017/11/many-strategies-fail-because-theyre-not-actually-strategies

programmable company: the strategies that intel followed were automatically selected out by predetermined criteria - logic / science 


Yours
---
Paul Brian
paul@mikadosoftware.com
07540456115
@lifeisstillgood----------------------------------------
----------------------------------------
Book 2 - this time

Ok - with the coase notes !!


Paul Brian
paul@mikadosoftware.com
07540 456 115
twitter: @lifeisstillgood
skype: paul.mikadosoftware
----------------------------------------
----------------------------------------
book

Paul Brian
paul@mikadosoftware.com
07540 456 115
twitter: @lifeisstillgood
skype: paul.mikadosoftware
----------------------------------------
----------------------------------------
book:

theory of firm - why will software and programmable companies break the theory of firm (move the equilibrium case?)

see 1/3 issue with google

what happens when the largest firm on planet has less than 10,000 employees ?
100bn a year - 10 million per employee ?

what breaks? 

Yours
---
Paul Brian
paul@mikadosoftware.com
07540456115
@lifeisstillgood----------------------------------------
----------------------------------------
book: hell yes

so if we are changing organisations what does it means

- workers and very few queens
- most other middle functions can be done through automated orocessss 
- hell yes 
- but changing direction, open debate 
these are things we cannot automate - we must debate agree and or accept and commit

- hell yes - army commander - not that he changed peoples minds but that he finalised agreement, and ensured a commitment point - from that moment everyone was committed  

(commitment, change etc) 

so queen can act as proxy for everyone's doubts and finalise the debate - it is democracy 

Yours
---
Paul Brian
paul@mikadosoftware.com
07540456115
@lifeisstillgood----------------------------------------
----------------------------------------
book: data science tools

Data Management Basics

- every piece of data that comes in must be covered by a schema and have meta data - and that data must be kept in the flow through the systems

- it is data taken from a third party (so which party, when was it taken, when is the data correct)

- it is data generated internally (eithe directly (is number of widgets produced by factory a in batch b) or inferred/calculated - is we calculate the total number of sales of widgets form our rival as x




So we have tons of data to sift and understand - what do we do about it and with it? 


laptop levels
Use tool called vaex to analyse HDFS and parquet giles locally india your laptop
https://news.ycombinator.com/item?id=21682331
this works for about 100GB 
- 
much above this and you start needing to run a DAG and distributed data - but this is a pipeline and not a experimental approach 
- 
Netflix Metaflow: dask for containers?
https://news.ycombinator.com/item?id=21696779

handling container based multiple distributed processing with container as unit

Yours
---
Paul Brian
paul@mikadosoftware.com
07540456115
@lifeisstillgood----------------------------------------
----------------------------------------
book: Analyzing Cryptocurrency Markets Using Python


https://blog.patricktriest.com/analyzing-cryptocurrencies-python/


Yours
---
Paul Brian
paul@mikadosoftware.com
07540456115
@lifeisstillgood
----------------------------------------
----------------------------------------
book: North sentinel island Cut off from the world, an Indian island remains a mystery - The Garden Island


https://www.thegardenisland.com/2018/11/22/news/cut-off-from-the-world-an-indian-island-remains-a-mystery/


Yours
---
Paul Brian
paul@mikadosoftware.com
07540456115
@lifeisstillgood----------------------------------------
----------------------------------------
book: Lessons | Blog | Frank Tisellano


https://www.ft.io/blog/lessons/


Yours
---
Paul Brian
paul@mikadosoftware.com
07540456115
@lifeisstillgood
----------------------------------------
----------------------------------------
book:

of film is art and is an organisationa art form then why cannot business be an art? more so as programmable company is a single output ?? 

Yours
---
Paul Brian
paul@mikadosoftware.com
07540456115
@lifeisstillgood----------------------------------------
----------------------------------------
book: tiktok elections

- 2017 - millions people upset by fox hunting whaling on labour side but "no one knew" - mass market publications would not mention it

this is two sets problems 

- siloed campaigns - the campaign staff were not talking to / feeding back on online issues

- mass market was not monitoring the interests of millions of people

- this last is the big issues - how to surface issues of concern (it is after all brexit) and is a vital issue in any organisation  - is your ceo talking about the problems of the company that most bother you? that are the most important ? or are they "missing the election"? 

Yours
---
Paul Brian
paul@mikadosoftware.com
07540456115
@lifeisstillgood----------------------------------------
----------------------------------------
FW: book:



---
Paul R Brian
t. +44 207 995 6249
m. +44 7540 456 115
e. paul.brian@baml.com<mailto:paul.brian@baml.com>

From: Paul Brian [mailto:paul@mikadosoftware.com]
Sent: 28 November 2019 08:32
To: Brian, Paul <paul.brian@bofa.com>
Subject: Re: book:

agile:

- the death of middle
management
- end of project management - rise of risk management
- major risk is bad software - so most risk mitigation will be writing engineering quality software
- always tension between business value and engineering quality - the issue is getting business value judgement to be made closer to real world and feedback loops and understanding by developer

- the code is the design
- agile is / was attempt to keep odoa cycle close.
- product owner needs to be plugged in - but if they not then ? (middle management problem)
- two solutions - pure AB driven business (?) and remove layers of middle management from the steering of code
- eventually the steering of the code becomes the way to steer the company (programmable company)
- compare to a major newspaper - everyone reads the code written that day - editor function is a reading function  not a writing function

- middle management: patch approval and patch discussion
- upper management : what is the equivalent of leader articles?


Agile: no line management without P&L - in other words facilitators

this is not the same as line management without budget - there are three kinds of line manager today
- no budget no P&L : supervisor even if respected
- budget but no Profit : is not customer focused, has not feedback from real business - this is harder - many companies have huge internal cost centres with huge budgets but no way to judge if business makes or loses money via them (platform providers). expect to see consolidation. In Fortune 500 there are people with budgets in the billions who only get judged on their performance by their line manager, based on the performance of people who use their platform to do business - in other words they have no paying customers to show "the market likes me" and have to play an arbitrary game with their line manager - wow that's a stressful job
- P&L - customers pay you, you lose or make money based on tour ability.  much less stressful

Yours
---
Paul Brian
paul@mikadosoftware.com<mailto:paul@mikadosoftware.com>
07540456115
@lifeisstillgood


On 27 Nov 2019, at 18:27, Brian, Paul <paul.brian@bofa.com<mailto:paul.brian@bofa.com>> wrote:
﻿
<image003.png>



wayoutthere<https://urldefense.proofpoint.com/v2/url?u=https-3A__news.ycombinator.com_user-3Fid-3Dwayoutthere&d=DwMFaQ&c=SFszdw3oxIkTvaP4xmzq_apLU3uL-3SxdAPNkldf__Q&r=MSkac7tE0uFqjki9rekmSncEezlQFTnhQzvjlXrYsOg&m=deatZ4TCApNOM1A9ofya4nXlOEqsyFsUS16jt7aWqlk&s=g374GTT4pCRidVxMuTLgVGQxpq_7ZgNEe4xAPGwl_8E&e=> 2 hours ago<https://urldefense.proofpoint.com/v2/url?u=https-3A__news.ycombinator.com_item-3Fid-3D21648854&d=DwMFaQ&c=SFszdw3oxIkTvaP4xmzq_apLU3uL-3SxdAPNkldf__Q&r=MSkac7tE0uFqjki9rekmSncEezlQFTnhQzvjlXrYsOg&m=deatZ4TCApNOM1A9ofya4nXlOEqsyFsUS16jt7aWqlk&s=AWyn6n4slboBe_3aXJWp_ppfRJMOxLV1RNZFs2RZCOA&e=> [-]

Enterprise architecture done well; but the tooling is incredibly difficult, it's expensive and you need a culture devoted to engineering discipline over raw productivity. Other industries manage this just fine: manufacturing and defense contracting are two that come to mind. Both industries have pretty good work / life balance for their employees.

Tech is just worse because we haven't unionized like both of those industries did, so the companies are able to operate in a way that is more exploitative of its workers. I think that's actually the source of the outsized margins we see in tech. Agile is just shorthand for "it's too expensive to coordinate things so we'll just make our engineers do that on top of being engineers". The solution is to unionize and start to demand some standards in engineering discipline that allow people to have both a career and a life.






---

Paul R Brian

t. +44 207 995 6249

m. +44 7540 456 115

e. paul.brian@baml.com<mailto:paul.brian@baml.com>





________________________________
This message, and any attachments, is for the intended recipient(s) only, may contain information that is privileged, confidential and/or proprietary and subject to important terms and conditions available at http://www.bankofamerica.com/emaildisclaimer . If you are not the intended recipient, please delete this message. Please note you may be contacted by a different BofA entity acting for and on behalf of your service provider where permitted by applicable law. This does not change your service provider.

Where applicable please note:
Merrill Lynch International is Registered in England (No.2312079). Registered Office: 2 King Edward Street, London EC1A, 1HQ. VAT No. GB 245 1224 93. Authorised by the Prudential Regulation Authority and regulated by the Financial Conduct Authority and the Prudential Regulation Authority. Member of the London Stock Exchange.

----------------------------------------------------------------------
This message, and any attachments, is for the intended recipient(s) only, may contain information that is privileged, confidential and/or proprietary and subject to important terms and conditions available at http://www.bankofamerica.com/emaildisclaimer .  If you are not the intended recipient, please delete this message. Please note you may be contacted by a different BofA entity acting for and on behalf of your service provider where permitted by applicable law. This does not change your service provider.

Where applicable please note:
Merrill Lynch International is Registered in England (No.2312079). Registered Office: 2 King Edward Street, London EC1A, 1HQ. VAT No. GB 245 1224 93. Authorised by the Prudential Regulation Authority and regulated by the Financial Conduct Authority and the Prudential Regulation Authority. Member of the London Stock Exchange.
----------------------------------------
----------------------------------------
book:

- data ownership : the value of our data is difference to spray and pray advertising and "micro targeting" - about 100bn a year (get red from podcast) - but divide that between contextual and behavioural advertising

- the chinese are they so bad - social credit scoring - yes a form of control for chinese administration - see yueogher muslims as well - but ... we are all going to be tracked and the use of that data is difference between a surgeon wielding a knife and a torturer wielding a knife

- the difference is not easy or obvious but we all know it. the difference is not merely democracy - but outrage and constant attention and teeth to prosecute - Basically Elliot Ness was difference between modern america and a failed mafia state



Yours
---
Paul Brian
paul@mikadosoftware.com
07540456115
@lifeisstillgood----------------------------------------
----------------------------------------
book:

china - denctralised vs centralijust like companies 

Yours
---
Paul Brian
paul@mikadosoftware.com
07540456115
@lifeisstillgood
----------------------------------------
----------------------------------------
book: Things I've Learned in 20 Years of Programming - DaedTech


https://daedtech.com/5-things-ive-learned-in-20-years-of-programming/


basically devmanual is about looking after the codebase
releases etc


Yours
---
Paul Brian
paul@mikadosoftware.com
07540456115
@lifeisstillgood
----------------------------------------
----------------------------------------
book: 1.2 billion people exposed in data leak includes personal info, LinkedIN, Facebook


https://www.dataviper.io/blog/2019/pdl-data-exposure-billion-people/


Yours
---
Paul Brian
paul@mikadosoftware.com
07540456115
@lifeisstillgood
----------------------------------------
----------------------------------------
book:Tim Harford — Undercover Economist


http://timharford.com/articles/undercovereconomist/page/7/


Peter principle - avoid having managers by having Agile style facilitators 
mAnd having resource allocation through voting and democracy 

Yours
---
Paul Brian
paul@mikadosoftware.com
07540456115
@lifeisstillgood
----------------------------------------
----------------------------------------
book: software mind five steps to AI in your company

- essence

- Automate anything now
- use dead simple RPA
- migrate to SOA (common IAM)
- marginal cost of reporting
- ledgers and data management 
- contribute to data pool but own the data
- AI / ML 

Yours
---
Paul Brian
paul@mikadosoftware.com
07540456115
@lifeisstillgood
----------------------------------------
----------------------------------------
book: devmanual New Approach to Designing Smart Cities - Design Matters - Medium


https://medium.com/design-matters-4/a-new-approach-to-designing-smart-cities-b33443a4d968


Yours
---
Paul Brian
paul@mikadosoftware.com
07540456115
@lifeisstillgood----------------------------------------
----------------------------------------
book: these is

literacy to programmable company to governance focus to  democracy in companies because having one person make decisions is ... the story of the consultant who listened

why bother with the consultant - it's all governance so it is all 

allocation of resources - see my experience with other writers in companies

all writers will have accesses to own code based to do same thing - hence my devmanual

also brexit - first past post system meant ukip  5 million votes went nowhere 

Yours
---
Paul Brian
paul@mikadosoftware.com
07540456115
@lifeisstillgood----------------------------------------
----------------------------------------
book: devmanual: Headless Selenium Testing with Python and PhantomJS – Real Python


https://realpython.com/headless-selenium-testing-with-python-and-phantomjs/


Yours
---
Paul Brian
paul@mikadosoftware.com
07540456115
@lifeisstillgood
----------------------------------------
----------------------------------------
book: devmanual: Headless Selenium Testing with Python and PhantomJS – Real Python


https://realpython.com/headless-selenium-testing-with-python-and-phantomjs/


Yours
---
Paul Brian
paul@mikadosoftware.com
07540456115
@lifeisstillgood
----------------------------------------
----------------------------------------
book: political correctness is not bad

rory sutherland - strawmans PC as saying it's always wrong
not quite - it's just that internet has raised two things: that abuse is widespread 
and that more and more conversations are more public - you do speak differently if you are in bar with your mates than if you are on tv next to a judge - but twitter is all of that 

Yours
---
Paul Brian
paul@mikadosoftware.com
07540456115
@lifeisstillgood----------------------------------------
----------------------------------------
book: devmanual : Investor Update Template Rundown - Tettra - Tettra


https://app.tettra.co/teams/tettra/pages/investor-update-template-rundown


Yours
---
Paul Brian
paul@mikadosoftware.com
07540456115
@lifeisstillgood
----------------------------------------
----------------------------------------
book: System design hack: Postgres is a great pub/sub & job server


https://layerci.com/blog/postgres-is-the-answer/


Yours
---
Paul Brian
paul@mikadosoftware.com
07540456115
@lifeisstillgood
----------------------------------------
----------------------------------------
book: Mental Models I Find Repeatedly Useful - Gabriel Weinberg - Medium


https://medium.com/@yegg/mental-models-i-find-repeatedly-useful-936f1cc405d


Yours
---
Paul Brian
paul@mikadosoftware.com
07540456115
@lifeisstillgood
----------------------------------------
----------------------------------------
Re: Book: mental models

have a feedback loop

Yours
---
Paul Brian
paul@mikadosoftware.com
07540456115
@lifeisstillgood

> On 5 Nov 2019, at 13:20, Paul Brian <paul@mikadosoftware.com> wrote:
> 
> ﻿proximate and toot causrs - what sank the titanic - an iceberg or bad design 
> 
> Yours
> ---
> Paul Brian
> paul@mikadosoftware.com
> 07540456115
> @lifeisstillgood
> 
>> On 5 Nov 2019, at 13:17, Paul Brian <paul@mikadosoftware.com> wrote:
>> 
>> ﻿i am always 99% sure except for certain areas (child abuse is bad is a 100%)
>> 
>> Yours
>> ---
>> Paul Brian
>> paul@mikadosoftware.com
>> 07540456115
>> @lifeisstillgood
>> 
>>>> On 5 Nov 2019, at 13:16, Paul Brian <paul@mikadosoftware.com> wrote:
>>> 
>>> ﻿if the facts change i change my mind 
>>> (strong opinions loosely held)
>>> 
>>> 
>>> Yours
>>> ---
>>> Paul Brian
>>> paul@mikadosoftware.com
>>> 07540456115
>>> @lifeisstillgood
>>> 
>>>>> On 5 Nov 2019, at 13:14, Paul Brian <paul@mikadosoftware.com> wrote:
>>>> 
>>>> ﻿- see g weinberg book / post
>>>> 
>>>> top ten
>>>> opportunity cost
>>>> ricardo law
>>>> forcing function
>>>> conways law
>>>> hankins law (cock up not conspiracy)
>>>> follow the money (incentives perverse and otherwose)
>>>> 
>>>> 
>>>> Yours
>>>> ---
>>>> Paul Brian
>>>> paul@mikadosoftware.com
>>>> 07540456115
>>>> @lifeisstillgood
----------------------------------------
----------------------------------------
book: GitHub - rsapkf/goodies: Collection of GitHub repos, blogs and websites to learn cool things.


https://github.com/rsapkf/goodies


Yours
---
Paul Brian
paul@mikadosoftware.com
07540456115
@lifeisstillgood
----------------------------------------
----------------------------------------
book

rory stewart outburst 
- policy vs operational control
he wants to be executive
but operational control will be going to AI or the coder
we have to learn to live in rory world



Yours
---
Paul Brian
paul@mikadosoftware.com
07540456115
@lifeisstillgood
----------------------------------------
----------------------------------------
Re: book: server less Tweet by Simon Wardley #EEA on Twitter

so this is a mix - our internal systems can be fine *unorchestratwd* in the container cloud - just pull this secret and go ... how big does your hr cluster need to scale

but you should have one at least scalable app - that's serverleas 

Yours
---
Paul Brian
paul@mikadosoftware.com
07540456115
@lifeisstillgood

> On 29 Oct 2019, at 08:42, Paul Brian <paul@mikadosoftware.com> wrote:
> 
> ﻿
> 	Simon Wardley #EEA (@swardley)
> 17/10/2019, 23:06
> X : Do you really think kubernetes is a "waste of space"?
> Me : Yes. It's a future home for legacy and niches with managed kubernetes by Amazon already doninating. The real battle is up the stack and currently AWS is storming that one as well. Stop fighting the pointless battles.
> 
> Download the Twitter app
> 
> 
> Yours
> ---
> Paul Brian
> paul@mikadosoftware.com
> 07540456115
> @lifeisstillgood
----------------------------------------
----------------------------------------
Re: book: AI and programmable company

implications are vast : if digital research is open then expert systems become public goods and thus a lot of diagnosis (medical, accountancy legal and other professions) will have high quality almost for free (zero marginal cost)

at which point - what do we do with professionals? https://www.amazon.co.uk/Future-Professions-Technology-Transform-Experts-ebook/dp/B010N9QJ5M/ref=pd_typ_k_ba_3_362234031_27?_encoding=UTF8&psc=1&refRID=73P1VZRDMV596XNKJ90J



Yours
---
Paul Brian
paul@mikadosoftware.com
07540456115
@lifeisstillgood

> On 28 Oct 2019, at 20:11, Paul Brian <paul@mikadosoftware.com> wrote:
> 
> ﻿AI data will be so valuable ? that it is going to have to be public good to avoid monopoly 
> 
> so our digital footprints will have to become public goods - and this is a competing end to anything knowledge based???
> 
> 
> 
> Yours
> ---
> Paul Brian
> paul@mikadosoftware.com
> 07540456115
> @lifeisstillgood
----------------------------------------
----------------------------------------
book: Betrayal at Krondor | The Digital Antiquarian


https://www.filfre.net/2019/10/betrayal-at-krondor/


Yours
---
Paul Brian
paul@mikadosoftware.com
07540456115
@lifeisstillgood
----------------------------------------
----------------------------------------
book: instead of PG Wodehouse good enough we use terms of tolerance -

what is the business tolerance to the quality of this script? 

Yours
---
Paul Brian
paul@mikadosoftware.com
07540456115
@lifeisstillgood
----------------------------------------
----------------------------------------
book: agents and hiring people to change the company

so if board of bank hires people to do a job, nobel prize theory says if they are honest with their agent they get the best results 

so the hire someone to do job is a good approach

- why is a programmable company different from telling agent what to do?



Yours
---
Paul Brian
paul@mikadosoftware.com
07540456115
@lifeisstillgood----------------------------------------
----------------------------------------
book: running large organisation is about networking

knowing others
Paul whatisname in US revolution

being trusted when asking others to make a leap

science works around that by asking to trust your existing knowledge 

which is much better

so we need organisations that know and understand themselves better - when the model is right then changes can be analysed and picked 



Yours
---
Paul Brian
paul@mikadosoftware.com
07540456115
@lifeisstillgood----------------------------------------
----------------------------------------
book: themes

devmanual - not the coding itself but the stuff around the coding - rollbacks and feature flags and code reviews and styling and how to mentor and how to share a vision and ....

software affects the whole business value stack (inverted pyramid) but the code change itself is just a tiny point - the implications and loading is much larger 

Software loading is increasing - cumulative value on room of code - which is implicit in being on many devices held by many people (ie mobile) 

Yours
---
Paul Brian
paul@mikadosoftware.com
07540456115
@lifeisstillgood----------------------------------------
----------------------------------------
book: Iron: From mythical to mundane


https://rootsofprogress.org/iron-from-mythical-to-mundane


Yours
---
Paul Brian
paul@mikadosoftware.com
07540456115
@lifeisstillgood
----------------------------------------
----------------------------------------
book: Zen and the Art of Software Maintenance – Structure and Interpretation of Computer Programmers


https://www.sicpers.info/2019/10/zen-and-the-art-of-software-maintenance/

Working software that delivers measurable business value 

Measure the business value
Determine if the software is working and how well





Yours
---
Paul Brian
paul@mikadosoftware.com
07540456115
@lifeisstillgood
----------------------------------------
----------------------------------------
book: why not remote working - because not software literate

how to judge output?
how to find the work to do?
how to ?



Yours
---
Paul Brian
paul@mikadosoftware.com
07540456115
@lifeisstillgood
----------------------------------------
----------------------------------------
book test 2

Paul Brian
paul@mikadosoftware.com
07540 456 115
twitter: @lifeisstillgood
skype: paul.mikadosoftware
----------------------------------------
----------------------------------------
book: Testing in Production: the hard parts - Cindy Sridharan - Medium


https://medium.com/@copyconstruct/testing-in-production-the-hard-parts-3f06cefaf592


Yours
---
Paul Brian
paul@mikadosoftware.com
07540456115
@lifeisstillgood----------------------------------------
----------------------------------------
book off nov 22



Yours
---
Paul Brian
paul@mikadosoftware.com
07540456115
@lifeisstillgood
----------------------------------------
----------------------------------------
book: Make More Land | Hacker News


https://news.ycombinator.com/item?id=21269763

this and string town s and spanish walkable cities - how do we build or built environments? what are the key factors to aim for? 
Yours
---
Paul Brian
paul@mikadosoftware.com
07540456115
@lifeisstillgood----------------------------------------
----------------------------------------
book: hire a fucking team as soa

soa - if you want to add a new feature you need to hire a team to develop and support it - so cost of feature aligns to capital cost
this is very good and maintenance is major cost 

Yours
---
Paul Brian
paul@mikadosoftware.com
07540456115
@lifeisstillgood----------------------------------------
----------------------------------------
book: hire a fucking team as soa

soa - if you want to add a new feature you need to hire a team to develop and support it - so cost of feature aligns to capital cost
this is very good and maintenance is major cost 

Yours
---
Paul Brian
paul@mikadosoftware.com
07540456115
@lifeisstillgood----------------------------------------
----------------------------------------
book: correlation - importance of


September 1998 and August 2007 were very different times, but one thing they had in common was that they were months in which every correlation went to 1. In 1998, Italy/German bond spreads, US corporate high yield spreads, and the discount for announced-but-unconsumated mergers all moved together. In 2007, value stocks, momentum stocks, and complicated CDOs all traded the same way.
What had happened was that investors were levering up uncorrelated bets, but since they were all looking at the same historical data, they all made the same uncorrelated bets. A measurably low correlation will always equal 1 in a crisis, because the natural bettors on that relationship are all liquidating at the same time.
In hedging, we’d call it “basis risk,” i.e. the risk that the instrument you’re using to hedge doesn’t match the performance of the thing you’re hedging. 90% of the time, if you own shares of company X and you short shares of their closest competitor, you’re hedged. But sometimes that means owning IAG, shorting Ryanair, and suddenly realizing that the most important thing going on at Ryanair is that their competitor, IAG, is facing strikes.
Levered, hedged approaches based on backwards-looking correlations are a way to manufacture higher correlations in the future. You don’t have to know exactly where those risks will come from to know that they’re coming.

Yours
---
Paul Brian
paul@mikadosoftware.com
07540456115
@lifeisstillgood----------------------------------------
----------------------------------------
book: shakespeare was economic

2000 people - 200,000 in london
rockstar
no longer travelling so needed lots new plays
lope de vega basically did same in spain - you had people willing to travel and pay for this new entertainment 

it made shaoepsrra rich and work like ... writer of the west wing???

but basically like invention of talkies - but only one screenwriter and studios head

do me a western
now a romcom 
now an noir thriller




Yours
---
Paul Brian
paul@mikadosoftware.com
07540456115
@lifeisstillgood----------------------------------------
----------------------------------------
book: Part #2 — $100M to $1B+: Non-obvious Lessons Learned Selling to Yahoo!


https://medium.com/@todsacerdoti/part-2-100m-to-1b-non-obvious-lessons-learned-selling-to-yahoo-aeab9ad6cc8a


Yours
---
Paul Brian
paul@mikadosoftware.com
07540456115
@lifeisstillgood----------------------------------------
----------------------------------------
book: They're Made out of Meat


https://www.mit.edu/people/dpolicar/writing/prose/text/thinkingMeat.html


Yours
---
Paul Brian
paul@mikadosoftware.com
07540456115
@lifeisstillgood
----------------------------------------
----------------------------------------
book: The dumb reason your fancy Computer Vision app isn’t working: Exif Orientation


https://medium.com/@ageitgey/the-dumb-reason-your-fancy-computer-vision-app-isnt-working-exif-orientation-73166c7d39da


Yours
---
Paul Brian
paul@mikadosoftware.com
07540456115
@lifeisstillgood----------------------------------------
----------------------------------------
book: mechanical sympathy

Lots of examples of how to take basic case and ramp up performance by being mechanically sympathetic 

- the data processing from command line

- writing to database (many clients? replace with celery and batch writing)

- distributed databases and big data 

- web front end 

web servers and caching and so on 

dnase indexes 

Yours
---
Paul Brian
paul@mikadosoftware.com
07540456115
@lifeisstillgood----------------------------------------
----------------------------------------
book : management as coding

there are personal relationships in business and there is everything else that can be solved with code

management should be 50/50 the two - if you are not coding as a manager then i think it's like ... well let's say we hired the manager to read and write - there eee a really good reader and writer 

but now they got promoted we don't want them to read and write any more?

that says to me that the company is not a programmable company ? 

Yours
---
Paul Brian
paul@mikadosoftware.com
07540456115
@lifeisstillgood----------------------------------------
----------------------------------------
book:GPS week roll-over issue during epoch restart - News - Techship


https://techship.com/news/gps-week-roll-over-issue-during-epoch-restart/


Yours
---
Paul Brian
paul@mikadosoftware.com
07540456115
@lifeisstillgood
----------------------------------------
----------------------------------------
book: IAM Is The Real Cloud Lock-In | Hacker News


https://news.ycombinator.com/item?id=19742038


Yours
---
Paul Brian
paul@mikadosoftware.com
07540456115
@lifeisstillgood
----------------------------------------
----------------------------------------
book: project control PID for Dummies - Control Solutions


https://www.csimn.com/CSI_pages/PIDforDummies.html


Yours
---
Paul Brian
paul@mikadosoftware.com
07540456115
@lifeisstillgood
----------------------------------------
----------------------------------------
book: software governance

brexit issue: balance of powers - judiciary executive and parliament

need at least the product manager (exec) and parliament (dev leads) and some judiciary (semantics analysis)?


Yours
---
Paul Brian
paul@mikadosoftware.com
07540456115
@lifeisstillgood----------------------------------------
----------------------------------------
book: thinking as a collective

new paradigm shift
noosphere / metahumanity / whatever

- social media gives us a new global culture / wider overton window
- game theoretic but the nobel prize on agents suggests we have honesty as best policy
- but sharing views as models is better - software literacy 

Yours
---
Paul Brian
paul@mikadosoftware.com
07540456115
@lifeisstillgood----------------------------------------
----------------------------------------
book: the rise of netiquette

the awful online trolling is also metoo- it's trying to find a global culture ... this is ... important as we try - look at using oss t9 guide g8verment choices

Yours
---
Paul Brian
paul@mikadosoftware.com
07540456115
@lifeisstillgood----------------------------------------
----------------------------------------
book: Testing like the TSA – Signal v. Noise


https://signalvnoise.com/posts/3159-testing-like-the-tsa


Yours
---
Paul Brian
paul@mikadosoftware.com
07540456115
@lifeisstillgood
----------------------------------------
----------------------------------------
book: testing Test-driven development: A great idea hiding behind a terrible implementation? | Hacker News


https://news.ycombinator.com/item?id=20976397


Yours
---
Paul Brian
paul@mikadosoftware.com
07540456115
@lifeisstillgood
----------------------------------------
----------------------------------------
book: I've Built Multiple Growth Teams. Here's Why I Won't Do It Again. | CXL


https://conversionxl.com/blog/dont-build-growth-teams/


Yours
---
Paul Brian
paul@mikadosoftware.com
07540456115
@lifeisstillgood
----------------------------------------
----------------------------------------
book: 7 Elements of Principled Negotiation | Chron.com


https://smallbusiness.chron.com/7-elements-principled-negotiation-61235.html


Yours
---
Paul Brian
paul@mikadosoftware.com
07540456115
@lifeisstillgood
----------------------------------------
----------------------------------------
book: data landscape

10 - 100 million rows of row orientatad data slows down and performing analsus (ie not per row transact) becomes less efficient - so should look to translate to columnar data warehouse

see https://podcasts.apple.com/gb/podcast/the-python-podcast-init/id981834425?i=1000448380262

Yours
---
Paul Brian
paul@mikadosoftware.com
07540456115
@lifeisstillgood----------------------------------------
----------------------------------------
book: This is fantastic and surprisingly close to how I tended to explain computer sci... | Hacker News

exactly ! 

https://news.ycombinator.com/item?id=20898251


Yours
---
Paul Brian
paul@mikadosoftware.com
07540456115
@lifeisstillgood
----------------------------------------
----------------------------------------
book 3 tribes of programming


language wonks
systems programmers
product engineers


https://josephg.com/blog/3-tribes/


Yours
---
Paul Brian
paul@mikadosoftware.com
07540456115
@lifeisstillgood
----------------------------------------
----------------------------------------
book 3 tribes of programming


https://josephg.com/blog/3-tribes/


Yours
---
Paul Brian
paul@mikadosoftware.com
07540456115
@lifeisstillgood
----------------------------------------
----------------------------------------
book Lost Video Game Mechanics That Need To Come Back | Cracked.com


https://www.cracked.com/blog/5-lost-video-game-mechanics-that-need-to-come-back


Yours
---
Paul Brian
paul@mikadosoftware.com
07540456115
@lifeisstillgood----------------------------------------
----------------------------------------
book : software organisation- programmable company and metrics Amazon’s “two-pizza teams”: The ultimate divisional organization


https://jasoncrawford.org/two-pizza-teams


Yours
---
Paul Brian
paul@mikadosoftware.com
07540456115
@lifeisstillgood
----------------------------------------
----------------------------------------
book: For the life of me I can’t figure out why I would recommend Kubernetes to any co... | Hacker News


https://news.ycombinator.com/item?id=20848574


Yours
---
Paul Brian
paul@mikadosoftware.com
07540456115
@lifeisstillgood
----------------------------------------
----------------------------------------
book: devmanual Natural Language Processing: the age of Transformers


https://blog.scaleway.com/2019/building-a-machine-reading-comprehension-system-using-the-latest-advances-in-deep-learning-for-nlp/


Scope 
: basics of development deployment and operations 
: then other useful tricks
: then specialise (NLP)


Yours
---
Paul Brian
paul@mikadosoftware.com
07540456115
@lifeisstillgood----------------------------------------
----------------------------------------
book devmanual Introduction to Event-Driven Architectures with RabbitMQ | Hacker News


https://news.ycombinator.com/item?id=20828981

architecture of distributed systems 

Yours
---
Paul Brian
paul@mikadosoftware.com
07540456115
@lifeisstillgood
----------------------------------------
----------------------------------------
book: curation vs aggregation

the world grows up a bit
- twitter

Meanwhile, Twitter will stop accepting advertising from state-backed newsorganisations. This is aimed at preventing propaganda organisations (Russia Today, CCTV etc) from paying to place 'news stories' into people's feeds. 'Public broadcasters' (BBC, PBS, NHK etc), whose editorial is not under political control, are excluded from this change. This is obviously an extension of the removal of 'inauthentic state behaviour' (it looks like news but isn't), and an illustration of how far we've come from the days when Twitter said it was the 'free speech wing of the free speech party'. People grew up, a bit. Link



but the real news is people trying to build curated news feeds (think BBC plus)
apple new is one others exist

my saying : "everything in the BBC news headlines is important but not everything important is in the bbc news headlines"

curation matters


Yours
---
Paul Brian
paul@mikadosoftware.com
07540456115
@lifeisstillgood----------------------------------------
----------------------------------------
book Updating our advertising policies on state media


https://blog.twitter.com/en_us/topics/company/2019/advertising_policies_on_state_media.html

Meanwhile, Twitter will stop accepting advertising from state-backed newsorganisations. This is aimed at preventing propaganda organisations (Russia Today, CCTV etc) from paying to place 'news stories' into people's feeds. 'Public broadcasters' (BBC, PBS, NHK etc), whose editorial is not under political control, are excluded from this change. This is obviously an extension of the removal of 'inauthentic state behaviour' (it looks like news but isn't), and an illustration of how far we've come from the days when Twitter said it was the 'free speech wing of the free speech party'. People grew up, a bit. Link



Yours
---
Paul Brian
paul@mikadosoftware.com
07540456115
@lifeisstillgood----------------------------------------
----------------------------------------
book: Killing C.I.A. Informants, China Crippled U.S. Spying Operations - The New York Times


https://www.nytimes.com/2017/05/20/world/asia/china-cia-spies-espionage.html


Yours
---
Paul Brian
paul@mikadosoftware.com
07540456115
@lifeisstillgood
----------------------------------------
----------------------------------------
book : Major book publishers sue Amazon’s Audible over new speech-to-text feature | Hacker News

this matters - somehow
future software 
https://news.ycombinator.com/item?id=20796427


Yours
---
Paul Brian
paul@mikadosoftware.com
07540456115
@lifeisstillgood
----------------------------------------
----------------------------------------
book: crypto ought to work

Starbucks cards: 1.6bn stored value
but only for coffee (fine by me!) but i can see the whole medium of exchange thing 

but if starbucks expanded to include say mcdonald's i could use stored value in starbucks sndbnfc - 

but this means starbucks sharing details on how much cash i put on my card

and agreements on what happens if i put money on in the uk in pounds and try to buy a coffee by the seine (whichbit turns out is very hard)

div


Yours
---
Paul Brian
paul@mikadosoftware.com
07540456115
@lifeisstillgood----------------------------------------
----------------------------------------
book: Why jQuery? – Michael S. Mikowski – SPA (UI/UX/server) architect and author


https://mmikowski.github.io/why-jquery/


Yours
---
Paul Brian
paul@mikadosoftware.com
07540456115
@lifeisstillgood
----------------------------------------
----------------------------------------
book: Why Does Developing on Kubernetes Suck? | Tilt Blog


https://blog.tilt.dev//2019/08/21/why-does-developing-on-kubernetes-suck.html


Yours
---
Paul Brian
paul@mikadosoftware.com
07540456115
@lifeisstillgood
----------------------------------------
----------------------------------------
book director hazing and data overload (4 am txt first day prime minister gordon brown)



Yours
---
Paul Brian
paul@mikadosoftware.com
07540456115
@lifeisstillgood
----------------------------------------
----------------------------------------
book: choice is bad

i do t want choice - i just want you to sell me what i want - i don't care about every other option

post mass production 

- discovery beats everything else
- discovery needs trust - agents on my side 

Yours
---
Paul Brian
paul@mikadosoftware.com
07540456115
@lifeisstillgood----------------------------------------
----------------------------------------
Book; why dev manual

look at vfx houses - lots of showcasing ability to use tech - selling generalists based on lots of specialist examples

also 

ready, automate, fire

also

success is often having done it enough times before that it is low cost (getting the rubbish done) - but too often that outsourcing loses control (topless computing) 
automation is different - as long as it is all available it's all good 



Yours
---
Paul Brian
paul@mikadosoftware.com
07540456115
@lifeisstillgood----------------------------------------
----------------------------------------
book: How Slack Harms Projects – Silas Reinagel


https://www.silasreinagel.com/blog/2019/08/12/how-slack-harms-projects/

How Slack Harms Projects
Presently, real-time communication tools such as Slack are very popular in business environments. However, use of these tools creates a culture that harms projects. It negatively impacts planning accuracy, implementation quality, product refinements, and design quality. I will tell you about the many issues created by real-time messaging in workplaces, and how to remedy your work culture.



Where do real-time communication tools make sense?

For social groups
For entertainment
For people providing real-time support to customers
Where are real-time communication tools harmful?

For information workers
For business executives
For project workers
What harm is caused by real-time chat tools?

They promote a false sense of urgency

The cultural expectation for real-time messages is that recipients need to respond to them in a timely fashion. Not responding to a message quickly is considered a major failing. Not responding to a message directed at you in a group channel immediately is considered to be a grave sin.

The net impact of this is that it creates unhealthy psychological stress. Every worker who might receive a message must ensure that they are watching their messaging application continually, even when at lunch, or away with the family. Every issue or question, no matter how trivial, is effectively as critical as a house on fire. Not being responsive can be disastrous for one’s career, and so being responsive on Slack is more essential to your career than meeting deadlines, delivering quality work, or generating revenue for the company.

A high-urgency environment is a high-stress environment. Being in a high-stress working environment is extremely harmful to peoples physical and mental health. This is wasteful for the business, as well as being unhealthy for workers!

They destroy focus

There are two ways that focus is destroyed by real-time messaging apps.

First problem is the paranoid checking due to the false sense of urgency. You must stop to check your messages at least twice an hour, even if you are deep in debugging a production issue, or evolving an algorithm, or brainstorming solutions to business problems. This prevents ever focusing on a task for more than 40 minutes, no matter how valuable the task.

Second issue is when a message is directed at you. This again destroys focus, since you must stop thinking about the piece of valuable work you are tackling, and adapt yourself to a new context in order to address the issues of the inquirer.

Real-time communication and deep focus are diametrically opposed.

An unfocused workforce will create flawed, incomplete, and late creations, consistently.

They allow for bypassing project prioritization

When approaching their roles professionally, both a Product Owner and Project Manager (this should always be the same person) serve the critical role of creating a solid delivery plan, focusing the efforts of the team, and protecting the team from outside interference.

Real-time communication tools, in practice, bypass this entire process. Developers, wanting to be helpful, will stop working on the project tickets in order to help answer questions and troubleshoot problems. While the work might be fine in some cases (usually it isn’t), it undermines the entire project team by skipping the priorization process.

How much value is generated by answering a single public question versus delivering the project one day sooner?

ALL WORK, including troubleshooting issues, fixing bugs, and answered questions should go through the Product Owner. Real-time communication tools obliterate this process entirely.

They strip away essential business context

Real-time communication apps provide one-message-at-a-time interfaces. This is fantastic for quickly resolving emergency scenarios. It is awful for meaningful, contextualized design discussions. It is even worse for cross-conversations.

A good communication medium is one that contains the core business context, such as a GitHub issue, or a design document. That way, all comments and discussions are limited to the scope of that particular ISSUE, rather than being talked about in the scope of a group of PEOPLE.

Real-time tools are typically used with fixed groups of people. The relevance of each message varies for each person in the group. For those to whom the message isn’t relevant, it’s pure noise, It also puts an undue focus on the most recent thoughts expressed, rather than on the core issue. This is precisely backwards.

Quality work requires proper contextualization, which is something that real-time tools consistenty do not perform.

They encourage poorly thought-out communication

Because of the ability to quickly follow up messages with other messages, and the natural disposition towards short messages, the natural tendency of most information works is to message first, think later.

Got a half-formulated question? Send a group message.
Don’t want to Google something? Send a group message.
Unsure if the software is working correctly? Send a group message with a bunch of @ tags.
Want to ask someone specific about something? Say “Hello” and wait for a bit before stating the real purpose of a message.
Real-time messaging encourages little thinking, and brings many people to waste time while staring at the “XYZ is typing a message…” indicator in the bottom-corner.

Both Emails and Tickets are a much more professional business communication medium, since they encourage providing all the information BEFORE clicking send rather than after.

How can we fix this?

The short answer is to establish a culture which does the following:

PROHIBIT digital real-time communication tools for actively engaged project workers.
Use a clean a simple TICKET SYSTEM for all works requests, including hot issues.
Product Owners/Project Managers must provide a COMPLETE protective barrier.
All bugs reports and question should result in a DOCUMENT ARTIFACT.


What are the direct benefits of abandoning real-time communication tools for project workers?

Well-thought out communications
Peaceful, healthy, happy workers
Deep focus
Meaningful prioritization
Centralized business context
Change your work culture today!

Help your teammates achieve deep focus.

Encourage everyone to communicate in ways that value the time and effort of others.

Minimize the amount of re-expression needed for shared ideas.

Cultivate thoughtfulness.



Yours
---
Paul Brian
paul@mikadosoftware.com
07540456115
@lifeisstillgood----------------------------------------
----------------------------------------
book

can debate trade off in security 
age
of the expert is over - or rather tha age if the public ally unscrutinised expert

yes their peers verify
but now their recommendations are in public and tuenovertonnwindows is wider


Yours
---
Paul Brian
paul@mikadosoftware.com
07540456115
@lifeisstillgood----------------------------------------
----------------------------------------
book: Programmer Competency Matrix | Sijin Joseph


https://sijinjoseph.com/programmer-competency-matrix/


Yours
---
Paul Brian
paul@mikadosoftware.com
07540456115
@lifeisstillgood
----------------------------------------
----------------------------------------
book: Less than Half of Google Searches Now Result in a Click | SparkToro


https://sparktoro.com/blog/less-than-half-of-google-searches-now-result-in-a-click/


Yours
---
Paul Brian
paul@mikadosoftware.com
07540456115
@lifeisstillgood----------------------------------------
----------------------------------------
book 2 big idea: everything flows from the code

- death to
project management (testing for milestones)
- all
governance and metrics 

Yours
---
Paul Brian
paul@mikadosoftware.com
07540456115
@lifeisstillgood
----------------------------------------
----------------------------------------
book: TNT and nopetya virus



Yours
---
Paul Brian
paul@mikadosoftware.com
07540456115
@lifeisstillgood
----------------------------------------
----------------------------------------
book: business policy decorator

@business_polixy
def decide-which-lov-ait-is-in()

so instead of spreadsheets and implicit knowledge this means all decisions are written down in a specific location and acted upon

excel cannot do this - the  structure of cells does not allow this introspection 

so companies that abandon excel for real code introspectable code will have the advantage to introspection 

Yours
---
Paul Brian
paul@mikadosoftware.com
07540456115
@lifeisstillgood----------------------------------------
----------------------------------------
book:moop and level design for mapping life Gamasutra: Andrew Yoder's Blog - The Door Problem of Combat Design


https://gamasutra.com/blogs/AndrewYoder/20190808/348237/The_Door_Problem_of_Combat_Design.php


Yours
---
Paul Brian
paul@mikadosoftware.com
07540456115
@lifeisstillgood----------------------------------------
----------------------------------------
book moop SatNav for your life

surveillance is good or bad depending on the intentions of the person surveilking you

ad tech is just subscriptions by another name (you hooping to avoid cost of subscription by being able to ignore inconvenience of ads)

ticket shock on subscription revenue

moop - nlp, video body movements, psychology as just watching for behaviour and outcome (form of AI itself) 

Yours
---
Paul Brian
paul@mikadosoftware.com
07540456115
@lifeisstillgood----------------------------------------
----------------------------------------
book: join dev.to for marketing



Yours
---
Paul Brian
paul@mikadosoftware.com
07540456115
@lifeisstillgood
----------------------------------------
----------------------------------------
book: traders vs entrepreneurs

strategy to survive - kelly criterion
bet only with your winnings

nicolas taleb book - avoid ruin 


Yours
---
Paul Brian
paul@mikadosoftware.com
07540456115
@lifeisstillgood
----------------------------------------
----------------------------------------
book : market design



Yours
---
Paul Brian
paul@mikadosoftware.com
07540456115
@lifeisstillgood
----------------------------------------
----------------------------------------
book

testing in software mind - programmable
company and the QA spectrum

really hard to write sufficient unit testing (forced a DDD approach controller doenednacy inversion)

functional core
imperative shell

10:2:1 unit integration end2emd is a goal but is it the right goal? 

QA is a spectrum and in production testing / monitoring is really really helpful 

this is controversial 

unit testing is however faster so you find problems faster 

Yours
---
Paul Brian
paul@mikadosoftware.com
07540456115
@lifeisstillgood----------------------------------------
----------------------------------------
book governance The Voters Decide – Stratechery by Ben Thompson

implication - hiring your own voters ?????

https://stratechery.com/2016/the-voters-decide/

The Voters Decide
Wednesday, March 2, 2016
Stratechery is not a political blog, and this is not a political post. Rather, my focus is the business and strategy of technology, something that is inextricably linked with the effect technological change has and will have on society broadly — and that includes politics.

To that end I read with interest Hans Noel’s op-ed in The New York Times on Tuesday. Noel is, along with Marty Cohen, David Karol and John Zaller, the author of the 2008 book The Party Decides, one of the most influential books in U.S. political science, and Noel opened his piece by summarizing the book’s central thesis:

We argued that the leaders of party coalitions have great influence over the selection of a presidential nominee. Before [we wrote The Party Decides], the conventional wisdom was that such broad and diverse coalitions of politicians, activists and interest groups within parties were largely shut out of the nominating process by primaries and caucuses in the 1970s. This led to a free-for-all among narrowly factional candidates. In 1976, Jimmy Carter emerged from a crowded field to win the nomination despite having no connections to most leaders in the national party.

We argued that since that 1976 contest, party leaders had been exerting influence by coordinating on their choice during the “invisible primary” — the period before any voting when the leaders observed, met with and vetted candidates — then supporting that candidate throughout the process. When party leaders work together, they nearly always win, we said…

This year’s election has not followed our script. Mr. Trump is the clear front-runner, but is loathed by the party establishment.

To Noel’s credit, the reason for writing the op-ed is to self-critically examine what he and his co-authors may have gotten wrong; he has three potential theses (beyond noting that the Republican establishment may yet rally, and that Democrats have largely fallen into line):

Maybe the political environment has changed
Maybe the party is falling apart
Maybe Mr. Trump just got in the way
I think Noel’s scope is too narrow: politics is just the latest industry to be transformed by the Internet.

The Evolution of Politics and the Web

A few weeks ago Clay Shirky wrote a tweetstorm that is worth reading in full; for this post, though, I wanted to highlight the parts describing how the Internet has, election-by-election, fundamentally reshaped presidential campaigns:

Social media is breaking the political ‘Overton Window’ — the ability of elites to determine the outside edges of acceptable conversation (link). These limits were enforced by party discipline, and mass media whose economics meant political centrism was the best way to make money (link). This was BC: Before Cable. One or two newspapers per town, three TV stations; all centrist, white, pro-business, respectful of authority (link). Cable changed things, allowing outsiders to campaign more easily. In ’92, Ross Perot, 3rd party candidate, campaigned through infomercials (link).

After Cable but Before Web lasted only a dozen years. Cable added a new stream of media access. The web added a torrent (link). This started with Howard Dean (the OG) in ’03. Poverty was the mother of invention; Dean didn’t have enough $ to buy ads, even on cable (link) but his team had Meetup & blogs… (link). After webifying Perot’s media tactics, Dean pioneered online fundraising. Unfortunately for him, his Get Out The Vote operation didn’t (link). That took Obama. Obama was less of an outsider than Dean (though still regarded as unelectable in ’07) but used most of Dean’s playbook (link). And then there was vote-getting. Facebook and MyBarackObama let the Obama campaign run their own vote-getting machine out of Chicago (link).

The new scale Facebook introduces into politics is this: all registered American voters, ~150M people, are now a medium-sized group (link). Reaching & persuading even a fraction of the electorate used to be so daunting that only two national orgs could do it. Now dozens can (link). This set up the current catastrophe for the parties. They no longer control any essential resource, and can no longer censor wedge issues (link)

There are a few key concepts at the foundation of this analysis:

Previously information was gated by newspapers and TV stations with geographic monopolies; this began to break down with cable and was completely swept away by the web
The Internet made it possible to connect directly with voters to share information, collect money, and drive get-out-the-vote (GOTV) efforts
All of those voters are reachable via just a handful of platforms, especially Facebook
Long-time readers should recognize the tell-tale signs of Aggregation Theory.

Aggregation Theory Redux

Facebook and newspapers is an excellent example of how Aggregation Theory plays out:

Previously newspapers integrated editorial and advertising copy into a bundle that was delivered to a geographically captive audience. Said newspapers’ market dominance was secured by their control of production and distribution, but their growth was capped by the challenges of scaling said production and distribution beyond said geographic area.
Facebook (like Google before it) built a powerful relationship directly with users by delivering content users cared the most about. This, then, made Facebook the front door to the Internet for most users.
Facebook’s direct connection with users was a double-whammy for newspapers: first, Facebook is better-positioned to serve advertising, and second, users increasingly find all their news and entertainment via Facebook


The end result of this process is that newspapers have been modularized and commoditized into effective Facebook-filler, competing on an equal basis with everything from new media startups like BuzzFeed to personal blog posts to pictures of your cousin’s new baby. It’s hard for publishers to break through with content, and publisher-centric advertising is dying: better for ad buyers to get as close to the customer as possible and buy space on the service that has aggregated users on one side and leveraged that into commoditizing and modularizing suppliers on the other.

There certainly is room for all the ads: thanks to the Internet reality of zero distribution costs and zero transaction costs, an aggregator can scale nearly perfectly to effectively every user on Earth, as we’ve seen with Google, Facebook, Amazon, and increasingly Netflix and Uber.

Parties and Voters

For a moment, though, step back to the world as it was: the one where newspapers (and TV stations, etc.) were gatekeepers thanks to their ownership of production and distribution. In this world any viable political campaign had to play nicely with those who ran the press in the hopes of gaining positive earned media, endorsements, etc. Just as important, though, was the need to buy advertising, as that was the only way to reach voters at scale. And advertising required lots of money, which meant donors. And then, once the actual election rolled around, a campaign needed an effective GOTV effort, which took not only money but also the sort of manpower that could only be rustled up by organizations like labor unions, churches, etc.

It is all these disparate pieces: partisan media members, advertisers, donors, large associations, plus consultants and specialists to manage them that, along with traditional politicians, made up the “party” in The Party Decides. Noel and company asked in Chapter 1:

Why tie parties so closely to party leadership as such? Why not view parties as larger coalitions that include not only top leaders but activists, fund-raisers, interest groups, campaign technicians, and others? Certainly the larger set of actors has great influence on party behavior. We therefore propose to theorize parties, and to study them in practice, as coalitions of the larger set of actors. Politicians will be important but not necessarily dominant; interest groups, activists, and other policy demanders will be permitted large roles in party decisions. Our theory will focus on why diverse political actors might attempt to form parties and what kinds of candidates they might seek to nominate.

What is critical to understand when it comes to this more broad-based definition of a “party” is that its goals are not necessarily aligned with a majority of voters. The authors explain in Chapter 2 (emphasis mine):

The most important party business is the nomination and election of office seekers who will serve the interests of the party’s intense policy demanders. The italicized phrase marks the key difference between our theory and most other contemporary theorizing about parties. In our theory, parties — that is, the groups that constitute parties — do not care about winning for the sake of winning office. They care about the policy gains. And they make those gains not simply by the election of someone nominally affiliated with their party. They make them by the election of someone committed to the maximum feasible achievement of group goals…

It is natural to think of parties in a two-party system as majoritarian. Ours, however, are not. They want to win elections, but they do not necessarily wish to represent a majority of voters. As a by-product of their wish to govern, parties must offer a degree — perhaps a large degree — of responsiveness to popular majorities, but responsiveness to voters is not why parties exist. They exist to achieve the intense policy demands of their constituent groups. One might criticize parties for lack of deference to majority will, but their groups would not much care. Intense policy demanders nearly always believe their demands are just and that it is their duty to work for these demands whether or not most voters agree with them.

To summarize: parties are not just politicians, but coalitions of actors who care intensely about certain policy outcomes. These actors work together to get politicians elected who will serve their interests; voter interests are a means, not an ends. And, according to Noel and company, such parties succeed because they control all of the apparatus necessary to win elections.

Aggregation and Politics

This brings us back to today’s world, and admittedly, the leap from a description of Facebook and Aggregation Theory to politics is not an obvious one: I’m not proposing that Donald Trump or anyone else is an aggregator. Indeed, given their power over what users see Facebook could, if it chose, be the most potent political force in the world. Until, of course, said meddling was uncovered, at which point the service, having so significantly betrayed trust, would lose a substantial number of users and thus its lucrative and privileged place in advertising, leading to a plunge in market value. In short, there are no incentives for Facebook to explicitly favor any type of content beyond that which drives deeper engagement; all evidence suggests that is exactly what the service does.

Said reticence, though, creates a curious dynamic in politics in particular: there is no one dominant force when it comes to the dispersal of political information, and that includes the parties described in the previous section. Remember, in a Facebook world, information suppliers are modularized and commoditized as most people get their news from their feed. This has two implications:

All news sources are competing on an equal footing; those controlled or bought by a party are not inherently privileged
The likelihood any particular message will “break out” is based not on who is propagating said message but on how many users are receptive to hearing it. The power has shifted from the supply side to the demand side


This is a big problem for the parties as described in The Party Decides. Remember, in Noel and company’s description party actors care more about their policy preferences than they do voter preferences, but in an aggregated world it is voters aka users who decide which issues get traction and which don’t. And, by extension, the most successful politicians in an aggregated world are not those who serve the party but rather those who tell voters what they most want to hear.

In my initial description of Aggregation Theory I noted:

This has fundamentally changed the plane of competition: no longer do distributors compete based upon exclusive supplier relationships, with consumers/users an afterthought. Instead, suppliers can be aggregated at scale leaving consumers/users as a first order priority. By extension, this means that the most important factor determining success is the user experience: the best distributors/aggregators/market-makers win by providing the best experience, which earns them the most consumers/users, which attracts the most suppliers, which enhances the user experience in a virtuous cycle.

The term “user experience” obviously refers to a product; in the case of politics it is, apparently, at least in the case of some substantial number of Republican voters, “telling it like it is”, aka what voters, not parties, believe.


From The New York Times
And so, without any of the apparatus traditionally provided by parties, much of it obsoleted by the Internet, and thanks to the ability to connect directly with voters (because of aggregation), Donald Trump is marching on in direct defiance of the Republican Party’s decision.

Voters (and users) decide.



Yours
---
Paul Brian
paul@mikadosoftware.com
07540456115
@lifeisstillgood----------------------------------------
----------------------------------------
book print

Paul Brian
paul@mikadosoftware.com
07540 456 115
twitter: @lifeisstillgood
skype: paul.mikadosoftware
----------------------------------------
----------------------------------------
book - how to think about

c loud and devops (build your own AWS)

managing teams in large orgs (trust degradation and telling stories upwards )

software that follows .org needs first  vs customer needs first - and as that slowly became nes the whole .org is in software we are either ossified digitally or not

devops is huge monitoring testing QA with small amount of core code (hence the devmanual mikado repos) this is because the essential design can be small and does not need much testing because it simple - (Nasa does not clean room its room booing software) but to make it work as it scales up needs not changing the core code but changing the supporting scaffolding (hence my rather silly claim that you could run every fortune 599 with this code base)

read all my tom myself notes and categorise here 



Yours
---
Paul Brian
paul@mikadosoftware.com
07540456115
@lifeisstillgood----------------------------------------
----------------------------------------
book: misc All the best engineering advice I stole from non-technical people


https://medium.com/@bellmar/all-the-best-engineering-advice-i-stole-from-non-technical-people-eb7f90ca2f5f


Yours
---
Paul Brian
paul@mikadosoftware.com
07540456115
@lifeisstillgood----------------------------------------
----------------------------------------
 book devops Jay Kreps — Getting Real About Distributed System Reliability


https://blog.empathybox.com/post/19574936361/getting-real-about-distributed-system-reliability

Getting Real About Distributed System Reliability
There is a lot of hype around distributed data systems, some of it justified. It’s true that the internet has centralized a lot of computation onto services like Google, Facebook, Twitter, LinkedIn (my own employer), and other large web sites. It’s true that this centralization puts a lot of pressure on system scalability for these companies. Its true that incremental and horizontal scalability is a deep feature that requires redesign from the ground up and can’t be added incrementally to existing products. It’s true that, if properly designed, these systems can be run with no planned downtime or maintenance intervals in a way that traditional storage systems make harder. It’s also true that software that is explicitly designed to deal with machine failures is a very different thing from traditional infrastructure. All of these properties are critical to large web companies, and are what drove the adoption of horizontally scalable systems like Hadoop, Cassandra, Voldemort, etc. I was the original author of Voldemort and have worked on distributed infrastructure for the last four years or so. So in-so-far as there is a “big data” debate, I am firmly in the “pro-” camp. But one thing you often hear is that this kind of software is more reliable than the traditional alternatives it replaces, and this just isn’t true. It is time people talked honestly about this.

You hear this assumption of reliability everywhere. Now that scalable data infrastructure has a marketing presence, it has really gotten bad. Hadoop or Cassandra or what-have-you can tolerate machine failures then they must be unbreakable right? Wrong.

Where does this come from? Distributed systems need to partition data or state up over lots of machines to scale. Adding machines increases the probability that some machine will fail, and to address this these systems typically have some kind of replicas or other redundancy to tolerate failures. The core argument that gets used for these systems is that if a single machine has probability P of failure, and if the software can replicate data N times to survive N-1 failures, and if the machines fail independently, then the probability of losing a particular piece of data must be PN. So for any desired reliability R and any single-node failure probability P you can pick some replication N so that PN < R. This argument is the core motivation behind most variations on replication and fault tolerance in distributed systems. It is true that without this property the system would be hopelessly unreliable as it grew. But this leads people to believe that distributed software is somehow innately reliable, which unfortunately is utter hogwash.

Where is the flaw in the reasoning? Is it the dreaded Hadoop single points of failure? No, it is far more fundamental than that: the problem is the assumption that failures are independent. Surely no belief could possibly be more counter to our own experience or just common sense than believing that there is no correlation between failures of machines in a cluster. You take a bunch of pieces of identical hardware, run them on the same network gear and power systems, have the same people run and manage and configure them, and run the same (buggy) software on all of them. It would be incredibly unlikely that the failures on these machines would be independent of one another in the probabilistic sense that motivates a lot of distributed infrastructure. If you see a bug on one machine, the same bug is on all the machines. When you push bad config, it is usually game over no matter how many machines you push it to.

PN is an upper bound on reliability but one that you could never, never approach in practice. For example Google has a fantastic paper that gives empirical numbers on system failures in Bigtable and GFS and reports empirical data on groups of failures that show rates several orders of magnitude higher than the independence assumption would predict. This is what one of the best system and operations teams in the world can get: your numbers may be far worse.

The actual reliability of your system depends largely on how bug free it is, how good you are at monitoring it, and how well you have protected against the myriad issues and problems it has. This isn’t any different from traditional systems, except that the new software is far less mature. I don’t mean this disparagingly, I work in this area, it is just a fact. Maturity comes with time and usage and effort. This software hasn’t been around for as long as MySQL or Oracle, and worse, the expertise to run it reliably is much less common. MySQL and Oracle administrators are plentiful, but folks experience with, say, serious production Zookeeper operations knowledge are much more rare.

Kernel filesystem engineers say it takes about a decade for a new filesystem to go from concept to maturity. I am not sure these systems will be mature much faster—they are not easier systems to build and the fundamental design space is much less well explored. This doesn’t mean they won’t be useful sooner, especially in domains where they solve a pressing need and are approached with an appropriate amount of caution, but they are not yet by any means a mature technology.

Part of the difficulty is that distributed system software is actually quite complicated in comparison to single-server code. Code that deals with failure cases and is “cluster aware” is extremely tricky to get right. The root of the problem is that dealing with failures effectively explodes the possible state space that needs testing and validation. For example it doesn’t even make sense to expect a single-node database to be fast if its disk system suddenly gets really slow (how could it), but a distributed system does need to carry on in the presence of single degraded machine because it has some many machines, one is sure to be degraded. These kind of “semi-failures” are common and very hard to deal with. Correctly testing these kinds of issues in a realistic setting is brutally hard and the newer generation of software doesn’t have anything like the QA processes its more mature predecessors had. (If you get a chance get someone who has worked at Oracle to describe to you what kind of testing they do to a line of code that goes into their database before it gets shipped to customers). As a result there are a lot of bugs. And of course these bugs are on all the machines, so they absolutely happen together.

Likewise distributed systems typically require more configuration and more complex configuration because they need to be cluster aware, deal with timeouts, etc. This configuration is, of course, shared; and this creates yet another opportunity to bring everything to its knees.

And finally these systems usually want lots of machines. And no matter how good you are, some part of operational difficulty always scales with the number of machines.

Let’s discuss some real issues. We had a bug in Kafka recently that lead to the server incorrectly interpreting a corrupt request as a corrupt log, and shutting itself down to avoid appending to a corrupt log. Single machine log corruption is the kind of thing that should happen due to a disk error, and bringing down the corrupt node is the right behavior—it shouldn’t happen on all the machines at the same time unless all the disks fail at once. But since this was due to corrupt requests, and since we had one client that sent corrupt requests, it was able to sequentially bring down all the servers. Oops. Another example is this Linux bug which causes the system to crash after ~200 days of uptime. Since machines are commonly restarted sequentially this lead to a situation where a large percentage of machines went hard down one after another. Likewise any memory management problems—either leaks or GC problems—tend to happen everywhere at once or not at all. Some companies do public post-mortums for major failures and these are a real wealth of failures in systems that aren’t supposed to fail. This paper has an excellent summary of HDFS availability at Yahoo—they note how few of the problems are of the kind that high availability for the namenode would solve. This list could go on, but you get the idea.

I have come around to the view that the real core difficulty of these systems is operations, not architecture or design. Both are important but good operations can often work around the limitations of bad (or incomplete) software, but good software cannot run reliably with bad operations. This is quite different from the view of unbreakable, self-healing, self-operating systems that I see being pitched by the more enthusiastic NoSQL hypesters. Worse yet, you can’t easily buy good operations in the same way you can buy good software—you might be able to hire good people (if you can find them) but this is more than just people; it is practices, monitoring systems, configuration management, etc.

These difficulties are one of the core barriers to adoption for distributed data infrastructure. LinkedIn and other companies that have a deep interest in doing creative things with data have taken on the burden of building this kind of expertise in-house—we employ committers on Hadoop and other open source projects on both our engineering and operations team, and have done a lot of from-scratch development in this space where there was gaps. This makes it feasible to take full advantage of an admittedly valuable but immature set of technologies, and let’s us build products we couldn’t otherwise—but this kind of investment only makes sense at a certain size and scale. It may be too high a cost for small startups or companies outside the web space trying to bootstrap this kind of knowledge inside a more traditional IT organization.

This is why people should be excited about things like Amazon’s DynamoDB. When DynamoDB was released, the company DataStax that supports and leads development on Cassandra released a feature comparison checklist. The checklist was unfair in many ways (as these kinds of vendor comparisons usually are), but the biggest thing missing in the comparison is that you don’t run DynamoDB, Amazon does. That is a huge, huge difference. Amazon is good at this stuff, and has shown that they can (usually) support massively multi-tenant operations with reasonable SLAs, in practice.

I really think there is really only one thing to talk about with respect to reliability: continuous hours of successful production operations. That’s it. In some ways the most obvious thing, but not typically what you hear when people talk about these systems. I will believe the system can tolerate (some) failures when I see it tolerate those failures; I believe it can run for a year without downtime when i see it run for a year without downtime. I call this empirical reliability (as opposed to theoretical reliability). And getting good empirical reliability is really, really hard. These systems end up being large hunks of monitoring, tests, and operational procedures with a teeny little distributed system strapped to the back.

You see this showing up in discussions of the CAP theorem all the time. The CAP theorem is a useful thing, but it applies more to system design than system implementations. A design is simple enough that you can maybe prove it provides consistency or tolerates partition failures under some assumptions. This is a useful lens to look at system designs. You can’t hope to do this kind of proof with an actual system implementation, the thing you run. The difficulty of building these things means it is really unthinkable that these systems are, in actual reality, either consistent, available, or partition tolerant—they certainly all have numerous bugs that will break each of these guarantees. I really like this paper that takes the approach of actually trying to calculate the observed consistency of eventually consistent systems—they seem to do it via simulation rather than measurement, which is unfortunate, but the idea is great.

It isn’t that system design is meaningless, it is worth discussing the system design as it does act as a kind of limiting factor on certain aspects of reliability and performance as the implementation matures and improves, but don’t take it too seriously as guaranteeing anything.

So why isn’t this kind of empirical measurement more talked about? I don’t know. My pet theory is it has to do with the somewhat rigid and deductive mindset of classical computer science. This is inherited from pure math, and conflicts with the attitude in scientific disciplines. It leads to a preference for starting with axioms, and then proving various properties that follow from these axioms. This world view doesn’t embrace the kind of empirical measurements you would expect to justify claims about reality (for another example see this great blog post on programming language productivity claims in programming language research). But that is getting off topic. Suffice it to say, when making predictions about how a system will work in the real world I believe in measurements of reality a lot more than arguments from first-principles.

I think we should insist on a little more rigor and empiricism in this area.

I would love to see claims in academic publication around practicality or reliability justified in the same way we justify performance claims–by doing it. I would be a lot more likely to believe an academic distributed system was practically feasible if it was run continuously under load for a year successfully and if information was reported on failures and outages. Maybe that isn’t feasible for an academic project, but few other allegedly scientific academic disciplines can get away with making claims about reality without evidence.

More broadly I would like to see more systems whose operation is verifiable. Many systems have the ability to log out information about their state in a way that makes programmatic checking of various invariants and guarantees possible (such as consistency or availability). An example of such an invariant for a messaging system is that all the messages sent to it are received by all the subscribers. We actually measure the truth of this statement in real-time in production for our Kafka data pipeline for all 450 topics and all their subscribers. The number of corner-cases one uncovers with this kind of check, run through a few hundred use cases and a few billion messages per day is truly astounding. I think this is a special case of a broad class of verification that can be done on the running system that goes far far deeper than what is traditionally considered either monitoring or testing. Call it unit testing in production, or self-proving systems, or next generation monitoring, or whatever, but I think this kind of deep verification is something that makes turning the theoretical claims a design makes into measured properties of the real running system.

Likewise if you have a “NoSQL vendor” I think it is reasonable to ask them to provide hard information on customer outages. They don’t need to tell you who the customer is, but they should let you know the observed real-life distribution of MTTF and MTTR they are able to achieve, not just highlight one or two happy cases. Make sure you understand how they measure this, do they have automated test load that runs or just wait for people to complain? This is a reasonable thing for people paying for a service to ask for. To a certain extent if they provide this kind of empirical data it isn’t clear why you should even care what their architecture is beyond intellectual curiosity.

Distributed systems solve a number of key problems at the heart of scaling large websites. I absolutely think this is going to become the default approach to handling state in internet application development. But no one benefits from the kind of irrational exuberance that currently surrounds the “big data” or nosql systems communities. This area is experiencing a boom—but nothing takes us from boom to bust like unrealistic hype and broken promises. We should be a little more honest about where these systems already shine and where they are still maturing.



Yours
---
Paul Brian
paul@mikadosoftware.com
07540456115
@lifeisstillgood----------------------------------------
----------------------------------------
book: practical becomes ethical

three groups

referendum
experts inopen
secret police 

trolley problem leads to asking people but people don't know so we had experts (EU) but they aren't trusted so ask people .. problem with democracy ??? 

Yours
---
Paul Brian
paul@mikadosoftware.com
07540456115
@lifeisstillgood----------------------------------------
----------------------------------------
book Reactive and Component Frameworks for "Old Fart" Programmers


https://blog.codesolvent.com/2019/08/reactive-and-component-frameworks-for.html

div - no meaning
div class=toolbar  - bootstrap 
<toolbar> html5 component 

do I care ?
no 


Yours
---
Paul Brian
paul@mikadosoftware.com
07540456115
@lifeisstillgood----------------------------------------
----------------------------------------
book agile Answer - Quora


https://www.quora.com/Why-do-some-developers-at-strong-companies-like-Google-consider-Agile-development-to-be-nonsense


Yours
---
Paul Brian
paul@mikadosoftware.com
07540456115
@lifeisstillgood----------------------------------------
----------------------------------------
book Production-ready Docker images


https://pythonspeed.com/docker/


Yours
---
Paul Brian
paul@mikadosoftware.com
07540456115
@lifeisstillgood
----------------------------------------
----------------------------------------
book The economics of software correctness | David R. MacIver


https://www.drmaciver.com/2015/10/the-economics-of-software-correctness/


Yours
---
Paul Brian
paul@mikadosoftware.com
07540456115
@lifeisstillgood
----------------------------------------
----------------------------------------
book: projects Mever wrote a project plan until after the first iteration of the code - you simply don't know enough -

you can do t shirt sizing, and estimate effort remaining but no taksnbreakdowns and project plans 

in fact dump them wholly

don't work in software, software is eating the world so they don't work in the world 

Yours
---
Paul Brian
paul@mikadosoftware.com
07540456115
@lifeisstillgood----------------------------------------
----------------------------------------
book: A (rewritten) manifesto for error reporting | David R. MacIver


https://www.drmaciver.com/2013/03/a-rewritten-manifesto-for-error-reporting/


Yours
---
Paul Brian
paul@mikadosoftware.com
07540456115
@lifeisstillgood
----------------------------------------
----------------------------------------
book: testing g Some things that might help you make better software | David R. MacIver


https://www.drmaciver.com/2016/10/some-things-that-might-help-you-write-better-software/

Some things that might help you make better software
October 27, 2016
I’ve argued before that most software is broken because of economic reasons. Software which is broken because there is no incentive to ship good software is going to stay broken until we manage to change those incentives. Without that  there will be no budget for quality, and nothing you can do is going to fix it.

But suppose you’re in the slightly happier place where you do have budget for quality? What then? What can you do to make sure you’re actually spending that budget effectively and getting the best software you could be getting out of it?

I don’t have an easy answer to that, and I suspect none exists, but I’ve been doing this software thing for long enough now that I’ve picked up some things that seem to help quality without hurting (and ideally helping) productivity. I thought it would be worth writing them down.

Many of them will be obvious or uncontroversial, but if you’re already doing all of them then your team is probably doing very well.

This is all based somewhat on anecdote and conjecture, and it’s all coloured by my personal focuses and biases, so some of it is bound to be wrong. However I’m pretty sure it’s more right than wrong and that the net effect would be strongly positive.

Without further ado, here is my advice.

Attitude

If you do not care about developing quality software you will not get quality software no matter what your tools and processes are designed to give you.

This isn’t just about your developers either. If you do not reward the behaviour that is required to produce quality software, you will not get quality software. People can read their managers’ minds, and if you say you want quality software but reward people for pushing out barely functioning rubbish, people are smart enough to figure out you don’t really mean that.

Estimated cost: Impossible to buy, but hopefully if you’re reading this article you’re already there. If you’re embedded in a larger context that isn’t, try creating little islands of good behaviour and see if you can bring other people around to your way of thinking.

Estimated benefit: On it’s own, only low to moderate – intent doesn’t do much without the ability to act – but it is the necessary precursor to everything else.

Controversy level: Probably most people agree with this, although equally it doesn’t feel like most people implement this. I imagine there are some people who think they can fix this problem if they just find the right process. Maybe they’re right, but I’ve never seen something even approaching such a process.

Automated Testing

Obviously I have quite a few thoughts about automated testing, so this section gets a lot of sub headings.

Continuous Integration

You need to be running automated tests in some sort of CI server that checks every ostensibly releasable piece of software and checks whether it passes the tests.

If you’re not doing this, just stop reading this article and go set it up right now, because it’s fundamental. Add a test that just fires up your website and requests the home page (or some equivalent if you’re not writing a website). You’ve just taken the first and most important step on the road from throwing some crap over the wall and seeing if anyone on the other side complains about it landing on them to actual functional software development.

Estimated cost: Hopefully at worst a couple days initial outlay to get this set up, then small to none ongoing.

Estimated benefit: Look, just go do this already. It will give you a significant quality and productivity boost.

Controversy level: It would be nice to think this was uncontroversial. It’s certainly well established best practice, but I’ve worked at companies that don’t do it (a while ago), and a friend basically had to ramrod through getting this implemented at the company they’d joined recently.

Local Automated Testing

You need to be able to run a specific test (and ideally the whole test suite) against your local changes.

It doesn’t really matter if it runs actually on your local computer, but it does matter that it runs fast. Fast feedback loops while you work are incredibly important. In many ways the length of time to run a single test against my local changes is the biggest predictor of my productivity on a project.

Ideally you need to  be able to select a coherent group of tests (all tests in this file, all tests with this tag) and run just those tests. Even better, you should be able to run just the subset of whatever tests you ask to run that failed last time. If you’re using Python, I recommend py.test as supporting these features. If you’re currently using unittest you can probably just start using it as an external runner without any changes to your code.

Estimated cost: Depends on available tooling and project. For some projects it may be prohibitively difficult (e.g. if your project requires an entire hadoop cluster to run the code you’re working on), but for most it should be cheap to free.

Estimated benefit: Similarly “look, just go do this already” if you can’t run a single test locally. More specific improvements will give you a modest improvement in productivity and maybe some improvement in quality if they make you more likely to write good tests, which they probably will.

Controversy level: Not very. I’ve only worked at one company where running tests locally wasn’t a supported workflow, and I fixed that, but workflows which support my slightly obsessive focus on speed of running a single test are rarely as good as I’d like them to be.

Regression Testing

The only specific type of automated testing that I believe that absolutely everybody should be doing is regression testing: If you find a bug in production, write a test that detects that bug before you try to fix the bug. Ideally write two tests: One that is as general as possible, one that is as specific as possible. Call them an integration and a unit test if that’s your thing.

This isn’t just a quality improvement, it’s a productivity improvement. Trying to fix bugs without a reproducible example of that bug is just going to waste your time, and writing a test is the best way to get a reproducible example.

Estimated cost: Zero, assuming you have local testing set up. This is just what you should be doing when fixing bugs because it’s better than the other ways of fixing bugs – it will result in faster development and actually fixed bugs.

Estimated benefit: Depends how much time you spend fixing bugs already, but it will make that process faster and will help ensure you don’t have to repeat the process. It will probably improve quality somewhat by virtue of preventing regressions and also ensuring that buggier areas of the code are better tested.

Controversy level: In theory, not at all. In practice, I’ve found many to most developers need continual reminders that this is a thing you have to do.

Code Coverage

You should be tracking code coverage. Code coverage is how you know code is tested. Code being tested is how you know that it is maybe not completely broken.

It’s OK to have untested code. A lot of code isn’t very important, or is difficult enough to test that it’s not worth the effort, or some combination of the two.

But if you’re not tracking code coverage then you don’t know which parts of your code you have decided you are OK with being broken.

People obsess a lot about code coverage as a percentage, and that’s understandable given that’s the easiest thing to get out of it, but in many ways it’s the least important part of code coverage. Even the percentage broken down by file is more interesting that, but really the annotated view of your code is the most important part because it tells you which parts of your system are not tested.

My favourite way to use code coverage is to insist on 100% code coverage for anything that is not explicitly annotated as not requiring coverage, which makes it very visible in the code if something is untested. Ideally every pragma to skip coverage would also have a comment with it explaining why, but I’m not very good about that.

As a transitional step to get there, I recommend using something like diff-cover or coveralls which let you set up a ratcheting rule in your build that prevents you from decreasing the amount of code coverage.

Estimated cost: If your language has good tooling for coverage, maybe a couple hours to set up. Long-term, essentially free.

Estimated benefit: On its own, small, but it can be a large part of shifting to a culture of good testing, which will have a modest to large effect.

Controversy level: Surprisingly high. Of the companies I’ve worked at precisely zero have tracked code coverage (in one case there was a push for it but younger me argued against it. My opinions on testing have changed a lot over the years).

Property-based Testing

Property-based testing is very good at shifting the cost-benefit ratio of testing, because it somewhat reduces the effort to write what is effectively a larger number of tests and increases the number of defects those tests will find.

I won’t write too much about this here because I have an entire separate site about this.

Estimated cost: If you’re using a language with a good property based testing tool, about 15 minutes to install the package and write your first test. After that, free to negative. If you’re not, estimated cost to pay me to port Hypothesis to a new language is around £15-20k.

Estimated benefit: You will find a lot more bugs. Whether this results in a quality improvement depends on whether you actually care about fixing those bugs. If you do, you’ll see a modest to large quality improvement. You should also see a small to modest productivity improvement if you’re spending a lot of time on testing already.

Controversy level: Not very high, but niche enough that most people haven’t formed an opinion on it. Most people think property based testing is amazing when they encounter it. Some push back on test speed and non-determinism (both of which have partial to complete workarounds in Hypothesis at least)

Manual Testing

At a previous job I found a bug in almost every piece of code I reviewed. I used a shocking and complicated advanced technique to do this: I fired up the application with the code change and tried out the feature.

Manual testing is very underrated. You don’t have to have a dedicated QA professional on your team to do it (though I suspect it helps a lot if you do), but new features should have a certain amount of exploratory manual testing done by someone who didn’t develop them – whether it’s another developer, a customer service person, whatever. This will find both actual bugs and also give you a better idea of its usability.

And then if they do find bugs those bugs should turn into automated regression tests.

Estimated cost: It involves people doing stuff on an ongoing basis, so it’s on the high side because people are expensive, but it doesn’t have to be that high to get a significant benefit to it. You can probably do quite well with half an hour of testing of a feature that took days to develop. This may also require infrastructure changes to make it easy to do that can have varying levels of cost and difficulty, but worst case scenario you can do it on the live system.

Estimated benefit: You will almost certainly get a moderate quality improvement out of doing this.

Controversy level: Having QA professionals seems to be entirely against the accepted best practice in startups. The rest, similar to regression testing: Doing a bit of manual testing seems to be one of those things where people say “Of course we do that” and then don’t do it.

Version Control

You need to be using a version control system with good branching and merging. This is one of the few pieces of advice where my recommendation requires making a really large change to your existing workflow.

I hope that it’s relatively uncontroversial that you should be using version control (not everybody is!). Ideally you should be using good version control. I don’t really care if you use git, mercurial, fossil, darcs, whatever. We could get into a heated argument about which is better but it’s mostly narcissism of small differences at this point.

But you should probably move off SVN if you’re still on it and you should definitely move off CVS if you’re still on it. If you’re using visual source safe you have my sympathies.

The reason is simple: If you’re working on a team of more than one person, you need to be able to incorporate each other’s changes easily, and you need to be able to do that without trashing your own work. If you can’t, you’re going to end up wasting a lot of your time.

Estimated cost: Too project dependent to say. Importer tools are pretty good, but the real obstacle is always going to be the ecosystem you’ve built around the tools. At best you’re going to have a bad few weeks or months while people get used to the new system.

Estimated benefit: Moderate to large. Many classes of problems will just go away and you will end up with a much more productive team who find it much easier to collaborate.

Controversy level: Basically uncontroversial. Not as widespread as you might imagine, but not controversial. Once git started becoming popular basically everywhere I’ve worked used it (with one exception for mercurial and one exception for Google’s interesting perforce ish based system).

Monorepos

Use a single repository for all your code.

It’s tempting to split your projects into lots of small repos for libraries and services, but it’s almost always a bad idea. It significantly constrains your ability to refactor across the boundary and makes coordinating changes to different parts of the code much harder in almost every way, especially with most standard tooling.

If you’re already doing this, this is easy. Just don’t change.

If you’re not, just start by either creating or designating an existing repository as the monorepo and gradually move the contents of other repos into it as and when convenient.

The only exception where you probably need to avoid this is specific projects you’re open sourcing, but even then it might be worth developing them in the monorepo with some sort of external repo.

This point has proved controversial, so if you’re still unconvinced I have written a longer advocacy piece on why you should use a monorepo.

Estimated costs: Too project dependent to say, but can be easily amortised over time.

Estimated benefits: Every time you do something that would have required touching two repos at once, your life will be slightly easier because you are not paying coordination costs. Depends on how frequent that is, but experience suggests it’s at least a modest improvement.

Controversy level: High. This piece of advice is extremely love/hate. I think most of the people who love it are the ones who have tried it at least once and most of the people who hate it are those who haven’t, but that might be my biases speaking. It’s been pretty popular where I’ve seen it implemented.

Static Analysis

I do not know what the right amount of static analysis is, but I’m essentially certain that it’s not none. I would not be surprised to learn that the right amount was quite high and includes a type system of some sort, but I don’t know (I also would not be surprised to discover that it was not). However even very dynamic languages admit some amount of static analysis and there are usually tools for it that are worth using.

I largely don’t think of this as a quality thing though. It’s much more a productivity improvement.  Unless you are using a language that actively tries to sabotage you (e.g. C, JavaScript), or you have a really atypically good static analysis system that does much more work than the ones I’m used to (I’m actually not aware of any of these that aren’t for C and/or C++ except for languages with actual advanced type systems), static analysis is probably not going to catch bugs much more effectively than a similar level of good testing.

But what it does do is catch those bugs sooner and localise them better. This significantly improves the feedback loop of development and stops you wasting time debugging silly mistakes.

There are two places that static analysis is particularly useful:

In your editor. I use syntastic because I started using vim a decade ago and haven’t figured out how to quit yet, but your favourite editor and/or IDE will likely have something similar (e.g. The Other Text Editor has flycheck). This is a really good way of integrating lightweight static analysis into your workflow without having to make any major changes.
In CI. The ideal number of static analysis errors in your project is zero (this is true even when the static analysis system has false positives in my opinion, with the occasional judicious use of ‘ignore this line’ pragmas), but you can use the same tricks as with code coverage to ratchet them down to zero from wherever you’re starting.
Most languages will have at least a basic linting tool you can use, and with compiled languages the compiler probably has warning flags you can turn on. Both are good sources of static analysis that shouldn’t require too much effort to get started with.

Estimated cost: To use it in your editor, low (you can probably get it set up in 10 minutes). To use it in your CI, higher but still not substantial. However depending on the tool it may require some tuning to get it usable, which can take longer.

Estimated benefit: Depends on the tool and the language, but I think you’ll get a modest productivity boost from incorporating static analysis and may get a modest to large quality boost depending on the language (in Python I don’t think you’ll get much of a quality benefit. In C I think you’ll get a huge one even with just compiler warnings).

Controversy level: Varies entirely depending on level of static analysis. Things that you could reasonably describe as “linting” are low. Things that require something closer to a type system much higher. Tools with a high level of false positives also high. You can definitely find an uncontroversial but still useful level of static analysis. I’ve seen it at a moderate subset of the companies I worked for.

Production Error Monitoring

You should have some sort of system that logs all errors in production to something more interactive than a log file sitting on a server somewhere. If you’re running software locally on end users’ computers this may be a bit more involved and should require end user consent, but if you’re writing a web application we’re all used to being pervasively spied on in everything we do anyway so who cares?

I’ve used and like Sentry for this. There are other options, but I don’t have a strong opinion about it.

Estimated cost: Depends on setup, but getting started with sentry is easy and it doesn’t cost a particularly large amount per month (or you can host the open source version for the cost of a server).

Estimated benefit: Much better visibility of how broken your software is in production is the best thing for making your software less broken in production. It will also speed up your debugging process a lot when you do have production errors to fix, so it’s probably a net win in productivity too if you spend much time debugging production errors (and you probably do).

Controversy level: Low but surprisingly it’s not nearly as widely implemented as you might expect. Another thing that is becoming more common though I think.

Assertions

I am a big fan of widespread use of assertions, and of leaving them on in production code.

The main reason for this is simple: The single biggest factor in ease of debugging is making sure that the point at which the error is reported is as close as possible to the point at which the error occurs. Assertions are a very good way to do this because they turn a failure of understanding into a runtime error: If your code is not behaving in a way you’d expect, that becomes an error immediately, and it is much easier to debug than finding the downstream thing that actually went wrong at some point later.

It also has a huge benefit when doing property-based testing, because they greatly increase the scope of properties tested – problems that might not have been noticed by the explicit test become much more visible if they trigger an assertion failure.

Input validation while technically not an assertion also has the same effect – a function which checks its arguments rather than silently doing the wrong thing when given a wrong argument will be significantly easier to debug.

John Regehr has a good post on the care and feeding of assertions that I recommend reading further.

Estimated cost: Low if you just start adding them in as you develop and edit code. Requires a bit of careful thinking about what the code is doing, but that’s no bad thing.

Estimated benefit: Modest. This won’t be life changingly good, but I have frequently been grateful for a well placed assertion in my code preventing what would otherwise be a much more confusing bug.

Controversy level: People don’t really seem to have an opinion on this one way or another, but it’s not a common habit at all. I’ve not seen it be widespread at any company I’ve worked for.

Code Review

I think all projects with > 1 person on them should put all code changes through code review.

Code review seems to be a fairly cost effective defect finding tool according to the literature. I previously believed this not to be the case, but I’ve done some reading and I changed my mind.

But regardless of whether you find defects, it will ensure two  very important things:

At least one other person understands this code. This is useful both for bus factor and because it ensures that you have written code that at least one other person can understand.
At least one other person thinks that shipping this code is a good idea. This is good both for cross checking but also because it forces you to sit down and think about what you ship. This is quite important: Fast feedback loops are good for development, but slow feedback loops for shipping make you pause and think about it.
Over time this will lead to a significantly more maintainable and well designed piece of software.

Estimated cost: You need to get a code review system set up, which is a modest investment and may be trivial. I can’t really recommend anything in this space as the only things I’ve used for this are Github and proprietary internal systems. Once you’ve got that, the ongoing cost is actually quite high because it requires the intervention of an actual human being on each change.

Estimated benefit: It’s hard to say. I have never been part of a code review process that I didn’t think was worth it, but I don’t have a good way of backing that up with measurements. It also depends a lot on the team – this is a good way of dealing with people with different levels of experience and conscientiousness.

Controversy level: Fairly uncontroversial, though at least amongst small companies it used to be weird and unusual. At some point in my career it went from “nobody does this” to “everybody does this”. I think a combination of GitHub pull requests and acknowledgement that most of the cool big companies do it seems to have taken this from a niche opinion to widespread practice in a remarkably short number of years.

Continuous Delivery

Another part of localising things to when they went wrong is that ideally once something has passed code review it will ship as soon as possible. Ideally you would ship each change as its own separate release, but that isn’t always practical if you’re e.g. shipping client side software.

This helps ensure that when something goes wrong you have a very good idea of what caused it because not that much changed.

Another important part of this is that when a release goes out you should always be able to roll it back easily. This is essential if you want to make releasing low cost, which is in turn essential for having this sort of frequent release.

A thing I have never worked with personally but have regarded with envy is staged roll out systems which first roll out to a small fraction of the customer base and then gradually ratchet up until it reaches 100%, rolling back automatically or semi-automatically if anything seems to have gone wrong in the process.

Estimated cost: The transitional period from infrequent to frequent deliveries can be a bit rough – you’ll need to spend time automating manual steps, looking for inefficiencies, etc. Take baby steps and gradually try to improve your frequency over time and you can spread this out fairly easily though.

Estimated benefit: A modest quality improvement, and quite a large improvement in debugging time if you currently end up with a lot of broken releases. The release process changes you have to make to make this work will probably also be a significant net time saver.

Controversy level: I’m not sure. It hasn’t seemed that controversial where I’ve seen it implemented, but I think larger companies are more likely to hate it.

Auto formatting and style checking

Code review is great, but it has one massive failure mode. Consider Wadler’s law:

In any language design, the total time spent discussing a feature in this list is proportional to two raised to the power of its position.
0. Semantics
1. Syntax
2. Lexical syntax
3. Lexical syntax of comments

Basically the same thing will happen with code review. People will spend endless time arguing about style checking, layout, etc.

This stuff matters a bit, but it doesn’t matter a lot, and the back and forth of code review is relatively expensive.

Fortunately computers are good at handling it. Just use an auto-formatter plus a style checker. Enforce that these are applied (style checking is technically a subset of static analysis but it’s a really boring subset and there’s not that much overlap in tools).

In Python land I currently use pyformat and isort for auto-formatting and flake8 for style checking. I would like to use something stronger for formatting – pyformat is quite light touch in terms of how much it formats your code. clang-format is extremely good and is just about the only thing I miss about writing C++. I look forward to yapf being as good, but don’t currently find it to be there yet (I need to rerun a variant on my bug finding mission I did for it last year at some point). gofmt is nearly the only thing about Go I am genuinely envious of.

Ideally you would have your entire project be a fixed point of the code formatter. That’s what I do for Hypothesis. If you haven’t historically done that it can be a pain though. Many formatting tools can be applied based on only the edited subset of the code. If you’re lucky enough to have one of those, make that part of your build process and have it automatically enforced.

Once you have this, you can now institute a rule that there should be no formatting discussion in code review because that’s the computer’s job.

Here’s a great post from GDS about this technique and how it’s helped them.

Estimated cost: Mostly tool dependent, but if you’re lucky it’s basically free. Also some social cost – some people really dislike using style checkers (and to a lesser degree auto-formatters) for reasons that don’t make much sense to me. I personally think the solution is for them to get over it, but it may not be worth the effort of fighting over it.

Estimated benefit: From the increased consistency of your code, small but noticeable. The effect on code review is moderate to large, both in terms of time taken and quality of review.

Controversy level: Surprisingly high. Some people really hate this advice. Even more people hate this advice if you’re not running a formatter that guarantees style conforming code (e.g. I’m not on Hypothesis because none of the Python code formatters can yet). I’ve only really seen this applied successfully at work once.

Documentation in the Repository

You should have a docs section in your repository with prose written about your code. It doesn’t go in a wiki. Wikis are the RCS of documentation. We’ve already established you should be using good version control and a monorepo, so why would you put your documentation in RCS?

Ideally your docs should use something like sphinx so that they compile to a (possibly internally hosted) site you can just access.

It’s hard to keep documentation up to date, I know, but it’s really worth it. At a bare minimum I think your documentation should include:

Up to date instructions for how to get started developing with your code
Detailed answers to questions you find yourselves answering a lot
Detailed post-mortems of major incidents with your product
For most projects they should also include a change log which is updated as part of each pull request/change list/whatever.

It may also be worth using the documentation as a form of “internal blogging” where people write essays about things they’ve discovered about the problem domain, the tools you’re using or the local style of work.

Estimated cost: Low initial setup. Writing documentation does take a fair bit of time though, so it’s not cheap.

Estimated benefit: This has a huge robustness benefit, especially every time your team changes structure or someone needs to work on a new area of the code base. How much benefit you’ll derive varies depending on that, but it’s never none – if nothing else, everybody forgets things they don’t do often, but also the process of writing the documentation can hugely help the author’s understanding.

Controversy level: Another case of “most people probably agree this is a good idea but don’t do it”. Unless you’ve got someone pushing for it a lot, documentation tends to be allowed to slide. I’ve never really seen this work at any of the company’s I’ve worked for.

Plan to always have more capacity than work

Nick Stenning made an excellent point on this recently: If your team is always working at full capacity then delays in responding to changes will sky rocket, even if they’re coming in at a rate you can handle.

As well as that, it tends to mean that maintenance tasks that can greatly improve your productivity will never get done – almost every project has a back log of things that are really annoying the developers that they’d like to fix at some point and never get around to. Downtime is an opportunity to work on that.

This doesn’t require some sort of formal 20% time arrangement, it just requires not trying to fit a quart into a pint pot. In particular, if you find you’ve scheduled more work than got done, that’s not a sign that you slightly over estimated the amount you could get done that’s a sign that you scheduled significantly too much work.

Estimated Cost: Quite expensive. Even if you don’t formally have 20% time, you’re probably still going to want to spend about 20% of your engineering capacity this way. It may also require significant experimentation to get your planning process good enough to stop overestimating your capabilities.

Estimated Benefit: You will be better able to respond to changes quickly and your team will almost certainly get more done than they were previously getting done in their 100% time.

Controversy level: Fairly high. Almost everywhere I’ve worked the team has consistently planned more work than they have capacity for.

Projects should be structured as collections of libraries

Modularity is somewhat overrated, but it’s not very overrated, and the best way of getting it is to structure things as libraries. The best way to organise your project is not as a big pot of code, but as a large number of small libraries with explicit dependencies between them.

This works really well, is easy to do, and helps keep things clean and easy to understand while providing push back against it all collapsing into a tangled mess.

There are systems like bazel that are specifically designed around structuring your project this way. I don’t have very fond memories of its origin system, and I’ve not used the open source version yet, but it is a good way of enforcing a good build structure. Otherwise the best way to do this is probably just to create subdirectories and use your language’s standard packing tools (which probably include a development mode for local development. e.g. pip install -e if you’re using Python).

Some people may be tempted to do this as microservices instead, which is a great way to get all the benefits of libraries alongside all the benefits of having an unreliable network and a complicated and fragile deployment system.  There are some good reasons to use microservices in some situations, but using them purely as a way to achieve modularity is just a bad idea.

Estimated cost: Quite low. Just start small – factor out bits of code and start new code in its own library. Evolve it over time.

Estimated benefit: Small to moderate productivity enhancement. Not likely to have a massive impact on quality, but it does make testing easier so it should have some.

Controversy level: Fairly low. I’m not sure people have an opinion on this one way or the other.

Ubiquitous working from home

I’m actually not a huge fan of massively distributed teams, mostly because of time zones. It tends to make late or early meetings a regular feature of peoples’ lives. I could pretend to be altruistic and claim that I disapprove of that because it’s bad for people with kids, which it is, but I also just really hate having to do those myself.

But the ability to work from home is absolutely essential to a productive work environment, for a number of reasons:

Open plan offices are terrible. They are noisy distraction zones that make it impossible to get productive work done. Unfortunately, this battle is lost. For whatever reason the consensus is that it’s more cost effective to cram developers in at 50% efficiency than it is to pay for office space. This may even be true. But working from home generally solves this by giving people a better work environment that the company doesn’t have to pay for.
Requiring physical presence is a great way for your work force to be constantly sick! People can and should take sick days, but if people cannot work from home then they will inevitably come in when they feel well enough to work but are nevertheless contagious. This will result in other people becoming ill, which will either result in them coming and spreading more disease or staying home and getting nothing done. Being able to work from home significantly reduces the incentive to come in while sick.
Not having physical access to people will tend to improve your communication patterns to be lower interrupt and more documentation driven, which makes them work better for everyone both in the office and not.
I do not know what the ideal fraction of work from home to work in the office is, but I’d bet money that if most people are not spending at least two days per week working from home then they would benefit from spending more. Also, things will tend to work better as the fraction increases: If you only have a few people working from home at any given point, the office culture will tend to exclude them. As you shift to it being more normal, work patterns will adapt to accommodate them better.

Estimated cost: There may be some technical cost to set this up – e.g. you might need to start running a VPN – but otherwise fairly low. However there may be quite a lot of political and social push back on this one, so you’re going to need a fair bit of buy in to get it done.

Estimated benefit: Depends on team size and current environment, but potentially very large productivity increase.

Controversy level: Fairly low amongst developers, fairly high amongst the non-developers who you’ll probably need to get sign off on it.

No Long Working Hours

Working longer work weeks does not make for more productive employees, it just results in burning out, less effective work and spending more time in the office failing to get anything done. Don’t have work environments that encourage it.

In fact, it’s better if you don’t have work environments that allow it, because it will tend to result in environments where it goes from optional to implicitly mandatory due to who gets rewarded. It’s that reading managers’ minds thing again.

Estimated cost: Same as working from home: Low, but may require difficult to obtain buy in. Will probably also result in a transitional period of lower productivity while people are still burned out but less able to paper over it.

Estimated benefit: High productivity benefits, high quality benefits. Exhausted people do worse work.

Controversy level: High. Depending on who you’re talking to this is either obviously the correct thing to do or basically communism (there may also be some people who think it’s basically communism and that’s why they like it).

Good Work Culture

Or the “don’t work with jerks” rule.

People need to be able to ask questions without being afraid. People need to be able to give and receive feedback without being condescending or worrying that the other side will blow up at them or belittle them. People need to be able to take risks and be seen to fail without being afraid of how much it will cost them.

There are two major components to this:

Everyone needs to be on board with it and work towards it. You don’t need everyone to be exquisitely polite with everyone else at all times – a certain amount of directness is usually quite beneficial – but you do need to be helpful, constructive and not make things personal.
Some people are jerks and you should fire them if they don’t fix their ways.
It is really hard to do the second one, and most people don’t manage, but it’s also really important. Try to help them fix their ways first, but be prepared to let them go if you can’t, because if you’ve got a high performing jerk on the team it might be that they’re only or in large part high performing because they’re making everyone else perform worse. Even if they really are that good, they’re probably not good enough to justify the reduced productivity from everyone else.

Note: This includes not just developers but also everyone else in the company.

Estimated cost: High. Changing culture is hard. Firing people is hard, especially if they’re people who as individual performers might look like your best employees.

Estimated benefit: Depending on how bad things are currently, potentially extremely high. It will bring everyone’s productivity up and it will improve employee retention.

Controversy level: Another “Not controversial but people don’t actually do it”. I’ve mostly seen the end result of jerks leaving under their own volition and everyone breathing a sigh of relief and experiencing a productivity boost.

Good Skill Set Mixing

You generally want to avoid both silos and low bus factors.

In order to do that, it’s important to have both overlapping and complementary skills on your team: A good rule of thumb is that any task should have at least two people who can do it, and any two people should have a number of significant tasks where one would obviously be better suited to work on it than another. The former is much more important than the latter, but both are important.

Having overlapping skills is important because it increases your resilience and capacity significantly: If someone is out sick or on holiday you may be at reduced capacity but there’s nothing you can’t do. It also means there is always a second perspective you can get on any problem you’re stuck with.

Having complementary skills is important because that’s how you expand capabilities: Two people with overlapping skills are much better able to work together than two people with nothing in common, but two people with identical skills will not be much better working together than either of them individually. On the other hand two people working together who have different skill sets can cover the full range of either of their skills.

This is a hard one to achieve, but it will tend to develop over time if you’re documenting things well and doing code review. It’s also important to bear in mind while hiring.

Estimated cost: Hard to say because what you need to do to achieve it is so variable, but it will probably require you to hire more people than you otherwise would to get the redundant skill sets you need, so it’s not cheap.

Estimated benefit: Huge improvement in both total team and individual productivity.

Controversy level: Not exactly controversial, but tends not to happen in smaller companies due to people not seeing the benefit. Where it happens it tends to happen by accident.

Hire me to come take a look at what might be wrong

I do do software consulting after all. This isn’t what I normally consult on (I’m pretty focused on Hypothesis), but if you’d like the help I’d be happy to branch out, and after accidentally writing 5000 words on the subject I guess I clearly have a few things to say on the subject.

Drop me an email if you’re interested.

Estimated cost: My rates are very reasonable.

Estimated benefit: You’re probably better placed to answer this one than I am, but if this document sounds reasonable to you but you’re struggling to get it implemented or want some other things to try, probably quite high.

Controversy level: Not at all controversial. Everyone thinks this is a great idea and you should do it. Honest.



Yours
---
Paul Brian
paul@mikadosoftware.com
07540456115
@lifeisstillgood----------------------------------------
----------------------------------------
book: service ids and devops

service ids and inter service with

data service ids and compute / model service ids (ie one dba-service)

Yours
---
Paul Brian
paul@mikadosoftware.com
07540456115
@lifeisstillgood
----------------------------------------
----------------------------------------
book overview

- software literacy 
-- .org design and size
-- 

-- what is big data ?
https://andreaskretz.com/2016/08/08/how-everybody-can-harvest-the-power-of-data-mining/

The other side of data mining 
- you can do an awful lot with awk etc (see the 24TB post)



Yours
---
Paul Brian
paul@mikadosoftware.com
07540456115
@lifeisstillgood----------------------------------------
----------------------------------------
book: data The Brutally Honest Truth About Learning Big Data the Right Way | ANDREAS KRETZ


https://andreaskretz.com/2016/06/15/the-brutally-honest-truth-about-learning-big-data-the-right-way/


Yours
---
Paul Brian
paul@mikadosoftware.com
07540456115
@lifeisstillgood----------------------------------------
----------------------------------------
book: software don't actually want to block ads. If you want to put a small text or image blu... | Hacker News


https://news.ycombinator.com/item?id=20542705


Yours
---
Paul Brian
paul@mikadosoftware.com
07540456115
@lifeisstillgood
----------------------------------------
----------------------------------------
book software product My pet theory is that every software product has a "peak version". Before that p... | Hacker News

also applies to democracy - 
https://news.ycombinator.com/item?id=20534135


Yours
---
Paul Brian
paul@mikadosoftware.com
07540456115
@lifeisstillgood
----------------------------------------
----------------------------------------
book software product My pet theory is that every software product has a "peak version". Before that p... | Hacker News


https://news.ycombinator.com/item?id=20534135


Yours
---
Paul Brian
paul@mikadosoftware.com
07540456115
@lifeisstillgood
----------------------------------------
----------------------------------------
book organisation

For most people, salary correlates with measurable influence, and there’s nothing more measurable than head count. So maybe you’re right about certain orgs, but I wouldn’t advise any young turks to bet on it.
Basically, every nerd thinks they’re gonna be Jeff Dean...but there’s only one Jeff Dean, and his job is taken.

https://news.ycombinator.com/item?id=20531694


- security 
- organisation 
- coase 
- hegemony and three types employee
- 

Yours
---
Paul Brian
paul@mikadosoftware.com
07540456115
@lifeisstillgood----------------------------------------
----------------------------------------
Re: book security

see this reading list

https://news.ycombinator.com/user?id=B-Con

SRE with a love for Linux, cryptography, and tinkering.
More about me: http://bradconte.com/about

My reading list of HN crypto/security personas (WIP): * tptacek * sdevlin * NateLawson * sweis * cryptbe * moxie * pbsd * cperciva * daeken * tytso * andrewbinstock (editor of drdobbs) * FiloSottile







Yours
---
Paul Brian
paul@mikadosoftware.com
07540456115
@lifeisstillgood

> On 24 Jul 2019, at 23:31, Paul Brian <paul@mikadosoftware.com> wrote:
> 
> 
> https://theupdateframework.github.io/
> 
> 
> Yours
> ---
> Paul Brian
> paul@mikadosoftware.com
> 07540456115
> @lifeisstillgood
----------------------------------------
----------------------------------------
book security Macaroons 101: Contextual Confinement


http://evancordell.com/2015/09/27/macaroons-101-contextual-confinement.html

Macaroons 101: Contextual Confinement
Elegent authorization, for a more civilized age

Evan Cordell Posts About
September 27, 2015

Macaroons, like Fezzes, are cool. If you find yourself disagreeing, it’s possible you’re thinking of the wrong sort of macaroons



, or you’ve yet to be convinced.11 or you have legitimate concerns This is the first in a series of posts in which I intend to explain why macaroons are so interesting. We’ll start by motivating them and defining them, and later expand on the theory behind them and study examples of how they’re applicable in the real world.

The name “macaroon” comes from the Google research paper that introduced them, a play on the ubiquitous browser “cookie.” (Naturally, by naming them macaroons, Google has made them nigh on ungooglable.)

What is a macaroon? Much like a signed cookie, a macaroon is a form of bearer credential that can be handed to a client and verified by a server at a later time. Unlike simple bearer tokens, macaroons embed “caveats” that confine the context in which they can be used. This allows decentralized access control that can be difficult with other methods, and in particular is simple, efficient, and flexible.

Before delving into the technical details of macaroons, lets look at some interesting22 contrived authorization problems (and some non-macaroon solutions).

Protecting Frank



Alice shares a home with a pretty adorable dachshund named Frank of whom she takes pretty adorable pictures. She likes to upload these to her Pics of Frank blog, but lately people have been hotlinking her images directly, which costs her a lot of bandwidth. She’d prefer that any view of her images count as a page view of her entire blog - she has a couple of unobtrusive ads there and she’d like to use the extra cash to buy toys for Frank.

Low Hanging Fruit: Checking the Referer

Any request to the server should include a Referer header indicating from where the request originated. Alice can add some checks to all image requests to see if the referer is her own blog, and reject (or redirect) requests that don’t match.

This works pretty well to prevent people who are innocently hotlinking her photos - but from monitoring her traffic she can see that there are some people who are intentionally stealing bandwidth by spoofing the Referer header!

Unique Image Keys

Alice decides to take her attackers head on. She makes all of her image files private - only accessible from within her server. Before every page load, her blog now does the following:

finds all photos on the page about to be rendered
generates a unique, random id for each of them
stores those ids in a key-value store along with the image they reference Alice uses Redis
replaces references to the image files with urls that include the new random keys
When a page on her blog renders, her server dereferences the unique urls into the corresponding image paths, and sends the image data. Her key-value store deletes the keys after 5 seconds, so that subsequent requests using them fail.

This strategy was a lot of work to implement, but it works well! Anyone who wishes to link to her photos directly must first render her blog in order to get access to them.

Unfortunately, she finds that the money she’s spending running her key-value store is greater than the additional money she’s making from increased page views. There will be no new toys for Frank.

Sharing Frank



Alice puts that problem aside for now. Her friend Bob is a dachshund fan and a photoshop wizard, and she’d like to share her pictures with him so that he can touch them up for her.

She needs to give him write access to her dachshund photos, but doesn’t want to give him full access to her server (she trusts him, but he’d probably just screw something up).

Given that she already has a system in place for assigning unique ids to her images, she figures she can do the same to allow write access. She could generate non-expiring random ids that allow write access, and only give them to Bob (over a secure channel). But Bob, though a talented photo manipulator, is not very careful with security - she wouldn’t be surprised if he shared the write-able link with someone, not realizing there was a difference between the read and write links.

After some thought, she comes up with the following solution:

When Bob wants to work on one of the photos, he must first visit a special login page she made for him. /bobs-login/
The login page requires him to authenticate with Google OAuth as bob@example.com (she knows he has an account there already).
If he can do so successfully, the blog site creates a new record in the key value store: like before, the key is a unique, random id, but this time the value is Bob’s ip address when he authenticated. This entry is set to expire in 30 minutes, and for good measure the id is also stored in a cookie on his browser.
When Bob is ready to upload an image, he visits a special upload page /bob-upload/. It can only be viewed if the request includes a cookie with the random id and originates from the corresponding stored ip address.
When loading, the page generates a unique id for each image, and appends Bob’s unique key to each. These ids are only valid for 30 seconds.
Bob picks one of the images to overwrite, and issues a PUT request to the generated url.
If done within 30 seconds, the image is written.
This solution works pretty well for Alice. It effectively limits write-access to her photos to someone who can authenticate as Bob with Google, and places some limits to prevent him from sharing write access with anyone else. But she’s not happy about a couple of things:

she has to host a login page just for Bob
she’s storing a lot of state in the server
Alice would like to redo this whole system without all of this rigmarole.

Going Stateless

There’s a common pattern of keeping some server state in an authenticated browser cookie3
3 In its simplest form, an authenticated cookie is just a blob of data with a signature attached. The unforgeable signature is created on the server, and can be verified later by the server. This is commonly done with an HMAC.
- Alice realizes that the same pattern would remove her need for a key value store. She generates a nice, random secret for her server, which she’ll use to sign her new, stateless tokens.

For a reader of her blog, this is how it works:

When the page is requested, like before, the server replaces references to her photos with tokens. This time, though, the tokens aren’t random, they are signed tokens that contain a reference to the file and a time that the tokens are no longer valid:
token = (
    "file.jpg,2015-09-16 21:13:23;" +
    HMAC(secret_key, "file.jpg,2015-09-16 21:13:23")
)
When the browser requests the photos, the server decodes the reference, verifies that it hasn’t been tampered with by recalculating the signature, and only then streams the photo data to the client.
Bob, who would additionally need write access, still needs to authenticate with Google. But let’s assume that Google provides Bob with a token that, when given to Alice’s website, can be verified as his and from Google. Any write request that includes both the “read” token from above, and includes Bob’s proof of authentication with Google, will be allowed. We’ll assume the token from Google has additional restrictions to be safe (only valid for a certain period of time, etc).

At this point, Alice has essentially created an ad-hoc, inextensible, standard-less form of macaroons. Macaroons improve on this authenticated-cookie strategy by:

Defining a standard interface for specifying and verifying caveats (examples: proof of authentication as Bob at Google, time restrictions)
Unifying the interface between local assertions and remote assertions (i.e. freshness can be verified in the same way as external authentication)
Permitting extensibility and delegation - Macaroons are like “layered” authentication cookies, where additional restrictions can be trivially added by anyone, or even passed to a different client.
Introducing Macaroons



One of the problems with plain bearer tokens is that they authorize unconditionally. In the scenario above, Alice can’t simply generate tokens to allow writing to her photos without worrying about who can get their hands on them (and then needs to go to great lengths to ensure they’re not used by anyone but Bob).

Macaroons solve this by introducing caveats. Caveats confine the context in which a macaroon is valid. A macaroon with appropriate caveats could confine a token to a user authorized as Bob with Google, restrict it to write access, and limit the time in which it can be used.

A macaroon consists of:

an identifier used to differentiate between macaroons
a location that identifies the service from which the macaroon originated
a series of caveats which confine the context for which the macaroon is valid
first party caveats make assertions about the context of the target service 4
4 The term target service will be used to refer to service that will ultimately receive and verify a macaroon from here on.
third party caveats make assertions about the context of some third-party service (e.g. Google)
a signature that can be used to verify the macaroon has not been modified
The identifier and location fields of a macaroon serve to identify the key to use for verification of the signature. The signature itself is a chained-MAC of the previous fields. That is, given a secret key key and identifier id, the signature s1 would be

If a validity-period caveat were added such as time < 2015-08-03T15:42:48, the new signature s2 would be

s2 = HMAC(s1, 'time < 2012-08-03T15:42:48-04:00')
The chaining allows macaroons to be extended (attenuated) with further caveats. There are several practical implications of this property:

A client can pass their authority to someone else, while attenuating it further (delegation)
A macaroon with few or no caveats could be cached, and then attenuated for specific situations
Multiple services could coordinate access by passing macaroons to each other, attenuating as appropriate
After attenuation, the target service can still easily (and quickly) verify the macaroon
First- and Third-party Caveats



Caveats come in two flavors: first- and third-party.

First party caveats make assertions that the target service can verify. Some example restrictions include:

which resources can be accessed
what operations can be performed (read, write, share, etc)
how long a macaroon is valid
a specific user or group of users
a specific ip address or other connection-specific information
a check against a revocation service
These are all things that can be verified easily at the target service. If a macaroon restricts access to photo_of_frank.jpg and is read only, the server can reject any requests that are not for those specific actions.

Third-party caveats make assertions about external systems. In order to verify those assertions, the target service must have some pre-arranged relationship with them.5
5 This relationship could be almost anything: a shared symmetric key, an explicit API for creating ad-hoc keys, or a public/private key pair.
The third-party caveat is actually the combination of the key for another macaroon that comes from the third party (a discharge macaroon6
6 The macaroon provided by a third-party service is called a discharge macaroon because it “discharges” the caveat’s assertion. Presence of a valid discharge macaroon means that the assertions made in the third-party caveat hold.
), along with an identifier that matches the identifier of the discharge macaroon.

The target-service (Alice’s blog) will embed a caveat requiring the third party (Google) to issue a specific macaroon that will prove a user is authenticated. Because discharging the third-party caveat is simply verification of another macaroon, additional caveats can be included by the third-party in the discharge macaroon. These caveats will also need to be verifiable (and verified) by the target service in order for the macaroon to be considered valid.

An example helps to clarify. Suppose Alice’s blog wants to issue a macaroon for writing to photo_of_frank.jpg and needs to add a third-party caveat asserting that Bob can authenticate with Google.



First, Alice needs to get the key that will be used to sign the discharge macaroon. For the sake of example, lets say she makes a request to Google for a key. This key is included in the third-party caveat of the macaroon that will be handed to Bob.
Bob gets this macaroon, sees that it has a third-party caveat for authenticating with Google. He talks to Google’s macaroon auth service and gets a discharge macaroon signed with the same key that Alice was given.
Bob sends both macaroons to Alice when he wants to write to photo_of_frank.jpg. Because the key to the discharge macaroon is embedded in the root macaroon’s third-party caveat (and is encrypted, though I’ve glossed over that so far), Alice can verify both macaroons and only allow the request through if they’re valid.
Additionally, Google could add a time limit to the discharge macaroon, which would further limit the context for which the macaroon pair is valid.
Verification

The verification process for a macaroon is fairly simple:

Collect all first party caveats from the root macaroon and all discharge macaroons.
Verify that the first party caveats hold. If any fail, the request is rejected.
Decrypt the keys for each discharge macaroon and verify their signatures.
Find the key for the root macaroon and verify its signature.
If none of the above verifications have failed, the request is allowed through.
It’s important to note that the macaroon should not be “read” to see what request should occur. If a macaroon authorizes write access to photo_of_frank.jpg, any request that includes that macaroon should not be assumed to be a write request to that photo. A holder of a macaroon should have to explicitly specify what action is being performed. It would be even better if a client had to choose a specific authorization macaroon to present for a particular action, though that isn’t possible when using macaroons as cookies.

Applications

Macaroons are attractive because of their flexibility. Alice’s dachshund blog is just one contrived example; macaroons can also be used for:

Distributing authorization data in a microservices architecture
Sharing structured auth information between external services
An alternative to JWTs for session management
Better management of session revocation and/or network-less session refreshing
Unifying disparate auth systems
Meaningful OAuth2 tokens
I intend to write more in-depth about these applications, but wanted to have some sort of “foundational” post to refer to. Rest assured that anything that is hand-waved above will be clarified in a later post. A careful reader will have noticed a lack of detail on the actual format of tokens, no mention of a standard format for caveats, no discussion of the security properties of macaroons, and nowhere near enough technical detail around third-party caveats and discharge macaroons. It’s also worth mentioning that although there are de-facto standards for macaroons, the definition in the research paper leaves a lot up to implementation.

Further Reading

If you’re interested in learning more, here are some links to current writing and projects related to macaroons:

Check out the google group to see discussion from people actually using macaroons in real systems (and some discussion on standardization)
Macaroons.io lets you play around with a javascript implementation, and keeps a fairly up-to-date list of other implementations
The ReadMe for libmacaroons contains a more technical introduction to macaroons, with some actual code examples
There’s always the original research paper to get into the details
If you’re interested in some of my macaroon-related tests, I have a compatibility suite and a local discharge example up on GitHub
Robert Escriva has written some good articles at Hacking Distributed
HyperDex is a key value store using macaroons for authorization


Yours
---
Paul Brian
paul@mikadosoftware.com
07540456115
@lifeisstillgood----------------------------------------
----------------------------------------
Re: book security Latacora - A Child’s Garden of Inter-Service Authentication Schemes

Using MTLS scheme but see the proxy idea on each container by that vault company - by making every container have a MTLS enabled proxy then 

hashicorp vault

Yours
---
Paul Brian
paul@mikadosoftware.com
07540456115
@lifeisstillgood

> On 24 Jul 2019, at 19:22, Paul Brian <paul@mikadosoftware.com> wrote:
> 
> 
> https://latacora.micro.blog/a-childs-garden/
> 
> 
> Yours
> ---
> Paul Brian
> paul@mikadosoftware.com
> 07540456115
> @lifeisstillgood
----------------------------------------
----------------------------------------
book security sank I don't understand the condemnation of JWTs, this article doesn't seem to explai... | Hacker News


https://news.ycombinator.com/item?id=17299924


Yours
---
Paul Brian
paul@mikadosoftware.com
07540456115
@lifeisstillgood
----------------------------------------
----------------------------------------
book security Child’s Garden of Inter-Service Authentication Schemes | Hacker News

just watch lvh 
https://news.ycombinator.com/item?id=17297838


Yours
---
Paul Brian
paul@mikadosoftware.com
07540456115
@lifeisstillgood
----------------------------------------
----------------------------------------
book security



Yours
---
Paul Brian
paul@mikadosoftware.com
07540456115
@lifeisstillgood----------------------------------------
----------------------------------------
book security Latacora


https://latacora.singles/archive/


Yours
---
Paul Brian
paul@mikadosoftware.com
07540456115
@lifeisstillgood
----------------------------------------
----------------------------------------
book: security Latacora - A Child’s Garden of Inter-Service Authentication Schemes


https://latacora.micro.blog/a-childs-garden/


Yours
---
Paul Brian
paul@mikadosoftware.com
07540456115
@lifeisstillgood
----------------------------------------
----------------------------------------
book: stop don't hire that project manager - automation project management and agile reporting



Yours
---
Paul Brian
paul@mikadosoftware.com
07540456115
@lifeisstillgood
----------------------------------------
----------------------------------------
book: youtube problems are problems of too big to fail companies

algorithm - too hard at you tube scale - solution - don't have youtube scale? 

Yours
---
Paul Brian
paul@mikadosoftware.com
07540456115
@lifeisstillgood----------------------------------------
----------------------------------------
book: mozilla observatory for web server



Yours
---
Paul Brian
paul@mikadosoftware.com
07540456115
@lifeisstillgood
----------------------------------------
----------------------------------------
book: devmanual Operating a Large, Distributed System in a Reliable Way: Practices I Learned


https://blog.pragmaticengineer.com/operating-a-high-scale-distributed-system/


Yours
---
Paul Brian
paul@mikadosoftware.com
07540456115
@lifeisstillgood
----------------------------------------
----------------------------------------
book: software should stop like books stop

something about feature creep 

Yours
---
Paul Brian
paul@mikadosoftware.com
07540456115
@lifeisstillgood
----------------------------------------
----------------------------------------
Re: book: coase and manager

history of platform - include yegge 
include platform vs marketplace (???)

Yours
---
Paul Brian
paul@mikadosoftware.com
07540456115
@lifeisstillgood

> On 17 Jul 2019, at 08:46, Paul Brian <paul@mikadosoftware.com> wrote:
> 
> History of markets and platforms
> 
> - see munger on exon talk 2018 
> original souk solves
> triangulation
> transfer
> trust
> 
> sears catalogue history
> why was sears not amazon?
> (see disruption by chris c)
> 
> why is trust hard (reputation is part of it - but see that kids solution to compete / cooperate) - reputation is not the same as cost benefit analysis
> 
> identity / history / cost benefit
> 
> transfer - transport (infrastructure good - implying again government - eventually everything globally useful becomes a government service / utility)
> 
> (ie why most right wing economists are idiots - the desired feature of "innovation" is something to do with startup and lack of regulation and what is possible and having small loyal following and  it having to deal with difficult long tail cases - none of which has to do with being gov owned or regulated)  yes gov does bad jobs but no worse than most large private corps (see coase and transaction costs) 
> 
> the biggest problem is backward compatibility and solvfong for the 2%
> 
> 
> Yours
> ---
> Paul Brian
> paul@mikadosoftware.com
> 07540456115
> @lifeisstillgood
> 
>> On 15 Jul 2019, at 08:59, Paul Brian <paul@mikadosoftware.com> wrote:
>> 
>> so developer hegemony - teams of equals (literate) - leading to hiring a manager (whipping) to perform the roles of identifying and punishing shirkers - similar to barrister and inns of court 
>> 
>> back to "like lawyers"
>> 
>> the new form of firm is smaller egalitarian and data driven ? (wtf) 
>> 
>> Yours
>> ---
>> Paul Brian
>> paul@mikadosoftware.com
>> 07540456115
>> @lifeisstillgood
>> 
>>> On 15 Jul 2019, at 08:53, Paul Brian <paul@mikadosoftware.com> wrote:
>>> 
>>> eygptian slaves / whipping
>>> 
>>> - is reputation score an equivalent 
>>> it needs a form of pain separate to the financial reward (social shaming kind of works - as does pain pain) 
>>> 
>>> what else??? 
>>> 
>>> want something that hurts but does not remove ability to earn 
>>> 
>>> Yours
>>> ---
>>> Paul Brian
>>> paul@mikadosoftware.com
>>> 07540456115
>>> @lifeisstillgood
>>> 
>>>> On 15 Jul 2019, at 08:49, Paul Brian <paul@mikadosoftware.com> wrote:
>>>> 
>>>> can we replace manager with reputation scores??? seems unlikely given amount of cheating?? 
>>>> 
>>>> Yours
>>>> ---
>>>> Paul Brian
>>>> paul@mikadosoftware.com
>>>> 07540456115
>>>> @lifeisstillgood
>>>> 
>>>>> On 15 Jul 2019, at 08:43, Paul Brian <paul@mikadosoftware.com> wrote:
>>>>> 
>>>>> elchin 1970s paper - lifting heavy boxes
>>>>> 
>>>>> the idea is that a manager (monitor) who improves processes between teams, is a valuable part of the irreducibility transaction cost - they can see who is shirking in hard to measure processes 
>>>>> 
>>>>> that a monitor is a vital role (process improvement) - and only inside a form can you get people who specialise and this get better at it (imagine a world of single person companies - the inefficient moving of one pin to the next person for "free" is cheaper than contracting out the next guy - so that leads to firms.
>>>>> 
>>>>> but the incentive in a form is to shirk - so the invention of a monitor (manager) who can spot shirking
>>>>> 
>>>>> 
>>>>> but also can improve where efficiencies to scale can beat those single person can make
>>>>> profitable (ie machinery)
>>>>> 
>>>>> 
>>>>> 
>>>>> but software can measure processes much more granular now
>>>>> 
>>>>> and software is eating the world - cameras that can see and record every pin movement
>>>>> 
>>>>> driving back down towards single person efficient cy
>>>>> 
>>>>> so the issue is role of internal team process creation 
>>>>> 
>>>>> this is "training" - from martial
>>>>> arts we learn clfull contact training 
>>>>> 
>>>>> and commonality of training and trust - highlanders and english 
>>>>> 
>>>>> (strategy and tactics are fractal)
>>>>> 
>>>>> 
>>>>> what makes a team process orders magnitude more effective ? common training and expectation (software checkin)
>>>>> 
>>>>> what pushes outward - financial
>>>>> cushioning 
>>>>> what pushes downward - financial allocation and remuneration (see traders taking full profit of firm) 
>>>>> 
>>>>> Yours
>>>>> ---
>>>>> Paul Brian
>>>>> paul@mikadosoftware.com
>>>>> 07540456115
>>>>> @lifeisstillgood
----------------------------------------
----------------------------------------
new book: the difficult bits of computer science My First Fifteen Compilers | SIGPLAN Blog


https://blog.sigplan.org/2019/07/09/my-first-fifteen-compilers/


Yours
---
Paul Brian
paul@mikadosoftware.com
07540456115
@lifeisstillgood
----------------------------------------
----------------------------------------
new book: scenario planning climate change

- take the ipcc as real
- measure the impact
- add in global growth projections 
- discuss interest rates

the biggest wins are assuming global growth in wealth distribution and not dying 

So taking action to reduce co2 emissions is sensible
taking action to build new energy sources and reduce waste is great for growth 
taking action to increase trade and wealth sharing amongst poor countries is amazingly good 
taking action to stop crazy doctor tor's going to war and killing people is even better 



Yours
---
Paul Brian
paul@mikadosoftware.com
07540456115
@lifeisstillgood----------------------------------------
----------------------------------------
book: coase and money


is price mechanism a means of protesting allocation of resources

you *could* do it in a command economy like russia 
but we should see the efficiency of a democratic price mechanism orientated organisation versus command economy

enterprises as russia?
lack of tournament saves many - but why strong founder is kiss of death ?? stalin 
Yours
---
Paul Brian
paul@mikadosoftware.com
07540456115
@lifeisstillgood----------------------------------------
----------------------------------------
book: break out governance to own chapter



Yours
---
Paul Brian
paul@mikadosoftware.com
07540456115
@lifeisstillgood
----------------------------------------
----------------------------------------
book: second book

- software governance-" reporting up"

Yours
---
Paul Brian
paul@mikadosoftware.com
07540456115
@lifeisstillgood
----------------------------------------
----------------------------------------
book: the next software literacy


- it's moop - optimising humans 

Yours
---
Paul Brian
paul@mikadosoftware.com
07540456115
@lifeisstillgood
----------------------------------------
----------------------------------------
book: democratic disruption

disruption is not old companies decide to do new things but new companies do new things

but what about democracies - they can and do disrupt themselves and then decide to do new things

so does this imply that create ice description and clay christian sen aleppo's be different in democractiv companies 

Yours
---
Paul Brian
paul@mikadosoftware.com
07540456115
@lifeisstillgood----------------------------------------
----------------------------------------
book marketing monthly newsletter Fwd: Webpack, Web Components and VS Code



Yours
---
Paul Brian
paul@mikadosoftware.com
07540456115
@lifeisstillgood

Begin forwarded message:

> From: Robin Wieruch - A Developer's Digest <rwieruch@getrevue.co>
> Date: 4 July 2019 at 17:33:52 BST
> To: paul@mikadosoftware.com
> Subject: Webpack, Web Components and VS Code
> Reply-To: rwieruch@fastmail.com
> 
> 
> Webpack, Web Components and VS Code
> By Robin Wieruch - A Developer's Digest • Issue #23 • View online
> Hey everyone, it’s Robin. I hope you have a great time reading The Road to learn React and my other books about Redux, GraphQL, and Firebase.
> This month’s Newsletter is less about React but more about the ecosystem around it. If you have a good understanding of React, these tutorials may be super useful for you to improve your skills. If not, save them for later :-)
> Custom Webpack Setup (with React)
> I am super happy to present to you a tutorial series to set up a custom JavaScript application with Webpack. If you want to go beyond create-react-app at some point, you might enjoy this series.
> It starts with setting up a JavaScript project and bundling it with basic Webpack. Afterward, you will learn how to add Babel to use JavaScript features that are not known by your browsers yet. From there you can move on multiple ways:
> Integrate React in your custom Webpack Setup
> Add ESLint for your Code Style
> Advance your Webpack Setup (in-depth tutorial)
> 
> A gentle introduction to Web Components
> The client I am working for asked me about Web Components and how to use them in companies with more than one team to build a foundation of UI components. Since I have never used Web Components before, I took one week off to learn more about them. As a result, I wrote a long read introduction to Web Components.
> Since my client asked me about using them as foundation for a UI library, I also documented how to use Web Components in React with a Web Components React Hook. It could go the same way for other frameworks such as Angular or Vue. This way, Web Components would always look and behave the same – acting as your foundational UI library – and still can be utilized in different frameworks for different teams in your company.
> Prettier and ESLint in VS Code
> These two tutorials should boost your developer experience. While Prettier gives you auto formatting for your source code, ESLint notifies you about code style violations. Both tools give you more time to focus on your actual code.
> How to integrate and use Prettier
> How to combine Prettier with ESLint
> That’s it from my side this month. I hope you enjoy the tutorials which I wrote to take you beyond React. Even though you are not using Webpack or Web Components, take the chance to make yourself familiar with them :-)
> Best wishes, Robin
> Monthly Recommendation
> The last month I didn’t have much time to read though, but watched an intensive yet educational mini series that I want to recommend to you: Chernobyl. I couldn’t watch more than one episode a day because of its dramatic staging, but you should definitely check it out.
> Did you enjoy this issue?
> 
> 
>  
> By Robin Wieruch - A Developer's Digest
> Are you interested in becoming a software engineer? My newsletter teaches ten thousands of developers about JavaScript by delivering free tutorials and eBooks straight to their inbox.
> 
> I am happy about all the success stories that reach me everyday from people who were able to become professional web developer after completing my complete courses and learning material. The newsletter now provides them with latest industry trends, interesting reads and new learnings. After all, you live and learn.
> 
> This newsletter delivers comprehensive tutorials, books, and courses straight to your inbox. Quality content only and no spam. Give it a chance and become the best developer you can be.
> 
>   Tweet       Share
> If you don't want these updates anymore, please unsubscribe here
> If you were forwarded this newsletter and you like it, you can subscribe here
> Powered by Revue
----------------------------------------
----------------------------------------
book: Choose Boring Technology

tech choices have global (.org) impacts - they need governance - so talk to each other ?'b
http://boringtechnology.club/


Yours
---
Paul Brian
paul@mikadosoftware.com
07540456115
@lifeisstillgood----------------------------------------
----------------------------------------
Re: book: social contract

This is partly to do with the three possible AI futures

Terminator
Wall-E
Star Trek

https://youtu.be/48mf2QUtUmg

Efficiency as a goal will rob is inefficient humans of agency

But libertarian Paternalism is a Selectove curated allowance 



Yours
---
Paul Brian
paul@mikadosoftware.com
07540456115
@lifeisstillgood

> On 1 Jul 2019, at 08:44, Paul Brian <paul@mikadosoftware.com> wrote:
> 
> 
> imagine there was a contract you could have signed at 18 and it guaranteed that today at ... 48? you would now be
> 
> thinner
> fitter
> richer 
> be in a happier relationship
> 
> would you have signed on the dotted line? would you time travel back and beg your self to do it?
> 
> yes
> 
> and that contract is libertarian paternalism (Richard thaler)
> 
> It's why we spend so much educating people 
> it's what computers and Moop will do for us 
> 
> it's a big dividing line in politics - those who would sign up and those who think they are free with no obligations to the world 
> 
> Yours
> ---
> Paul Brian
> paul@mikadosoftware.com
> 07540456115
> @lifeisstillgood
----------------------------------------
----------------------------------------
book: citizen journalism and curation means trust

News curation means trust 
Not just trust that the news is not fake - not mere trust that the facts are right but trust in the same way I trust my best friends not to betray me my accountant not to embezzle me, my doctor not to sell me expensive unnecessary treatment

trust

And that is hard 

trusting an individual is really hard

Trusting an organisation is outrageously hard - it needs to be earned every day and cannot be lost

Washington post and the guardian
the pentagon papers led to the watergate 
The snowden leaks led to panama papers - where next?

But this hits political parties too.  We do not trust presidents as much as we trust the parties around them - and they are hard to trust because ... volunteers, shifting personnel, hard to identify who works there

So trust is what makes it possible to rely on information - science is one way of trusting - but I am at least a century behind ...



Yours
---
Paul Brian
paul@mikadosoftware.com
07540456115
@lifeisstillgood----------------------------------------
----------------------------------------
Re: book

Tests:
try to build functional functions - passing in as parameters everything needed

Integration tests are good - system tests are good - but we can presume a lot of other systems will exist - we just need some form of stubbing when we talk to those systems - everything to talk jason over https and then we can record and stub

this gives us a system level approach

doctests are right level for testing in my view - forces us to have functional like paeans

also we presume the existence of / correctness of external systems - is that fair or right???

surely it is incumbent on the developer of the external system (say a gov report provider) to say "here is a stub dev version that will reproduce our profile versions but can be used as needed"

not incumbent on me to mock or stub it out? 



Yours
---
Paul Brian
paul@mikadosoftware.com
07540456115
@lifeisstillgood

> On 29 Jun 2019, at 11:39, Paul Brian <paul@mikadosoftware.com> wrote:
> 
> 
> https://rbcs-us.com/documents/Why-Most-Unit-Testing-is-Waste.pdf
> 
> 
> <Why-Most-Unit-Testing-is-Waste.pdf>
> 
> 
> Yours
> ---
> Paul Brian
> paul@mikadosoftware.com
> 07540456115
> @lifeisstillgood
----------------------------------------
----------------------------------------
book: software professionals

train engineers sign off on railway and say "it's safe and you can put me in jail and end my career if i am wrong"

soon software will need similar

look at office of personal management - the scottish bridge of software on government 

Yours
---
Paul Brian
paul@mikadosoftware.com
07540456115
@lifeisstillgood----------------------------------------
----------------------------------------
book: financial innovation

or not

basically - think of having energy - if you do some useful work with it you can get more energy (chopping wood etc) - but that means the energy was converted from one form to another - if you have money and do no work with it (do not convert it to another form) we would expect you to have no more money

so concerting money to chairs and cloth that can be sold is work and we can expect you to have kore money

but if it just stays as money we would expect it to not grow

so capitalism has some useful work in it - but which forms of financial connotation do not? 

Yours
---
Paul Brian
paul@mikadosoftware.com
07540456115
@lifeisstillgood----------------------------------------
----------------------------------------
book: why every out of the box project google and facebook try is wrong

from LEO satellite to libra - we are solving the wrong problems

poor are not poor because lack satellite access - poor for the boring reasons of lack of physical infrastructure lack of governmental governance, oppression, unfair economic balance etc etc

We should focus on
- stopping war
- stopping oppressive government 
- unfair economic policy (inter country like tribes or prince kings and mass subsidies (oil and coal)

these are the equivalent of hydroelectric dams and libraries in doctoators home town 

solving poverty is simple - just defeat the existing powers of whole globe and make the world a fairer place

Yours
---
Paul Brian
paul@mikadosoftware.com
07540456115
@lifeisstillgood----------------------------------------
----------------------------------------
book: AI theory

we lack thoeoriss for how a neural net works - how it can label an image with cat - in same way we need theories on chaos ?? 

is it descriptive - or does law work on basis that we all have same compiler?

Yours
---
Paul Brian
paul@mikadosoftware.com
07540456115
@lifeisstillgood----------------------------------------
----------------------------------------
book: xkcd: Tasks


https://xkcd.com/1425/
the point of socialism - access to our best infrastructure for free - both GPS and trained AI 


Yours
---
Paul Brian
paul@mikadosoftware.com
07540456115
@lifeisstillgood----------------------------------------
----------------------------------------
book: software governance and coase

so politics is important - then governance is important for mitigating the worst of software governenzvr (see "hierarchy less orgs)

governance should be around core and hub use of libraries and micro services

is micro services the "right" way - no but it is the way with highest degree of flexibility at costs that are manageable (deployment etc is waaay more complex)

so - core services must be used (is no getting away from holiday calnder)

organisational areas (when big enough) can use own core libraries like concentric circles - but should be regular meets from tech leads of those lobs to discuss merging 

Yours
---
Paul Brian
paul@mikadosoftware.com
07540456115
@lifeisstillgood----------------------------------------
----------------------------------------
book: conway's law and politics show how large companies react to tech invasion

see microservices and amazon - a reaction to political fiefdoms - it made small two pizza teams the default size - yes you could aggregate into an "empire" but basically bezos could move people out of your fiefdom with little
impact giving him the ultimate control

this is likely benefit if programmable companies and why it will be a force to come 

and if small piece is replaceable (but more costly) it can be outsourced as the integration cost has largely already been paid

coase equilibrium has been altered 

Yours
---
Paul Brian
paul@mikadosoftware.com
07540456115
@lifeisstillgood----------------------------------------
----------------------------------------
book: behaviour change and moop



Yours
---
Paul Brian
paul@mikadosoftware.com
07540456115
@lifeisstillgood
----------------------------------------
----------------------------------------
book Learning to build distributed systems - Marc's Blog


http://brooker.co.za/blog/2019/04/03/learning.html


Yours
---
Paul Brian
paul@mikadosoftware.com
07540456115
@lifeisstillgood
----------------------------------------
----------------------------------------
Book: why is america so focused on money?

Brexit - the win for eu is that nationalism is defeated because what works for national icons in hungary is laughable in spain and vice versa - so all that can be agreed upon is improving social and financial well being 

this is true is federal america



Yours
---
Paul Brian
paul@mikadosoftware.com
07540456115
@lifeisstillgood----------------------------------------
----------------------------------------
book privacy

It's not secrecy - it's not not being heard - it's being ignored

it's a private 
it's like identity - it's something others don to you

and so it's not a right ... it's more an expectation

imagine listening to nigel garage summer barbecue - it would be offensive but then why am I listening? 

what is publication versus just saying something in a pub or a bar? 

facebook moderation problem 

it's ok to moderate one persons speech to the town square - it's impossible to police everyone's speech 

(well actually repressive regiemes can do that - you set and enforce expectations) 

Yours
---
Paul Brian
paul@mikadosoftware.com
07540456115
@lifeisstillgood----------------------------------------
----------------------------------------
book: meta human is distributed AI - slow AI

meta human - being .organised to help whole survive better - - distributes AI or corporations and organisation 
Yours
---
Paul Brian
paul@mikadosoftware.com
07540456115
@lifeisstillgood----------------------------------------
----------------------------------------
book: brilliant Fwd: Money Stuff: Facebook Will Make the Money Now



Yours
---
Paul Brian
paul@mikadosoftware.com
07540456115
@lifeisstillgood

Begin forwarded message:

> From: Matt Levine <noreply@mail.bloombergview.com>
> Date: 18 June 2019 at 17:15:33 BST
> To: paul@mikadosoftware.com
> Subject: Money Stuff: Facebook Will Make the Money Now
> 
> 
> BloombergOpinion
> Money Stuff
>   Matt Levine
> Libra
> 
> Money is a technology. This is true, first of all, in a grand abstract sense: The human capacity to generate collective fictions is our most powerful and general technology, the thing that distinguishes us from other animals and enables long-term cooperation and complex societies, and money is one of the most important collective fictions.[1] Humans were collectively able to decide that discs of shiny metal or sheets of engraved paper could be used as substitutes for all other goods and services, not because they were equivalents of those goods and services but just because we wanted them to be, and this decision created vast new possibilities for storing wealth and planning for the future and motivating human behavior and all the rest.
> 
> But most of us don’t walk around with a lot of gold coins or even all that much paper money, and the main actual technology of modern money is a bit more prosaic. It is the list. For most people who have money, most of their money consists of an entry in a list at a bank. Each bank has a list of its customers, and next to each customer there’s a number, and that number is the number of dollars that that customer has. It doesn’t, like, correspond to the number of dollars that the customer has; it is not a handy reminder that the bank has a box somewhere with a bunch of gold coins that belong to that customer. There’s no box. The dollars consist solely of the ledger entries at the bank. 
> 
> This, too, is immensely powerful, especially combined with modern digital technology that lets the bank (and the customer) access the list from anywhere. But there is something too powerful, too easy, about it. The advantage of using gold as money is that it is hard to get a lot of gold: Once everyone agrees that gold is valuable, everyone will want gold, but not everyone will have much of it, so it will retain its value. Once everyone agrees that having a number on a list is valuable, I mean, it’s pretty easy to write a number on a list; right here on my computer I have Microsoft Excel, which allows me to write down long lists of large numbers and put dollar signs in front of them.
> 
> So the principal form of modern monetary technology is really legal and regulatory technology. Sure the computer systems that keep the lists of numbers at banks are powerful and complicated, so they don’t mess up the lists, but the thing that keeps the system afloat is mostly a set of rules and norms about who gets to keep lists of numbers of dollars. If your bank says you have some dollars in your checking account, then you do. If I say you have some dollars in my Excel spreadsheet, then you don’t. There is a regulatory privileging of who gets to be a bank, of who gets to be involved in the creation of money. There are central banks that can create money from nothing, and there are regulated banks that can create money under the auspices (and regulation) of the central bank, and there are regulated entities that can transfer and store and otherwise minister to money.[2] Money is just a bunch of computer entries, but it has to be scarce to be valuable, and the computer entries have to reflect a social consensus of who has how much money.[3] And so the structuring and regulation of banking is about making sure that the money is scarce and is allocated in socially approved ways.
> 
> Cryptocurrency proposes a different technological solution to this problem. The traditional solution is: If money is just a bunch of computer entries, then it won’t be valuable unless there is careful government regulation of who can create those entries and how. Bitcoin and subsequent cryptocurrencies said: Actually computer technology itself can be harnessed to limit how many computer entries are created, and to allocate those entries based on a social consensus of who is supposed to have them, all in a totally decentralized way with no government or regulation. 
> 
> That was a big interesting technological innovation. It had to be coupled with a big interesting social innovation, which is just that some critical mass of people needed to look at the computer entries created by the Bitcoin algorithm and say “okay sure these are money.” And that happened, though in an imperfect sort of way: Bitcoin’s value is very volatile, and you can’t really buy much with it, but people do ascribe many billions of dollars of value to Bitcoins.
> 
> And so now, at a very high level, the technology exists to create decentralized money, money that derives its status and value not from the banking-regulatory apparatus of national governments, but from a combination of (1) computer algorithms that limit and allocate the money and (2) reasonably widespread social acceptance that this sort of thing can be money.
> 
> The next thing that Bitcoin enthusiasts will usually say is that this is an essentially democratizing process. You can see why! Central banks are mysterious, and banks are widely mistrusted, and there is a popular and not unreasonable sense that the banking system gives special privileges to favored insiders in unfair and inegalitarian and politicized ways. Cryptocurrency disintermediates banks and governments and traditional favored incumbents, and rests the power to create money in a form of direct social consensus. It is, crypto advocates say, the most powerful democratizing force since the internet.
> 
> But, you know … look at the internet. In a real, true, important sense, the internet is decentralized and libertarian and empowering; the architecture of the internet is not controlled by any government or corporation, and everyone can access and build on it. But in another, also quite real, sense, the internet has been a powerful tool for the centralizing of power. There are a zillion websites but you find them using Google; anyone can publish on the internet but you get your news from Facebook; anyone can sell anything on the internet but mostly you buy stuff from Amazon; email is a free and open protocol but you use Gmail. The democratizing effect of the internet’s openness and decentralization is counteracted by its vast economies of scale and network effects, which tend to concentrate power in a few big winners.
> 
> Basically the point here is that if you replace the traditional social-regulatory technology of money creation with a new sort of computer technology of money creation, odds are that the power of money creation will end up not so much in the hands of free-spirited individual hackers around the world, but in the hands of some giant tech company. 
> 
> In this case, Facebook Inc.:
> 
> Facebook Inc. unveiled plans for a new cryptocurrency that the social-media giant hopes will one day trade on a global scale much like the U.S. dollar.
> 
> Called Libra, the new currency will launch as soon as next year and be what's known as a stablecoin -- a digital currency that's supported by established government-backed currencies and securities. The goal is to avoid massive fluctuations in value so Libra can be used for everyday transactions in a way that more volatile crypotcurrencies, like Bitcoin, haven’t been.
> 
> Libra is the culmination of a year-long effort to devise an easy way for Facebook users to send and receive money through its messaging services. 
> 
> Oh yeah. Here’s the white paper describing Libra, and here are some ancillary papers about its blockchain and its programming language and its cash reserve and its compliance policies. Everything is at a pretty high level of generality—you can’t go out and buy a Libra today—but I suppose we have to talk about some specifics anyway. 
> 
> So, first, Libra will be a “stablecoin,” in the sense that its value will be pinned to conventional financial assets. Unlike most stablecoins, though, it will be pinned to a basket “of low-volatility assets, including bank deposits and government securities” in different currencies, so it won’t consistently be worth one dollar or one euro or anything else. “As the value of Libra will be effectively linked to a basket of fiat currencies, from the point of view of any specific currency, there will be fluctuations in the value of Libra.”
> 
> This strikes me as very annoying, but it has some obvious advantages for Facebook/Libra. For one thing, they’ll only need to manage one general Libra, rather than having different stablecoins corresponding to different national currencies. For another thing, if Libra gains widespread acceptance, its lack of one-to-one correspondence will give it a tendency to displace national currencies. If you mostly spend dollars, and Libra is always going up and down against the dollar, that will be annoying and you won’t want as many Libras. But if you mostly spend Libras—if Facebook is successful at making this the main currency of the internet—then that dynamic will reverse. If the dollar is always going up and down against the Libra, that will be annoying and you’ll want more Libras. The dollar will start to seem unstable and useless. If you buy most things online, and if everything online is priced in Libras, then you’ll end up living your life denominated in Libras, and only converting your Libras into dollars on your occasional touristic visits to the physical world.[4] The goal is for Libra to be more useful than any national currency, accepted in more places and with fewer complications; pegging it to a single national currency would only hold it back.
> 
> Second, Libra will be fully reserved: For every Libra that is issued, one Libra’s worth of dollar/euro/yuan/whatever assets will be in a bank account or government bond somewhere. “The reserve will be held by a geographically distributed network of custodians with investment-grade credit rating to limit counterparty risk.” The initial reserve will come from investments by Facebook and its partners in the Libra Association; later, when Libras are issued for cash, the cash will be added to the reserve.[5] This limits the amount of fun that Facebook and its partners can have: They are not creating money out of thin air based on their own money-issuing clout; they’re just transmuting regular old fiat money into shiny new Libra money. But, you know, the white paper is pretty general and it’s pretty early days for Libra; if it really works—if Libra becomes the dominant currency of the world—then you could imagine this aspect being less important. If you pay for your rent and coffee and internet shopping in Libras, who cares if Libra is backed by dollars?[6] 
> 
> In any case Facebook and friends do get to have some fun with money creation now:
> 
> Users of Libra do not receive a return from the reserve. The reserve will be invested in low-risk assets that will yield interest over time. The revenue from this interest will first go to support the operating expenses of the association — to fund investments in the growth and development of the ecosystem, grants to nonprofit and multilateral organizations, engineering research, etc. Once that is covered, part of the remaining returns will go to pay dividends to early investors in the Libra Investment Token for their initial contributions. Because the assets in the reserve are low risk and low yield, returns for early investors will only materialize if the network is successful and the reserve grows substantially in size.
> 
> Isn’t it a little bit amazing that the banking system both lets you have access to your money to buy stuff at any time and pays you interest on that money? (I mean, not very much now, but in general.) It is a weird nice fact that that norm evolved, but it’s not clear that it would evolve again independently. The Libra tradeoff is: You can use your money, but we’re keeping the interest on it. 
> 
> Third, Libra won’t be controlled by Facebook, exactly; there is an ancillary paper about the Libra Association, a consortium of participants that will provide governance for Libra and also run the blockchain nodes that manage the currency. (Each member also “needs to make an investment of at least $10 million in the network through purchasing Libra Investment Tokens,” to fund the initial reserve so that, effectively, Libra can give away some coins to jumpstart usage.) Facebook is obviously the driving force, and “will spin off a unit, called Calibra, to manage its own digital wallet service, which will be integrated into its family of apps”; presumably the biggest early use case for Libra will be for making payments through Facebook. But there’s a whole list of founding members—payments companies like Mastercard and Visa and Stripe and Paypal, tech companies like Uber and Lyft and Spotify and eBay, plus blockchain companies, venture capitalists and nonprofits—and the possibility of more being added.
> 
> There is also a pretty vague plan for “Moving Toward Permissionless Consensus.” Bitcoin is a permissionless blockchain; transactions on its system are maintained by anyone who wants to maintain them, secured by cryptography and incentivized by “mining” rewards. Libra is a permissioned blockchain; transactions on its system are maintained by servers run by members of the Libra Association, i.e. big tech and payments companies. This makes the Libra people nervous: 
> 
> Permissionless systems have low barriers to entry and innovation, are resistant to censorship attacks, and encourage healthy competition among infrastructure providers (e.g., who can participate in consensus) as well as the developers of applications on top of the network. Since nobody can exclude others from the market or censor their transactions, permissionless systems provide stronger guarantees to participants that no single party will be able to unilaterally change the rules of the network to their advantage at a future date. At their core, permissionless systems make irreversible commitments to operating as open networks where changes can only be implemented if they are democratically supported by a majority of constituents.
> 
> That’s Libra saying that its own architecture is the wrong architecture, and that its “ambition is for the Libra network to become permissionless.” But not yet! “One of the association's directives will be to work with the community to research and implement this transition, which will begin within five years of the public launch of the Libra Blockchain and ecosystem.” Libra knows that you don’t necessarily trust Facebook to run the currency. It’s just asking you to trust Facebook to turn the currency over to a truly decentralized system, sometime, somehow, when it figures out what that system might look like.
> 
> Fourth, there are probably some things to say about regulation? Is this thing a payments processor? A money-market fund? A bank? I dunno, maybe, a little bit.[7] I cannot get too worked up about the regulatory framework applicable to it. For now I would prefer to be swept up by Facebook’s grand vision for it. That vision seems to involve competing with or even displacing national currencies, and if you’re going that far why not displace national regulatory regimes too? If we meet back here in 20 years and Libra has become the currency of the internet, we’re not going to be talking about whether Libra complies with banking regulation, we’re going to be talking about how the Libra Association regulates and stress-tests the Libra banks that it licenses. Libra says now that it is “committed to working with authorities to shape a regulatory environment that encourages technological innovation while maintaining the highest standards of consumer protection.” As Izabella Kaminska points out, that doesn’t sound like Libra sees itself as a passive taker of regulation: It wants to figure out what the right regulation for it should be, and then work with authorities to shape that regulation.  
> 
> KPMG
> 
> We talked last year about some trouble that accounting firm KPMG LLC got into. Basically KPMG hired a former employee of the Public Company Accounting Oversight Board, which oversees auditing firms, and on his way out the door at PCAOB he took some secret oversight materials about PCAOB’s inspection plans for KPMG. KPMG used those materials to game the inspections, prettying up its work papers for the audits that PCAOB intended to inspect and making KPMG look better than it otherwise would. The obvious analogy is to cheating on a test by getting the questions in advance, and both I and the Securities and Exchange Commission made that analogy. The SEC, in its enforcement action against several KPMG employees, called it “shocking misconduct—literally stealing the exam,” etc.
> 
> Now the SEC has brought a separate enforcement action against KPMG, which KPMG settled by agreeing to pay $50 million. Most of this action is about the same stealing-the-PCAOB-exam stuff that we talked about last year. But some of it is for much more literal cheating on much more literal exams:
> 
> KPMG audit professionals – at all levels of seniority – engaged in misconduct in connection with examinations on internally-administered training courses that were intended to test whether they understood a variety of accounting principles and other topics of importance.
> 
> This misconduct took a variety of forms. KPMG audit professionals shared exam answers with one another. A number of audit partners gave exam answers to other partners, and a number also sent answers to and solicited answers from their subordinates. In addition, for a period of time up to November 2015, certain audit professionals made unauthorized changes to KPMG’s server instructions that allowed them to manually select the scores necessary to pass the tests, which they often lowered to the point of passing exams with less than 25 percent of the questions answered correctly. The exams related to a variety of subjects that were relevant to the test-takers’ audit practices, and included additional training required by a 2017 Commission Order after the Commission found that KPMG engaged in improper professional conduct and had caused a client’s reporting violations.
> 
> Oh man. These were internal exams created and administered by KPMG, but they had a regulatory power; the accountants used them to meet continuing professional education requirements to keep their licenses. Having satisfied a certain number of continuing professional education requirements over the course of my various professional careers, I cannot say I am completely surprised that not everyone took them completely seriously, but you do hate to see it in print in an enforcement action. And of course the willingness to cheat on not-especially-important internal exams looks particularly bad when it’s in the enforcement action about stealing secret regulatory materials to cheat on audit inspections. It makes it look like a cultural problem, you know? 
> 
> Also this is amazing:
> 
> Prior to November 2015, KPMG hosted exams to training programs on an internal server with software provided by a third party. KPMG sent participants in training programs a hyperlink that directed them to the applicable exams. Embedded in the hyperlink was an instruction to the server that specified the score necessary to pass the exam. Thus, the characters “MasteryScore=70” meant participants were required to answer at least 70 percent of the answers accurately to pass the exam. By changing the number in the hyperlink, audit professionals could change the score required to pass.
> 
> Ahahahahahahaha what, what, what? Imagine if, like, the SAT worked like that, where they’d email you a link to the test with “?HarvardScore=1520” at the end, and you could just retype the link with “?HarvardScore=800” instead and the test would be scored differently. Really any test set up this way deserves to be cheated, and any accountant who didn’t notice this flaw shouldn’t be trusted to do an audit.
> 
> Buffett monetization
> 
> Here is a story about a woman who lives in Warren Buffett’s old house in Omaha, and who rented the house out to some people attending the Berkshire Hathaway Inc. shareholders’ meeting this year, and who charged them $3,000, and my immediate reaction was: You can get way, way, way more for Warren Buffett’s old house during the Berkshire annual meeting. People pay millions of dollars to have lunch with Buffett; there is a thriving business of monetizing anything Buffett-related. An then of course I saw that she knew all this and is in fact way ahead of me:
> 
> Monen reaped $3,000, and is considering hiking the fee next year to spread the wealth to a charity. She's thinking an auction format might work best.
> 
> "I'm crazy not to capitalize on that," Monen said. "Warren would want me to."
> 
> Yep yep yep this all checks out. Buffett visited the house this year and wrote “the birthplace of Buffett Associates May 1956” on the door to the sunroom, which probably raises the rent by at least $20,000 a night. 
> 
> Things happen
> 
> Deutsche Bank seeks breathing space by slashing trading arm. There Is No Easy Fix for Legg Mason and Other Money Managers. Saudi Crown Prince Says Aramco's Planned IPO Is On Track. Private equity groups prepare to raise mega funds. Blank-Check Boom Hits Snag as SEC Blocks NYSE Plan. The Once-Forbidden U.S. Dollar Is Suddenly Everywhere in Venezuela. “Trees don’t move as fast as Pro Bowl linebackers.” Boaty McBoatface makes major climate change discovery.
> 
> If you'd like to get Money Stuff in handy email form, right in your inbox, please subscribe at this link. Or you can subscribe to Money Stuff and other great Bloomberg newsletters here. Thanks!  
> 
> [1] This paragraph is based on Yuval Noah Harari’s argument in “Sapiens,” which I have cited before to explain cryptocurrency.
> 
> [2] Obviously there are historical examples of “private banking” in which banks were not all that regulated or state-chartered, and in which more or less anyone could set up as a bank and start issuing notes, but (1) that arguably didn’t work as well and (2) they were sort of norm-chartered; there was still social acceptance of who was and wasn’t allowed to keep the ledgers.
> 
> [3] J.W. Mason describes the consensus-allocation algorithm of money like this: “In the classroom, one of the ways I suggest students think about money is as a kind of social scorecard. You did something good — made something somebody wanted, let somebody else use something you own, went to work and did everything the boss told you? Good for you, you get a cookie. Or more precisely, you get a credit, in both senses, in the personal record kept for you at a bank. Now you want something for yourself? OK, but that is going to be subtracted from the running total of how much you’ve done for the rest for us.” 
> 
> [4] I mean, if all goes well for Libra the physical world will mostly take Libra too; credit-card and payment-processor companies are Libra partners, and so presumably the vision involves taking Libra at stores that take credit cards.
> 
> [5] There's a sort of exchange-traded-fund-like mechanism for actually transacting with Libra, where you have to go through an “authorized reseller”: “Users will not directly interface with the reserve. Rather, to support higher efficiency, there will be authorized resellers who will be the only entities authorized by the association to transact large amounts of fiat and Libra in and out of the reserve. These authorized resellers will integrate with exchanges and other institutions that buy and sell cryptocurrencies to users, and will provide these entities with liquidity for users who wish to convert from cash to Libra and back again.”
> 
> [6] The deeper point here is that a fully reserved currency prevents fractional-reserve banking, and fractional-reserve banking is a useful thing. Now, the Libra white paper doesn’t actually prevent fractional-reserve banking; it just does that banking in dollars (or whatever). You deposit some dollars (etc.) with Libra, you get Libras, Libra goes and deposits those dollars in a bank, and the bank then can lend them to others. Libra is just a sort of transitory interface for dollar (etc.)-based banking. But if Libra became the world currency, you’d still want some way to do *banking*, to lend out deposits rather than just keeping them in a virtual vault. It is not worth worrying too much about the mechanics here, since Libra is very very far away from being the world currency, but if I were at the Libra Association and making my plans for world domination, this is the sort of thing I’d be thinking about. 
> 
> [7] Is it a *security*? Surely, I think, not; you don’t buy a Libra in the expectation of profit, and Facebook et al. aren’t issuing it as a corporate financing tool. The initial $10 million investments in the Libra Association do look more like securities—they’re a fundraising, and they carry the right to the interest on the Libra Reserve balances—but those are separate Libra Investment Tokens, which are being issued in an exempt private placement to accredited investors. They are securities, but they comply with the securities law.
> 
> 
> Bloomberg L.P. ● 731 Lexington Avenue, New York, NY 10022
> 
> Web ● Facebook ● Twitter
> 
> Feedback ● Unsubscribe
----------------------------------------
----------------------------------------
book: surveillance society not so new

Corporate surveillance of our lives is not new - look at credit reference aganecies mike equifax - monitoring data that can be and is used by state to track cotozens

it is different in defeee not in quality

but still data pollution is real and we need dat rights 

(but credit reference agencies as "arm of the state"
is real as well - because mortgage credit has become a state backed wealth transfer approach )




Yours
---
Paul Brian
paul@mikadosoftware.com
07540456115
@lifeisstillgood----------------------------------------
----------------------------------------
Re: book : continuous business integration

recommended solution - one ticket system to rule them all - just one. 
must have estimated and actual times to complete (also tie into automated CBI tears) 

Yours
---
Paul Brian
paul@mikadosoftware.com
07540456115
@lifeisstillgood

> On 18 Jun 2019, at 08:10, Paul Brian <paul@mikadosoftware.com> wrote:
> 
> why is agile doing well?
> 
> 1. uses reference class planning so is more likely to produce accurate forecasts (yes!)
> 
> 2. easy to explain and pick up (nuances etc)
> 
> 3. fails to usually be integrated all way up so planning fallacy gains lost against top level planning 
> 
> Yours
> ---
> Paul Brian
> paul@mikadosoftware.com
> 07540456115
> @lifeisstillgood
> 
>> On 18 Jun 2019, at 07:59, Paul Brian <paul@mikadosoftware.com> wrote:
>> 
>> Best way to measure progress of project is to see it against pre planned automatically testing milestones 
>> 
>> and this requires a pre-prod live like environments and it requires milestones to be defined in code 
>> 
>> and we can do same for whole programmable company - but we need to make the business environment also pre-prod and testable - so we geneuninely do recreate whole business every day 
>> 
>> if bob from accounts is to enter X and Y will happen then we need that as a testable screen and as a pre prod environment and to be able to automate bob's entry 
>> 
>> before code is written 
>> 
>> so selenium needs to have pre defined text boxes etc
>> 
>> 
>> Yours
>> ---
>> Paul Brian
>> paul@mikadosoftware.com
>> 07540456115
>> @lifeisstillgood
----------------------------------------
----------------------------------------
book - Not enough entropy to support /dev/random in docker containers running in boot2docker - Stack Overflow


https://stackoverflow.com/questions/26021181/not-enough-entropy-to-support-dev-random-in-docker-containers-running-in-boot2d


Yours
---
Paul Brian
paul@mikadosoftware.com
07540456115
@lifeisstillgood----------------------------------------
----------------------------------------
book: firm sizes and changes

efficiencies forms (from developer hegemony)
His argument is that as software eats the world, then the *means of production* becomes software and so those who write code have significant leverage over means of production 

And he looks at structure of forms (based on article based on the office sitcom) - pragmatist idealist exploiter - and says that as becomes easier to leave to form small efficient forms (that capture more of value chain than just employee status) then firms will get hollowed out

Coase firm structure has different approach about internal and external costs

And I like to view risk pooling firms - means to supply common support for OSS services to gov 

Yours
---
Paul Brian
paul@mikadosoftware.com
07540456115
@lifeisstillgood----------------------------------------
----------------------------------------
book - latex pdf

http://ftp.cc.uoc.gr/mirrors/CTAN/macros/latex/contrib/memoir/memman.pdf#page33



Yours
---
Paul Brian
paul@mikadosoftware.com
07540456115
@lifeisstillgood----------------------------------------
----------------------------------------
book - noestimates then implies "what did i do and why" as much more important  - allows us to review decision making prioritising processplaybook/culture.md at master · vintasoftware/playbook · GitHub




https://github.com/vintasoftware/playbook/blob/master/culture.md


Yours
---
Paul Brian
paul@mikadosoftware.com
07540456115
@lifeisstillgood
----------------------------------------
----------------------------------------
software mind book

People will not run bunsineses only create hen 

argument 

Yours
---
Paul Brian
paul@mikadosoftware.com
07540456115
@lifeisstillgood
----------------------------------------
----------------------------------------
Re: Possible book review

Hey Paul,

Send me a chapter to read.... 

😊

Sent from my iPhone

> On Apr 2, 2019, at 11:03 AM, Paul Brian <paul@mikadosoftware.com> wrote:
> 
> Katy
> 
> thank you and very happy to swap book reviews
> 
> Yours
> ---
> Paul Brian
> paul@mikadosoftware.com
> 07540456115
> @lifeisstillgood
----------------------------------------
----------------------------------------
book

bitcoin - unlikely
more likely is fido as a wallet
But what is store of money - what is digitally native currency

(multiple books )
bitcoins - currency control avoidance like euro bonds 
Yours
---
Paul Brian
paul@mikadosoftware.com
07540456115
@lifeisstillgood
----------------------------------------
----------------------------------------
Fwd: Book Week

No dressing up for world book day - but they share a book with a child in different year ...

emmie was looking forward to the dressing up - maybe we (I include me in this) could arrange a saturday lunch with the dressing up that was missed ? 

Yours
---
Paul Brian
paul@mikadosoftware.com
07540456115
@lifeisstillgood

Begin forwarded message:

> From: "The Discovery School" <SC8862065a@schoolcomms.com>
> Date: 25 February 2019 at 14:29:38 GMT
> To: "Paul Brian" <paul@mikadosoftware.com>,
> Subject: Book Week
> Reply-To: office@discovery.kent.sch.uk
> 
> Dear Parents/Carers,
> Book week- commencing Monday 4th March 2019
> As part of promoting and maintaining a love and interest in reading The Discovery School will be having a book week, commencing Monday 4th March. During this week your child will completing lots of exciting activities focused around a chosen book for their year group.
> World Book Day 7th March 2019
> On Thursday 7th March The Discovery School will be celebrating World Book Day. We will not be dressing up this year however, we are asking the children to bring in their favourite book which they will be sharing with another child in a different year group.
> At the end of World Book Day your child will be given a £1 World Book Day token which they can exchange for one of the twelve exciting World Day books. For more information about the books on offer and where you can spend your token please see the link below.
> https://www.worldbookday.com/books/terms/
> Travelling book fair
> This term’s ‘Travelling Books’ Book Fair will be held from Friday 8th March to Thursday 14th March.  The Book Fair will be located in front of the library in the ‘Cathedral End’ and will be open between 3.15pm and 3.45pm.  It is a fantastic opportunity for you and your children to get your hands on the latest range of top quality reading ready for the new term.  Once again, The Discovery School Year Six Prefects and Librarians will be helping to run the Book Fair and will be more than happy to recommend a good read!
> Travelling Books provides a range of books suitable from Year R to Year 6 from a variety of publishing companies.  Prices start at only £2.99 and every book you buy helps to earn rewards that the school can spend on free books and resources for classroom book corners and the library.
> Children will be learning about the selection of books at the Book Fair in a special assembly on Wednesday 6th March. You can also browse the Book Fair titles on the Travelling Books website https://bookfairs.scholastic.co.uk/travelling-books/parents to get an idea of the vast range of quality texts on offer, as well as information regarding ways to pay and how to buy Book Fair  Gift Vouchers.
> Kind regards, 
> Miss Roe
> Reading Leader
----------------------------------------
----------------------------------------
book: explain developer hegemony

the pig is not committed - the chicken has options and potential negotiating position. the pig has none

Yours
---
Paul Brian
paul@mikadosoftware.com
07540456115
@lifeisstillgood----------------------------------------
----------------------------------------
book: Authentication of forensic DNA samples


https://www.fsigenetics.com/article/S1872-4973(09)00099-4/abstract


Yours
---
Paul Brian
paul@mikadosoftware.com
07540456115
@lifeisstillgood
----------------------------------------
----------------------------------------
Check out this book - "Developer Hegemony: The Future of Labor"

Hi - I think you should check out this book, "Developer Hegemony: The Future of Labor" by Erik Dietrich, Amanda Muledy.

Start reading it for free: http://amzn.eu/j00EX85
--------
Download Kindle for Android, iOS, PC, Mac and more
http://amzn.to/1WLoAkB


Yours
---
Paul Brian
paul@mikadosoftware.com
07540456115
@lifeisstillgood----------------------------------------
----------------------------------------
Check out this book - "Your Code as a Crime Scene: Use Forensic Techniques to Arrest Defects, Bottlenecks, and Bad Design in Your Programs (The Pragmatic Programmers)"

Hi - I think you should check out this book, "Your Code as a Crime Scene: Use Forensic Techniques to Arrest Defects, Bottlenecks, and Bad Design in Your Programs (The Pragmatic Programmers)" by Adam Tornhill.

Start reading it for free: http://amzn.eu/azNlevv
--------
Download Kindle for Android, iOS, PC, Mac and more
http://amzn.to/1WLoAkB


Yours
---
Paul Brian
paul@mikadosoftware.com
07540456115
@lifeisstillgood----------------------------------------
----------------------------------------
Check out this book - "How to Fail at Almost Everything and Still Win Big: Kind of the Story of My Life"

Hi - I think you should check out this book, "How to Fail at Almost Everything and Still Win Big: Kind of the Story of My Life" by Scott Adams.

Start reading it for free: http://amzn.eu/1rXCOzd
--------
Download Kindle for Android, iOS, PC, Mac and more
http://amzn.to/1WLoAkB


Yours
---
Paul Brian
paul@mikadosoftware.com
07540456115
@lifeisstillgood----------------------------------------
----------------------------------------
Book and more

- statisical learning
- version 0.1.0 - intro chapters for both books and skeletons, then publish and do style 

Yours
---
Paul Brian
paul@mikadosoftware.com
07540456115
@lifeisstillgood----------------------------------------
----------------------------------------
Book beta tester

To be arranged !! 
if you don't mind :-) 

Yours
---
Paul Brian
paul@mikadosoftware.com
07540456115
@lifeisstillgood
----------------------------------------
----------------------------------------
add to book

 Building the Gov Work
- take on a small but useful piece of work to Gov Service standards - use it as evidence gathering 


https://www.digitalmarketplace.service.gov.uk/digital-outcomes-and-specialists/opportunities/6145

Yours
---
Paul Brian
paul@mikadosoftware.com
07540456115
@lifeisstillgood----------------------------------------
----------------------------------------
book - org design and coase

because of literacy i want to use model of publishing house or newspaper 

micro arrives simply means smaller teams - but reverse conway's law forces something else in there - 

factory floor approach is impossible - can not define creative take well enough

but you can define contracts and interactions - apis

but then at this point the seams are simple and easy - this is becoming coase right sizing 

teams in amazon are held together by being in amazon and also by the data rights

and so we shall see smaller nimble mice service nebaled companies develop where data rights are stronger and clearly enforced - enabling the break away

and that i presume to be a major win

alternatively there will be break always where no data rights exist - china possibly 

Yours
---
Paul Brian
paul@mikadosoftware.com
07540456115
@lifeisstillgood----------------------------------------
----------------------------------------
book JRS - Critical and Significant Dates - J R Stockton


http://skeena.net/kb/big%20list%20of%20critical%20dates.html

Critical and Significant Dates.
J R Stockton, ≥ 2013-01-28
No-Frame * Framed Index * Frame This
Links within this site :-
Merlyn Home Page - Site Index, E-Mail, Copying
This Page :-
Conditions of Use and Citation
Critical Dates, with 0001, 1999, 2000, 2001, 2012, 2013,    2014, 2038, and Notes (including Holidays) :-
The List of Dates
The Dates Themselves :-
Date Formats
Timing of Events
B.C.
0000
A.D.
Notes
Coda
Failure Modes
Repeated Risks :-
Y2k-Type
Leaps in Date/Time
Summer Time
Year Rollover
Easter
Appointments Scheduling
Specific Systems
Periodic Events :-
Critical Periods
Other Periods
Related Pages :-
Critical Times Calculator (not public)
Year 2000 set
For more date/time pages, and links, see Date and Time Index and Links
Those benefiting from this site are invited to contribute to some local charity.

Conditions of Use and Citation

Please do not fetch this Web page (or others of mine) by automated subscription; that wastes my resources. Because of this abuse, I may sometimes change the name or offer only critdate.zip.

Copying

I do not permit the wording of this list of dates to be copied on the Net or elsewhere, either in whole or on part, except for "fair comment" extracts; but the dates and the facts are naturally public. By breaching my copyright, you implicitly agree to termination of your account.

I do not permit this Web page to be copied, except in these cases :- 
  (i) as described in my Merlyn Home Page page, 
  (ii) temporarily by agreement, for citation in print or equivalent (to reduce load on my own page at Demon), 
  (iii) by normal transparent proxying/cacheing which serves a complete and substantially current version without any modifications overt or concealed, 
  (iv) for personal private reference.

I may agree to limited copying within organisations. All copies must be headed with a proper attribution, must cite it as <URL:http://www.merlyn.demon.co.uk/critdate.htm>, and must give the date made.

Material on this page has neither been copied nor derived from Warren, McVeigh & Griffin, Inc..

Citation

Normal Web links to and citations of this page are welcome (there is no need to ask).

Those intending citation in popular print or broadcast media are requested to consult me first about cacheing or mirroring, and about relative links.

Critical Dates

The major criticalities are, sequentially, the August 1999 GPS rollover, the and all its two-digit rollover consequences, the Leapness of 2000 (including Day 366), and the 32-bit UNIX (and C library) Year 2038 problem; and also the various dates relating to introduction of the Euro currency.

There are or have been other critical date lists at Cinderella "Timeline", at Volker Kolberg's site, in Capers Jones's "Dangerous Dates" page, etc., etc. My more general Year 2000 and Date/Time references are now on other pages. Excerpts on Computer Calendar-Clock Problems by Peter G. Neumann (2000) is instructive. Some errors are described in Software Horror Stories by Nachum Dershowitz, with links.

Much of the following was picked up from the comp Y2k, UK Y2k and Risks (Risks Digest) Usenet newsgroups and from a Y2k FAQ, with the aid of the Calendar FAQ; also doncio and other Web pages such as at Mitre.

See also Wikipedia Time formatting and storage bugs, Notable epoch dates in computing.

See also, at IET, Dates Potentially Causing Problems in Computer Systems from 2001-2100 (discovered in 2011).

When I receive E-mail information correcting or extending the list, I will assume permission to quote.

Links like _ are not intended for general use.

The List of Dates

This is, fundamentally, a list of Critical and Significant Dates, which is not quite the same thing as a list of dates which ought to be used in testing; for example, 2000-02-29 was critical as possibly unexpected, but in testing one should also try 2000-02-28, 2000-02-30, 2000-02-31, 2000-03-00 & 2000-03-01, in order to make sure that the valid dates are consecutive and without overlap (Note 19); likewise for 2000-366. Some of the dates are those resulting from other date failures.

Some are important; some are possibly just amusing - it is up to you to discriminate.

This List is not a prediction of disaster; it is an indication of when error may be prevented by sufficient care.

Software errors may have been fixed in later versions.

The Gregorian calendar, with Historical year numbering, is to be assumed where necessary (some dates are UNCHECKED - you MUST verify - they may be a day or two out). However, many of the critical dates would be the same dates (which currently occur thirteen days later) in a consistently Julian environment. Note that, in computing, conventional day-numbers preceding 1900-03-01 and day-counts spanning 1900-02-28 to 1900-03-01 might be a day out, if a day in between those dates was assumed.

The more Critical Dates may have been chosen as trigger dates by virus writers - 2000-01-01, 2000-02-29, 2001.02.29, etc. - and may emulate date errors.

Some dates of non-computer origin are included. Historical dates are mainly limited to those of significance to UK history and culture.

For near-present Space dates, see Ron Baalke.

Virus trigger dates are NOT included - use a virus checker such as F-Prot (see PC Links Reference) and others.

Abbreviations should be obvious enough to those for whom they are significant.

2006-08-01 - New Warning

In general, I have mainly considered events relating to counting UP to particular numbers. There are also events relating counting DOWN; and those are less well predicted.

See 2006-05-13 and 2008-01-19 below as examples.

The Dates Themselves

Date Formats

To simplify use of my DoW checker :- 
• Julian dates are given as YYYY/MM/DD. 
• Only Gregorian AD dates are ISO 8601 hyphen-separated, unless invalid, when dots are used : otherwise, spaces are used.

Timing of Events

Some of these are local date/times; some are GMT/UTC or similar. I use GMT for legal GMT, with date changing at London mean solar midnight; the term UT might be confused with UTC.

It is very important to remember that the local time corresponding to a given GMT depends on the local Time Zone, and on Daylight saving; also that the time in question will be the time that the system is actually set to, not what it should be set to.

For example, a DOS/Windows PC will with high probability be set to local time internally, but a UNIX computer should be on GMT/UTC internally. DOS software translated from UNIX may default to California time settings.

Leap seconds may affect some dates, e.g. GPS rollover 1999, UNIX 2038.

The form a^b is used for "a to the power b" = ab. The form mEe is used for m×10e.

N.B. Two aspects of the year before AD 0001 are presented below, as BC 0001 and as ±0000 Astronomical.

B.C.

1.37E+10 years - The Big Bang, approximately
4.567E+9 years - Solar System formed
5509/09/01 Sat - Byzantine Empire, Creation and year-count start (Authors vary in detail; Julian?)
4714 11 24 Mon - (Gregorian) Julian Day 0 started at noon GMT, 24th Nov 4714 BC, Proleptic Gregorian Calendar
4713/01/01 Mon - (Julian) Start of First Julian Period
4713/01/01 Mon - (Julian) Julian Day 0 started at noon GMT, 1st Jan 4713 BC, Proleptic Julian Calendar. 
Historians seem to treat it as starting at 0000h local - Chronological Julian Date, CJD
4236 -- -- --- - Alleged start of Egyptian Calendar - first recorded year in history. Note 21.1, 21.2
4004/10/22 Sat - (Julian) The Creation of the World, at six in the evening, according to Archbishop James Ussher of Armagh (1581-1656) - see Note 22
4004/10/23 Sun - (Julian) The First Complete Day
3761/10/07 Mon - (Julian) Anno Mundi 1, the origin of the Jewish Calendar, starting at the previous sunset. Sources may differ in detail : Note 20
3374/11/11 Mon - (Julian) And
3114/09/06 Mon - (Julian) And
3114/09/08 Wed - (Julian) Possible start of current Mayan Great Cycle (Long Count) (see AD 2012-12-23). Note 21.1, 21.2, 21.4
2637 -- -- --- - Legend: Emperor Huangdi invented the Chinese Calendar. Note 21.1, 21.2
1976/11/08 Wed - (Julian) CJD 1E6 (approximately)
0776 -- -- --- - Base of "Olympiad" dating - the first Games
0753 -- -- --- - The Founding of the City - base for Roman a.u.c. dates (March 1st)
0432 -- -- --- - Beginning of the First Metonic Cycle
0046 -- -- --- - (Roman) The "Year of Confusion", 445 days long; Julian Calendar decreed;
0045/01/01 Fri - (Julian) Julian Calendar began; but Leap Years were implemented wrongly (Calendar FAQ, S.2.1.1) before 8 AD (some say 4 AD) 

0001/02/29 --- - (Julian) did not occur; as for AD 0004
0001/03/25 Tue - (Julian) The Day of the Incarnation/Annunciation, according to Dionysius Exiguus. Other Days follow naturally
0001/12/31 Fri - (Julian) B.C. ended with this day, the 365th of the year.
0000

0000 -- -- --- - Year number did not occur, except for Astronomers; like 4 AD, it was not Leap ; defective software may erroneously return some form like 0000-00-00, 0000-01-01, 0001-00-00, 0001-01-00, etc.
0000/01/01 Thu - (Astronomical Proleptic Julian)
0000-01-01 Sat - (Astronomical Proleptic Gregorian)
0000 02 29 --- - (Civil) did not occur; as AD 0004
0000/03/01 Wed - My preferred (Astronomical Proleptic Gregorian) Day Zero for calculation (except when I prefer to use CMJD).
A.D.

0001 -- -- --- - Fourth year of the 194th Olympiad
0001/01/01 Sat - (Julian) Start of A.D.; CMJD -678577
0001 01 01 Sun - (Civil) Start of A.D.; CMJD -678576; DCCLIIII AUC; 3761 A.M
0001-01-01 Mon - (Gregorian) Start of A.D.; CMJD -678575. 
  TTimeStamp Day 0/1 (Win9x). 
  TDateTime Day 1 (Delphi 1.0). 
  R.D. Day 1 
  Paradox Day 1 ?
0004 02 29 --- - (Civil) Not valid. 4 AD was *NOT* Leap (UNIX is wrong); earlier, Roman priests couldn't count correctly, and were still compensating here. Only general AD exception to 4, 4/100/400 year rules (apart from "AD 0", also not Leap)
0033-04-01 Fri - (Good Friday, Gregorian) Lunar Eclipse, Jerusalem
0033/04/03 Fri - (Good Friday, Julian) Lunar Eclipse, Jerusalem
0100-01-01 --- - Earliest date that can be directly input in systems where YY is mapped into YYYY
0100-01-01 Fri - (Gregorian) Earliest date value for Microsoft Jet database engine, VBScript, etc.
0200-03-01 Sat - Julian and Gregorian Calendar agreement starts
0284-08-28 Thu - (Gregorian; 6pm) Anno Diocletian 1 (ADio 248 ~ ADom 532)
0300-02-28 Wed - Julian and Gregorian Calendar agreement ends
0312 -- -- --- - Start of First Indiction, day varies
0325 -- -- --- - May-July, Council of Nicaea, Easter date rule
0622/07/15 Thu - (Julian) Sunset : First Moment of First Day of the Islamic Calendar
0622/07/16 Fri - (Julian) First Day of the Islamic Calendar, MuHarram 1, 1 A.H. Beginning of the year (month?) of the Hejira on the existing calendar. Some Islamic authorities say a day earlier. Note 21.2?
0622-07-19 Fri - Same day, Gregorian ; MJD -451561, CMJD 1948440
0888 08 28 --- - All digits even, last before 2000 02 02; cf. 1999-11-19, 3111-11-11
1000 ?? ?? ??? - Y1k; Vikings discovered America? :-(
1001 01 10 --- - Doubly palindromic as DDMMYYYY
1001 10 01 --- - Doubly palindromic as YYYYMMDD
1111 11 11 --- - Doubly palindromic
1221 12 21 --- - Doubly palindromic as YYYYMMDD
1380 08 31 --- - Last palindromic YYYYMMDD date until 2001
1582/02/24 Sat - (Julian) Gregorian Calendar decreed; for use from October, changes in Leap Year & Easter rules
1582-02-06 Sat - (Gregorian) The same day. Note: the Bull was dated MDLXXXI (1581).
1582 10 05 to 14 - (Civil) These 10 dates were skipped in Rome (at JD 2299160.5?), etc.
1582-10-15 Fri - (Gregorian) Lilian Day 1
1600/01/01 Tue - (Julian) Year began to begin on Jan 1, in  Scotland (rest of Britain, see 1752 link)
1601-01-01 Mon - (Gregorian) ANSI COBOL 85 Day 1. Quattro Pro first day. Base filedate for Windows "Last Modified", etc. (64-bits of 100 ns)? MJD -94187
1605/11/05 Tue - (Julian) Guy Fawkes arrested previous evening
1700/02/29 Thu - A valid date, though only in still-Julian places; e.g. Great Britain and possessions
1710 10 02 to 1710 10 13 - Nova Scotia (Canada) had these civil dates twice
1712 02 30 Fri - Occurred in Sweden (and so, it seems, in Finland)
1751/01/01 to 1751/03/24 - Because of the change in the starting day of the year, these dates (which would have followed 1751-12-31) were never used in the English Civil Calendar
1752/09/02 Wed - Last Julian civil date in Great Britain
1752 09 03 to 13 - (Civil) These 11 dates were skipped in the British Empire
1752-09-14 Thu - First Gregorian civil date in Great Britain 
1753-04-05 Thu - Start of UK FY 1753-54, moved from traditional Lady Day (Mar 25) because of calendar change above (but see Date Miscellany II)
1800-04-06 Sun - Start of UK FY 1800-01, a day later due to missing Feb 29 (ditto)
1805-10-11 Fri - Decreed that the RN day would in future start at local midnight - was the previous local noon - ships must have had a Long Day. Not implemented at Trafalgar
1841-01-01 Fri - Day 1 for ANSI MUMPS $Horolog function.
1852-02-29 Sun - Fred born. Possibly Fri, 4 years later
1858/11/05 Wed - GMT : MJD 0 by the Julian Calendar
1858-11-17 Wed - GMT : MJD 0 ; JD 2400000.5 ; JD 2400001 starts at noon UTC; CJD 2400001. Base date/time for DEC OpenVMS (VAX VMS), TOPS. See 0000-03-01 & Note 0
1867/10/06 Fri - Julian, CMJD 3257
1867 10 !! --- - Probable position of Alaskan date hiccup; the previous and following entries were consecutive local days
1867-10-18 Fri - Gregorian, CMJD 3257
1867 10 !! Sat - CMJD 3258 - Wikipedia starts Gregorian on Saturday 19th
1878-09-05 Thu - TJD -32768 : least 16-bit signed TJD
1880-08-02 Mon - Royal Assent to UK "Statutes (Definition of Time) Act", making GMT the legal time in Great Britain
1884-10-01 Wed - Start of International Meridian Conference, Washington, DC, USA. 
Prime Meridian to be Greenwich, Greenwich Mean Time adopted, etc.
1884-11-01 Sat - End of Conference
1886-04-04 Sun - CMJD 10000; five digits needed
1899-12-30 Sat - Borland Delphi 2.0+ base date (Day 0) for TDateTime double (D1 used Day 1 = AD 0001-01-01 Gregorian); CMJD 15018. Also for other systems without the anomalous retrospective 1900-02-29, e.g. VBScript
1899-12-31 Sun - ICL George 3 (etc.) Day 0
1900.01.00 Sun - Excel 97 SP-1, Day 0
1900-01-01 Mon - 00:00:00 GMT, IBM mainframe common time zero; tick is 2^n µs
1900-01-01 Mon - At 00:00:00 GMT, NTP time zero (a seconds count; no leap seconds; 1900-02-29 omitted [2000-01-01 = Day 36524])
1900-02-28 Wed - CMJD 15078. Was followed by March 1st
1900.02.29 --- - Non-existent Leap Day, except in Lotus 1-2-3 and compatible systems (Excel 97 SR-1 Day 60, ...), and in still-Julian countries; and possibly in G&S. See 1899-12-30, and Leap Years
1900-03-01 Thu - Gregorian : CMJD 15079. Followed February 28th
1900/02/29 Tue - Julian Leap Day, CMJD 15091, Gregorian 1900-03-13 Tue. See in Leap Years
1901-01-01 Tue - Ada: type TIME defines years as being in the range 1901..2099
1901-12-13 Fri - 20:45:52 is where UNIX should go to from 2038-01-19; but I have read that systems can show Mon Jan -17 1902, -03:-14:-08 or 17:00:00
1904-01-01 Fri - Start of old Apple Mac time - Excel Day 0, Seconds 0 - see 2040
1925-01-01 Thu - The Astronomical GMT day now starts at midnight - had been the following noon - implying a Short Day yesterday
1927-05-18 Wed - 10000 days from 1899-12-30
1940-02-29 Thu - Fred's 21st Birthday :-)
1948-08-05 Thu - CMJD 2^15
1956-08-01 Wed - August 1, 1956 is the day that Apple restarts at when the battery dies, I was told. But
1956-08-27 Mon - About 20:36 is the time that Apple restarts at when the battery dies, reported observations
1958-01-01 Wed - CCSDS date/time code start (0h TAI) - spacecraft data
1960-01-01 Fri - Alleged to be an IBM 360 epoch? What  counting? Start of SAS daycount
1967-12-31 Sun - Probable Day 0 of Pick
1968-01-01 Mon - Sun SPARC: SunOS, Solaris, BSD/OS, Linux: in RTC, YYMMDD=000101
1968-01-19 Fri - would be 2^31 seconds from 1900-01-01, incl. 1900-02-29. NTP MSB set.
1968-01-20 Sat - 2^31 seconds from 1900-01-01, excl. 1900-02-29. NTP MSB set
1968-05-24 Fri - Epoch of TJD, first TJD=0. NIST says TJD = MJD mod 10000. CCSDS says 4-digit TJD = MJD - 40000
1969-12-31 Wed - Displayed in the New World for a zero-value UNIX time_t, JavaScript (etc.?) date; see 1970
1969-12-31 Wed - Perl, etc., time failure result (23:59:59); "-1 seconds" - Note 11
1969-12-31 Wed - IBM 360 date failure, reported at Mitre
1970-01-01 Thu - MJD 40587. Delphi, etc., 25569. Base Date for UNIX, time_t, JavaScript (& Java), Perl and some implementations of C - GMT, so seemingly yesterday in the New World. Seconds/ms counts start
1970-01-01 Thu - A common Microsoft date-windowing breakpoint
1970-01-01 Thu - "Y2k"-class problem from one-digit years was observed
1971-02-15 Mon - Decimal-Day, U.K. coinage - end of £.s.d
1971-05-11 Tue - IBM 370 TOD clock flipped its top bit @11:56:53.685248 GMT. 1900-01-01 + 2^51 µs
1972-01-01 Sat - Formal start of UTC time scale and Leap Seconds
1972-01-19 Wed - 03:14:08, Mac system clock MSB flip
1972-02-29 Tue - First leap year for IBM's TSO (Time Sharing Option); login message gave date as March 0, 1972.
1972-06-30 Fri - 23:59:60 UTC, the First Leap Second of all
1972-08-16 Wed - 9999 days to year 2000. Problem with tape retention - mainframe JCL parameter LABEL=RETPD=9999 "save forever" hits Y2k
1973-03-03 Sat - UNIX time_t 100 Ms from 1970, at 09:46:40 GMT. 99,999,999 special? See 2001-09-09
1975-01-05 Sun - PDP-6 12-bit days overflowed (DECsystem-10)
1975-04-06 Sun - Day 96 of some year, probably '75/'76. PDP-11 DOS/BATCH used (sic) 12-bit dates, (year-base)×1000 + day_in_year (BE)
1978-01-01 Sun - Earliest possible Amiga system date
1978-01-01 Sun - PDP-8 OS/8 3-bit years (from '70) overflowed; fixed later in the year
1978-07-04 Tue - UNIX time_t $10000000 at 21:24:16 UTC
1979-12-01 Sat - Mainframes, string "000197AF" problem manifested (Cory H.)
1980-00-00 --- - (sic) Earliest possible MS-DOS file date 
1980-01-01 Tue - Earliest valid MS-DOS file date. Earliest possible MS-DOS system date; DayCount=0
1980-01-01 Tue - The "x'000197AF' for x'0001980F'" year began
1980-01-04 Fri - Many older DOS PCs will reset to here or hereabouts when RTC year=00 is found (and for other RTC format errors)
1980-01-06 Sun - Start of first GPS Week 0, at 00:00:00 UTC
1980-12-31 Wed - IBM comms controller "Day 366" failure; cf. 1996
1982-10-15 Fri - Gregorian calendar 400-year full repeat began
1987 -- -- --- - US DST rule change
1987-01-01 Thu - Burroughs Unisys A Series system date - Note 5
1987-01-05 Mon - UNIX time_t $20000000 at 18:48:32 UTC
1988-01-01 Fri - Sun leap year bugs : Risks Digest 6.05/1, 6.09/3, 6.10/5, 6/11, 6.14/3
1989-09-17 Sun - See 2079-06-05; Delphi Day 2^15
1989-09-18 Mon - 2^15 days from 1900-01-01 - 16th bit flipped
1989-11-16 Thu - 2^15 days from 1900-03-01 - 16th bit flipped (MTS failed)
1991-01-01 Tue - Steltor's CorporateTime server's UNIAPI_TIME value zero at 0h GMT - minute count. Oracle bought Steltor
1991-11-24 Sun - IBM: see 1997-12-##
1992-01-01 Wed - Certain Olivetti PCs' calendars failed (3-bit years from '84?); also AT&T 6300s
1992-11-01 Sun - Tandem CLX microcode bug struck at 3pm local - Risks Digest 14.06/7
1995-07-09 Sun - UNIX time_t $30000000 at 16:12:48 UTC
1995-10-10 Tue - CMJD 50000 {VS=10}. Second TJD 0 (or TJD 10000)
1996-01-01 Mon - UNISYS mainframe 8-bit clock rollover
1996-01-01 Mon - MS-DOS CHKDSK /F, FILE*.CHK date bug appeared - (Year-1980) is 4 bits? (seen by me in DOS 3.30, 5.00, 6.20; also reported in 6.22) (SCANDISK seems OK)
1996-02-29 Thu - Penultimate Leap Day of the Second Millennium
1996-12-31 Tue - 1996-366 - Tiwai Point (NZ) smelter failure. Also "Iceberg" storage array failure
1997-01-08 Wed - Unisys CTOS application problem, reported as - 
"OFIS Spreadsheet fails to load on every Wednesday & Sunday. OFIS Spreadsheet v2 has problems calculating the day of week from this date (workaround released)." For FAQ, see 2041
1997-04-07 Mon - 999 days to year 2000
1997-05-19 Mon - 10000 days from 1970-01-01 - some OpenVMS dating may have failed unless an ECO was applied 
1997-11-02 Sun - Alleged in Y2k news : "HP's old computers are scheduled to roll over and die @ 1400gmt Nov. 4, 1997?". Used for FAA ATC - Note 1. Actually Nov 2nd
1997-12-## ??? - Reported: Possible IBM mainframe minute clock 24-bit rollover about then. But 1960-01-01 + 2^24 minutes is 1991-11-24 Sun 20:16. 

1998 -- -- --- - Year "98" may have been a "signal"
1998-02-08 Sun - approx : 100 weeks to Y2k; a failure has been reported
1998-04-06 Mon - UK FY 1998-1999 started - no problem?
1998-07-06 Mon - Possibly "9876" might be a "signal" entry?
1998-08-19 Wed - 500 days to Y2k - Y2k Awareness Day campaign: proposed South African "National Awareness Day", "Y2k for Africa Day", and "World Y2k Awareness Day"
1998-09-09 Wed - Sometimes a "signal" date - cf. 1999-09-09
1998-10-01 Thu - 15-month lookahead (seemingly common) began to fail
1998-10-25 Sun - End of Summer Time, clocks went back
1998-10-26 Mon - Hubble Space Telescope 32-bit clock MSB set at 20:42:15 UTC; systems had been checked for signed usage (RB: 1998-10-25). One system affected (RB: 28th)
1998-12-01 Tue - One month look-ahead to "signal" year
1998-12-31 Thu - Last day before "signal" year 

1999 - some 1999 dates may have equivalents in 1998. 

1999 -- -- --- - Year "99" (or "999") may be a "signal"
1999 -- -- --- - NIST : MIM or MCMXCIX ?
1999-01-01 Fri - Start of the last year of the 1900s. One Year to Y2k itself
1999-01-01 Fri - Effective introduction of the (electronic)  financial Euro (ex-ecu) within continental Europe - dual accounting. See Europe and Euro for its symbol
1999-01-01 Fri - Y2k failure in year-ahead predictions
1999-01-02 Sat - AIUI, the strict "Jo Anne Effect" window begins
1999-01-02 Sat - YYMMDD sorting with one-year look-ahead fails (or 1999-01-01)
1999-01-04 Mon - First working day of 1999, generally
1999-01-05 Tue - First working day of 1999, Scotland
1999-01-09 Sat - 1999-9 : 9th day of '99 (cf. 1999-04-09)
1999-02-01 Mon - YYMM sorting with one-year look-ahead fails (or 1999-01-01)
1999-02-05 Fri - Airline reservations: 330-day lookahead meets Y2k
1999-02-11 Thu - Day 90000 of the UK Gregorian Calendar
1999-03-02 Tue - MS-DOS daycount rollover to 7000; no effects predicted
1999-03-28 Sun - Start of European Summer Time, clocks go forward
1999-04-01 Thu - Start of Canadian & Japanese FY. Also for NY in USA
1999-04-04 Sun - Start of American Summer Time, clocks go forward
1999-04-06 Tue - Start of United Kingdom FY 1999-2000
1999-04-09 Fri - 1999-99 : 99th day of '99 (D. Scott Secor) - a "nonsense" or "marker" date? See 1999-09-09
1999-04-20 Tue - 255 days to year 2000. A byte holds values 0..255. The more significant byte of a word "days till 2000" becomes empty; programming slips may now show
1999-05-24 Mon - See 1999-05-31
1999-05-31 Mon - UK Spring Bank Holiday and US Memorial Day, last Monday in May. A version of MS Outlook uses the fourth Monday in May, and so is a week early some years. Affects other MS applications?
1999-06-01 Tue - Start of PhTWOday national dual running - "The Big Number". 
    Several UK areas (London, Southampton, Portsmouth, Cardiff, Coventry, Northern Ireland) had phone number changes. Mobile numbers also change from Sep 30. 
    London (0)1#1 xxx xxxx numbers (# in [7,8]) will become (0)20 #xxx xxxx. 
Dual running in London ends 2000-04-22, q.v.; other areas later. 
Oftel is now Ofcom
1999-07-01 Thu - Abolition of duty-free within EU (travel)
1999-07-01 Thu - Australian Financial Year starts. Also USA: 46 (?) States' fiscal Y2k starts, FY 2000; but NY=04-01, TX=09-01; AL,MI=10-01
1999-07-01 Thu - Y2k failure in half-year-ahead predictions
1999-07-05 Mon - 180 days before 2000-01-01
1999-08-01 Sun - Windows 98 "Office 2000 Beta expiry" bug starts. Upgrade RAGENT.DLL to version 9.0.2612 or later  
1999-08-19 Thu - First EOW related update to the GPS Almanacs, at 2200 Zulu; updating takes 24h overall, and could affect users
1999-08-21 Sat - End of GPS Week 1023 (from 1980-01-06), 10-bit field "EOW" rollover (nominally at 0000h the next day; but, because of Leap Seconds, actually at 1999-08-21 23:59:47 UTC). USNO, gpsinformation.net. 
It seems that most receivers are OK; some may lose lock for a few minutes at rollover; a few may not lock in Week #0 (mod 1024)
1999-08-22 Sun - See yesterday, if East of the Atlantic
1999-08-23 Mon - See 1999-08-30
1999-08-30 Mon - UK Late Summer Holiday, last Monday in August. A version of MS Outlook uses the fourth Monday in August, and so is a week early some years. Affects other MS applications?
1999-09-01 Wed - Start of FY for TX in USA
1999-09-09 Thu - Default "nonsense" or "marker" date in many data-entry screens - 9-9-99 may have been used as an indefinite "Purge" date - purge file overflow? See Randall Bart? Subsequently, data may be unprotected
1999-09-23 Thu - 99 days to year 2000
1999-09-30 Thu - Start of UK mobile phone number change dual running. 
Dual running ends April 2001
1999-10-01 Fri - USA's federal government fiscal Y2k starts, FY 2000. Also for AL, MI in USA
1999-10-01 Fri - Y2k failure in quarter-ahead predictions 
1999-10-01 Fri - Those changing from YY/M/D to YYYY/M/D may find that the field becomes too long as the month (or day) goes from 9 to 10. Note 2
1999-10-03 Sun - 90 days to Year 2000 - 90 day intervals are common (& 60,30)
1999-10-31 Sun - End of Northern Summer Time, clocks go back
1999-11-11 Thu - 1999 in Japan is eleventh year of Heisei; demand for railway platform tickets marked 11/11/11 11:11 seems to have crashed the system (Risks Digest 20.65) 
1999-11-19 Fri - All digits odd, last until 3111-11-11; cf. 0888-08-28, 2000-02-02
1999-12 -- --- - Dec '99 may be a "Signal"
1999-12-01 Wed - One Calendar Month to Y2k itself. Monthly look-ahead fails
1999-12-24 Fri - Christmas Eve - Note 14, until 2000-01-05
1999-12-25 Sat - Christmas Day
1999-12-26 Sun - Boxing Day, traditionally; but nowadays Boxing Day is often the first weekday after Christmas
1999-12-27 Mon - Week 52 of 1999 starts, the last ISO week of 19xx
1999-12-27 Mon - UK Holiday in lieu of 25th
1999-12-28 Tue - UK Holiday in lieu of 26th
1999-12-31 Fri - UK Bank Holiday (Confirmed by HMG, 1998-06-03)
1999-12-31 Fri - Sometimes used as a special marker, such as a "Never Expires" date (IBM Tapes marked 99365 - all may expire today, or not; also 99366, 99999)
1999-12-31 Fri - Support for much software may cease after today
1999-12-31 Fri - Last working date for IBM CICS 3.3
1999-12-31 Fri - Last working date for versions of Intuit's Quicken online banking
1999.12.32 Sat?- Reported as sighted in a PC RTC. Watch out for such dates in data
1999.13.01 Sat?- Reported as sighted as a Netware file date. Watch out for such dates in data
1999-999   --- - (etc.) a better "special" date than Apr 9th ; = 2001-09-25 ; see 9999
1999.99.99 --- - (etc.) a better "special" date than Sep 9th ; = 2007-06-07 ; see 9999. 

2000 -- -- --- - THE YEAR 2000 - an annus horribilis - Still the 20th Century, but some will say the 21st 

2000 -- -- --- - Year "00" may be a "signal", e.g. "invalid"
2000-00-00 --- - As next:
2000.01.00 --- - Apparently, some systems have this - check its absence - Note 12
2000-01-01 Sat - CMJD=51544. DOS day 7305. One year to M3 and c21
2000-01-01 Sat - Final stage of compulsory metrication in UK (apart from roads, beer, ... ?)
2000-01-01 Sat - Australian map grid change
2000-01-01 Sat - It has been asserted that some computer systems (S/36? S/38? AS/400 B-10?) will not work after 1999; the IBM site referred
2000-01-01 Sat - AS/400 internal hardware clock MSB flips, see 2071-05-10
2000-01-01 Sat - Reported that GMS/SMS crashes a PC today
2000-01-01 Sat - Notes 2, 7, 8, 9, 13, 16
2000-01-02 Sun - (ff.) Completion of first-day processing now possible
2000-01-03 Mon - Start of ISO Week 1 - first week in 20xx, 1999W52 clean-up now possible
2000-01-03 Mon - First Business Day of 2000 (USA). UK Holiday :-)
2000-01-04 Tue - First Business Day of 2000 (most of UK)
2000-01-05 Wed - First Business Day of 2000 (Scotland)
2000-01-05 Wed - Note 2
2000-01-06 Thu - Note 13
2000-01-07 Fri - Last working day of first week of 2000, in most countries. Weekly batch work, payday
2000-01-10 Mon - Note 2
2000-01-12 Wed - Note 2
2000-01-17 Mon - First USA Monday holiday (MLK day) - Note 13
2000-01-31 Mon - Last day of first Calendar Month of 2000. Monthly batch work. Tomorrow, clean-up for the first month of 2000 begins
2000-01-32 ff. - Sightings of these have been reported
2000-02-02 Wed - All digits even, first since 0888-08-28; cf. 1999-11-19, 3111-11-11
2000-02-15 Tue - USA employees' 1999 W2 forms are due out. 

2000-02-28 Mon - Not month-end
2000-02-29 Tue - This valid date is not expected to occur by everyone; some major software is or has been wrong here.  One reason is missing the 400-year rule; another is using full rules on a YY date. Check that March 1st is next. 
Examples : RFC2030 is wrong; JTIDS (Mil; Link 16) tables were said by doncio to err (fixed?); Excel 2000 (pdf); IBM VM/ESA 2.3 needs an APAR [PTF#UM29184]); SCO UNIX 3.3? I've seen it said that Motorola CPU RTCs use 4+100 rules, so omit this day; so far, I remain unconvinced
2000-02-29 Tue - Henceforth, unless fixed, MS DHCP client date error - IP leases a day too old. Q230173
2000-02-29 Tue - It has been said that un-upgraded HP 300 Basic entered dates fail after today.
2000-02-29 Tue - It has been said that some PDP-11 computers will not boot after this date - a diagnostics bug. But Mentec did not refer to this; and another expert (RHS of PA) says that it is just that the 11/93 & 11/94 consoles get the Leap Year rule wrong
2000-02-29 Tue - For this day, Her Majesty should NOT have been sending any of her traditional messages (were telegrams) to centenarians. 

2000-02-30 --- - "Hollywood Squares" (TV game show) wrongly claimed that 2000-02-30 would exist
2000-02-31 --- - With 2000-02-30, reportedly seen in some PC software
2000-03-00 --- - Reportedly, VxWorks (Wind River Systems) has this (at least in some versions and on some platforms) instead of 2000-02-29
2000-03-01 Wed - Follows 2000-02-29. Some leap year errors may not have shown yesterday
2000-03-01 Wed - UK Data Protection Act 1998 comes into effect
2000-03-01 Wed - From 1918-03-01, first day for which certain implementations of Zeller's Congruence have negative-mod-7 error
2000-03-25 Sat - Possible UK/EU Summer Time error, since 1900-03-25 was Sunday. The Boat Race, 16:10 (GvI 15:40). :-(
2000-03-26 Sun - Start of Summer Time (UK, EU, ...)
2000-04-01 Sat - 2Q'00 starts, 1Q'00 clean-up - Last April Fool's Day of the Millennium. Possible US DST error, since 1900-04-01 was Sunday
2000-04-02 Sun - Belated Start of Summer Time (USA, ...) 
2000-04-05 Wed - End of United Kingdom FY 1999-2000,  which was a Leap Year
2000-04-06 Thu - Start of United Kingdom FY 2000-2001
2000-04-06 Thu - Introduction of different taxation in Scotland?
2000-04-09 Sun - The hundredth day of the year (cf. 1999-04-09). Note 2
2000-04-15 Sat - USA taxpayer panic day (W2 forms are due back to govt)
2000-04-15 Sat - Systems thinking that it is now 1900 will think that today is Easter Sunday
2000-04-22 Sat - "PhTWOday" (Easter Saturday) - "The Big Number" - national dual running ends (see 1999-06-01). 
    Several UK areas have had phone number changes. 
    London (0)1#1 xxx xxxx numbers (# in [7,8]) have become (0)20 #xxx xxxx. 
The change from 7-digits to 8 digits for local London numbers is on this day. 
See also Clive Feather for phone info. 
Oftel is now Ofcom
2000-04-23 Sun - St. George's Day, and Easter Sunday. Bard's anniversaries
2000-04-30 Sun - First month of Y2k finishing in a weekend. Note 16
2000-04-30 Sun - USA quarterly 941 withholding tax is processed (on a Sunday?)
2000-05 -- --- - Solar Max now expected around mid-year - Note 17
2000-06-28 Wed - the 180th day of 2000
2000-07-14 Fri - QEQM = QV, previous longest Q in this country
2000-08-04 Fri - QEQM = 100 celebrated
2000-08-05 Sat - UK phones - Cardiff - 01222 becomes 029 20
2000-08-05 Sat - UK phones - Coventry - 01203 becomes 024 76
2000-08-27 Sun - Early Australian Summer Time, for Olympics
2000-09-** *** - Certain consequences of over-celebration are starting to emerge ..
2000-09-01 Fri - Note 2
2000-09-02 Sat - UK phones - Portsmouth - 01705 becomes 023 92
2000-09-02 Sat - UK phones - Southampton - 01703 becomes 023 80
2000-09-06 Wed - Note 2
2000-09-09 Sat - Sometimes a "signal" date - cf. 1999-09-09
2000-09-10 Sun - Note 2
2000-09-13 Wed - Note 2
2000-09-16 Sat - UK phones - Belfast - 01232 becomes 028 90
2000-09-16 Sat - UK phones - other Northern Ireland - 01xxx yyyyyy become 028 ##yy yyyy
2000-09-27 Wed - Note 2
2000-09-30 Sat - USA federal FY ends
2000-10-01 Sun - Note 2
2000-10-04 Wed - Note 2
2000-10-10 Tue - Note 2. (VS=VS?)
2000-10-11 Wed - Note 2.
2000-10-14 Sat - UK phones - London - 0171 & 0181 stop working today. For those 01x1 yyy zzzz use 020 xyyy zzzz
2000-10-28 Sat - False Summer Time ends, on 1900 days
2000-10-29 Sun - Northern Summer Time ends
2000-12-30 Sat - Allowing for the errors of the Julian Calendar, the Third Millennium of our era, when the Sun has returned to its starting point with respect to the Earth for the 2000th time, starts at around 03:00:00 today
2000-12-31 Sun - 366th day of year, possibly unexpected; see 1996. Norwegian train failures!
2000-12-31 Sun - Like 1972, 2028, ..., contains 54 Sun..Sat calendar weeks or parts thereof; this day is the 54th week
2000-12-31 Sun - Year-End processing
2000-12-31 Sun - London - low tide, 23:00 approx.; caveat 

2001 - All is not yet clear ... 

2001 -- -- --- - For the first time in a century, last year is "00"
2001-01-01 Mon - Third Millennium A.D. and Twenty-First Century A.D. start. UK bicentennial; AU centennial
2001-01-01 Mon - Applications hard-coded for the 20th Century proper now fail
2001-01-01 Mon - Reported that Tandem systems overflow; no details. Reported that Y2k fix to 'Automated Storage Manager' ends; no URL given
2001-01-01 Mon - Fixes that just change 1900 to 2000 fail. Allegedly, this may include versions of Windows, 98 & NT 
2001-01-01 Mon - New date interpretation ambiguities start, as YY enters the ranges of MM & DD. 
* Forms YY-MM-DD, DD-MM-YY & MM-DD-YY; general. 
* Forms MMM DD & MMM YY, DD MMM & YY MMM; especially food dating
2001-01-01 Mon - See 2009-09-09. 010101 has been used as a marker for "unknown DoB"
2001-01-20 Sat - Is 20012001 YYYYDDMM or DDMMYYYY, not that it matters?
2001-02-20 Tue - Is 20012002 YYYYDDMM 20 Feb 2001 or DDMMYYYY 20 Jan 2002? Is 20022001 YYYYDDMM 20 Jan 2002 or DDMMYYYY 20 Feb 2001?
2001-02-29 --- - Will not exist; but check software
2001-03-25 Sun - UK/EU Summer Time starts, 01:00 GMT
2001-04-?? ??? - End of UK mobile phone number change dual running
2001-04-01 Sun - (& MJD52k) US DST starts 0200h local time. Reported that MS Visual C++ RTL gets an error whenever April 1 is a Sunday, and starts its DST a week late. Affects Windows applications. See Risks Digest 21.34/9 for an occurrence in 2001. Fix issued
2001-04-05 Thu - End of United Kingdom FY 2000-2001,  which was not a Leap Year
2001-04-08 Sun - See 2001-04-01
2001-04-19 Thu - 04:25:21 GMT is UNIX time_t 987654321
2001-04-28 Sat - UK mobiles and pagers - numbers now start "07"
2001-09-01 Sat - New UK vehicle numbering, AA99 BBB.  DVLA Local Tag list
2001-09-09 Sun - UNIX time_t 1 Gs from 1970, at 01:46:40 GMT. 999,999,999 special? Also JavaScript (+Java) 1 Tms - Note 10, Note 18
2001-09-25 Tue - = 1999-999
2001-10-02 Tue - First palindromic YYYYMMDD date since 1380
2001-10-28 Sun - UK/EU Summer Time ends, 01:00 GMT 
2001-11-24 Sat - UNIX time_t 2^24 minutes, 20:16 GMT
2001-12-31 Mon - Lotus Organizer 1,0, 1.1 finish today
2001-12-31 Mon - as 2002-12-30
2002-01-01 Tue - Euro cash circulation starts within much of continental Europe ("Euroland"). EU, less Denmark, Sweden, UK
2002-02-?? ??? - About mid-month, Y4.7k of the Chinese Huangdi Era. Huangdi 4697-10-13, launch of Chinese unmanned spacecraft, 1999-11-20
2002-02- . . . - Euroland termination of national tangible currencies this month (Daily Telegraph, 2002-01-01, p.4) - possible last days :-
2002-01-27 Sun - Netherlands
2002-02-09 Sat - Ireland
2002-02-17 Sun - France
2002-02-28 Thu - Austria Belgium Finland Germany Greece Italy Luxembourg Portugal Spain.
2002-02-20 Wed - Doubly palindromic in the UK as DDMMYYYY, and ISO but not US; and in the evening, 20/02/2002 20:02:20.02 is quadruply so, as far as the digits go. It is CMJD 52325, also palindromic
2002-02-28 Thu - Euroland termination of national tangible currencies completed (Daily Telegraph, 2001-01-03, p.17)
2002-05-27 Mon - NOT the UK Spring Holiday
2002-06-03 Mon - Queen's 50th Anniversary holiday in UK 
2002-06-04 Tue - A standard UK holiday, displaced 8 days
2002-06-30 Sun - Effective termination of dual accounting  with pre-Euro currencies within continental Europe
2002-07-01 Mon - Original finish of withdrawal of traditional money in continental Europe
2002-09-14 Sat - 250th anniversary of the start of the Gregorian Calendar in Britain. Apart from me, no-one seems to have noticed
2002-12-30 Mon - A DOS GAWK, using library strftime, has an ISO week number error. Example: Mon/Tue/Wed, when in Dec 29-31, should be in Week 01. Many years affected. Other software perhaps likewise
2002-12-31 Tue - Ditto
2003-01-01 Wed - Some DEC Basics put (Year-1970)×1000+DayOfYear in a 16-bit integer - this now fails, being 33001, and so >32767
2003-01-01 Wed - Burroughs Unisys A Series system date - Note 5
2003-08-28 Thu - Or thereabouts - first difference caused  by new Saudi rules for Islamic month-length, from AH 1423. JAS
2003-11-28 Fri - At about GMT 00:00 or 24:00 (reports are unclear), GPS 8-bit week rollover since last Leap Second at 1998-12-31 23:59:60 Thu; a bug in Motorola Encore receivers gets 29th for a second of the 28th. Risks Digest 22.94/3 refers
2003-12-29 Mon - VBScript, as 2007-12-31
2003-12-31 Wed - Last date for DEC RT-11 file system, 5-bit year from 1972=0. VXworks
2004-01-01 Thu - Alleged Canvas 3.5 Mac "Year 2004" bug; 100 years from 1904. See Risks Digest 23.50/3, 23.51/7, and 2004-08-31 below
2004-01-10 Sat - UNIX time_t $40000000 at 13:37:04 UTC. See Risks Digest 23.12/3 and 23.13/9,11 for resulting failures. Affects Turnpike message-IDs
2004-02-29 Sun - First "Leap Day" of c21 & M3; Risks Digest 23.25/1, 23.29/8 refer to failure cases. Displays of some GM Pontiacs affected
2004-05-01 Sat - EU enlargement :- Cyprus, Czech Republic, Estonia, Hungary, Latvia, Lithuania, Malta, Poland, Slovakia, Slovenia
2004-07-17 Sat - GPS Receiver Almanac Rollover, 256 weeks after GPS 1024-week rollover
2004-08-31 Tue - 12:30, Mac Canvas 3.5 expiry, patchable. See Risks Digest 23.51/7
2004-10-02 Sat - @21:24:16 local, date rollover stops "stone" file system - Discreet, Montreal. Cause not known. Unix/Linux/?
2004-12-31 Fri - 2004-366 - cf. 1996-366
2005-??-?? ??? - "Some *really* old versions of UNIX (e.g. 16-bit BSD) die in 2005."
2005-06-01 Wed - London telephone 020 3xxx xxxx release by Ofcom; issue to customers expected in Autumn 2005. NOT 0203 xxx xxxx
2005-11-29 Tue - 04:53:20 GMT : 212 Gs from JD 0.0
2005-12-31 Sat - 23:59:60 UTC : first Leap Second for 7 years
2006-05-13 Sat - 01:27:28 GMT : Unix Epoch end (2038) minus 1 Gs - many AOLServer web servers failed - see Risks Digest 24.34/3
2006-10-29 Sun - US DST ends today, not next week
2006-11-05 Sun - Safe to update US DST code for 2007?
2006-12-31 Sun - HP3000, End Of Life
2007 -- -- --- - NA DST rule change 2006/07 - US CA BM BS TC
2007-??-?? ??? - UK telephone code 03 to be introduced 
2007-01-01 Mon - Slovenia adopted the Euro
2007-01-01 Mon - Book Numbering : nominal start of ISBN-13 - Checker
2007-01-01 Mon - "USA FAA computers fail, 32 years from 1975". TZ? 2006?
2007-03-01 Thu - US DST rule change effective
2007-03-11 Sun - First earlier DST start in NA
2007-04-01 Sun - UK MSF 60kHz time signal moved from Rugby, Warwickshire to Anthorn, Cumbria
2007-04-01 Sun - First unexpected DST not-start in NA
2007-04-06 Fri - Good Friday and start of UK Financial Year - 3.2 applies
2007-05-19 Sat - MS-DOS CLOCK$ daycount 10000 - no effect?
2007-06-07 Thu - = 1999-99-99
2007-08-09 Thu - CMJD 54321
2007-09-12 Wed - Ethiopian (Ge'ez) calendar, 2000/01/01 - Y2k
2007-10-28 Sun - First unexpected DST not-finish in NA
2007-11-04 Sun - First later DST finish in NA
2007-12-20 Thu - QEII = oldest monarch in this country
2007-12-31 Mon - Also 2003-12-29, 2019-12-30, and every 28 years after in c.21 : Some VBScript DatePart give wrong ISO Week Number - see in VBScript Date and Time 2. Error seen both in Web pages and in WSH; still present in Vista
2008-01-19 Sat - 30 years before 2038-01-19 - mortgage look-ahead?
2008-02-29 Fri - "Leap Day"
2008-03-23 Sun - Easter Sunday was unusually early (previously this day in 1913 & next in 2160; earliest possible date, March 22, 1818 & 2285). Still in EU Winter Time!
2008-12-31 Wed - 2008-366 - cf. 1996-366
2009-01-01 Thu - NOAA: Termination of satellite processing of distress signals from 121.5/243 MHz emergency beacons. Use 406 MHz
2009-01-20 Tue - POTUS change - noon EST
2009-02-13 Fri - 23:31:30 GMT is UNIX time_t 1234567890
2009-09-09 Wed - 090909 is another possible valid nonsense or marker date; as with, of course, other 0x0x0x & 1x1x1x dates, or anything with YY small
2010-01-01 Fri - Y2.01K
2010-01-01 Fri - Beware of writing 20010
2010-01-01 Fri - There will be some who have coded only for Years 200#.
2010-01-01 Fri - Beware of those who have coded YY in Hex or BCD, then somehow use 2016 for 2010. Risks Digest 25.89
2010-01-01 Fri - Sorting YYMMDD decade-reversed covers 1990-2009 only
2010-01-01 Fri - Reported ANSI C library overflow. Very dubious. RSVP if you can explain it
2010 02 29 --- - non-existent. See BBC
2010/03/22 Sun - Orthodox (Julian) Easter Sunday is on the earliest possible date (2010-04-04)
2010-12-25 Sat - CMJD 55555 

2011-01-01 Sat - Y1C. Taiwan Dynasty Date (from China; and North Korea) reaches three-digit years. Risks Digest 25.91
2011-04-29 Fri - Royal Wedding Public Holiday, UK
2011-09-14 Wed - @01:46:39 UTC less leap seconds, GPS 999999999 seconds
2011-11-11 Fri - Seen as a "marker" date - cf. 1999-09-09. Contains 11/11/11 11:11:11
2011-12-30 Fr1 - Samoa (non-US) and Tokelau omit this date, so moving the International Date Line. 
 
2012 -- -- --- - Like 2028, but for Mon..Sun weeks; contains 54 calendar weeks or parts thereof. Also 1984, 2040, ..
2012-02-29 Wed - "Leap Day"
2012-05-28 Mon - NOT the UK Spring Holiday
2012-06-04 Mon - Queen's 60th Anniversary holiday in UK 
2012-06-05 Tue - A standard UK holiday, displaced 8 days
2012-07-13 Fri - UNIX time_t $50000000 at 11:01:20 UTC
2012-12-21 Fri - Alleged end of World, Mayan Calendar (Long Count 13.0.0.0.0); failed. Might be December 2023; opinions differ
2012-12-31 Mon - 2012-366 - cf. 1996-366 
 
2013-03-31 Sun - EU Summer Time starts on Easter Sunday
2013-04-01 Mon - Reported iPad2 calendar Month bug 
 
2015-09-05 Sat - Apollo/HP 32-bit rollover Note 1
2015-09-09 Wed - QEII = QV, previous longest-regnant in this country 

2016-??-?? ??? - See 2010 

2017-01-20 Fri - Presumed POTUS change - noon EST 

20??-??-?? ??? - Introduction of the Euro in the UK ??? 

2019-01-01 Tue - First probable confusibility by value of the first two digits of the date between YY and YYYY forms
2019-03-01 Fri - Until 2100-03-01, last day for which certain implementations of Zeller's Congruence have negative-mod-7 error
2019-03-24 Sun - On proposed Aleppo rules, first Easter date differing from Gregorian (2019-04-21) - see Note 23
2019-04-07 Sun - Second GPS week rollover just before today, UTC
2019-06-06 Thu - MUMPS day 2^16
2019-12-30 Mon - VBScript, as 2007-12-31
2019-12-31 Tue - YY-date limit of Microsoft Excel 95. MS NT 4.0 fails after today if the RTC Century byte is "19"? Windows NT boot windows into 1920-2019? 

2020-01-01 Wed - Half a century after UNIX/Java* Epoch; date windowing failures possible
2020-01-01 Wed - Henceforth, Mac (System 6.0.4+) Date & Time control panel cannot set current date
2021-01-14 Thu - UNIX time_t $60000000 at 08:25:36 UTC
2023-02-25 Sat - Third TJD 0; CMJD 60000
2024-11-09 Sat - MS-DOS CLOCK$ daycount 16384 - no effect?
2025-12-31 Wed - Versions of Intuit's QuickBooks for DOS - dates fail at end of year
2026-01-19 Mon - CCSDS 32-bit time code MSB sets 03:14:08 TAI, 2^31 seconds from 1958-01-01 (q.v.)
2026-06-29 Mon - Day 100000 of the UK Gregorian Calendar
2027-??-?? ??? - Asteroid 1999 AN10 approaches Earth; closest 0.00259(1) AU (lunar distance)
2027-12-31 Fri - Versions of Intuit's Quicken, QuickPay 3 for Windows, and QuickBooks for Windows & Mac - dates fail at end of year. Also HP 300 Pascal?
2028 -- -- --- - Like 1972, 2000, 2056, ..., contains 54 Sun..Sat calendar weeks or parts thereof
2028-01-01 Sat - "1900 + a signed byte" and "1900 + 7 bits" year overflow - back to 1772 or 1900
2028-01-01 Sat - Systems Y2k-remedied by 28-year setback fail today
2028-10-26 Thu - Asteroid 1997 XF11 passes Earth
2029-07-18 Wed - UNIX time_t $70000000 at 05:49:52 UTC
2029-12-31 Mon - Common end of windowing interval - YY-date limit of Microsoft Excel 97 

2030-01-01 Tue - Half a century after MS-DOS file date Epoch; date windowing failures possible
2031-01-01 Wed - From HP-UX 10.20 'at' manpage: 'at' will not schedule jobs beyond the year 2030. That's local time
2031-12-31 Wed - Last date for Palm Pilot handheld
2033-05-18 Wed - UNIX time_t 2 Gs from 1970, at 03:33:20 GMT. 1,999,999,999 special? Also JavaScript (+Java) 2 Tms - Note 10
2034-01-01 Sun - Share/43 rolls back to 1970
2034-03-01 Wed - Safari JavaScript date string conversion  error of one day, seen in version 5.0.3 to 5.1.7 in WinXP sp3, for this date until 2100-02-28
2034-09-30 Sat - Time overflow in some ancient UNIX, which was fixed long ago. Genuine, but no longer significant. See 2038
2035-12-31 Mon - at 2400h today, Microsoft's "Year 2000 statement of compliance timeframe" ends. Probably many MS products are affected, as at c. 2000
2036-01-01 Tue - Burroughs Unisys A Series system date - Note 5
2036-02-05 Tue - Note 6
2036-02-05 Tue - 06:28:16 local is 2^32 seconds from 1899-12-30 00:00:00; Delphi TDateTime can no longer be converted to dword seconds
2036-02-07 Thu - 06:28:16 GMT is 2^32 seconds from 1900-01-01 00:00:00 GMT; NTP timestamp overflows, possibly at 00:54:54 (IETF) (diff 20002 s), yesterday if 1900-02-29 included. Also TIME, SNTP. RFC 1305?
2036-02-07 Thu - Microsoft Word 2000 date sorting fails
2036-12-31 Wed - Date limit of Visual C++ (4.x) runtime library MS NT 4.0 fails after today if the RTC Century byte is "20"?
2037-01-01 Thu - Reported NTP overflow - implausible
2037-02-06 Fri - 06:28:16 GMT is 2^32 seconds from 1901-01-01-00:00:00 GMT
2037-12-31 Thu - Code using "C" libraries may fail after today. WS_FTP (some editions) Year 2000 support ends
2038-01-01 Fri - From HP-UX 11.00 'at' manpage: 'at' will not schedule jobs beyond the year 2037. That's local time 
2038-01-01 Fri - Apple Rhapsody OS was said to fail. I can no longer locate this date at Apple; I think it should be as next.
2038-01-19 Tue - 32-bit UNIX/POSIX : 2^31 seconds from 1970-01-01, time_t MSB sets @03:14:08 GMT, and signed time_t<0 or time_t=-1 (the latter may be right; but the former may be used) is an error marker - "C" libraries: Note 4; Porquet page; Year 2000 Programming. See 1901-12-13. 
"Version 3.1 of InterSystems' Cache (www.intersys.com) crashes on January 19, 2038. Related to C calendar library problem A fix is reportedly in the works."
2038-04-23 Fri - CMJD 2^16
2038-04-25 Sun - Easter Sunday is as late as possible this year (previous, this day in 1943)
2038-??-?? ??? - "World Cup namespace fills" (Soccer)
2038-11-21 Sun - Third GPS week rollover just before today, UTC
2039-09-18 Sun - Y5.8k Jewish starts at Sunday sunset. Tishri 1 (Rosh Hashanah), 5800 

2040-01-01 Sun - Pick, possible limit???
2040-??-?? ??? - Alleged IBM S/390 STCK overflow ???
2040-02-06 Mon - At 06:28:16, old Apple Macs' longword seconds from 1904-01-01 overflows
2041-01-01 Tue - Reported "that IBM mainframe internal clocks will not go past the year 2041". Not yet confirmed.
2041-11-16 Sat - Unisys BTOS / CTOS Operating System - Clock will roll over at 2400h to 1952-03-01 - FAQ
2042-09-17 Wed - IBM 370 and successors, TOD clock overflow (long seconds (1.048576 s) from 1900) at 23:53:47 approx. 1900-01-01 + 2^52 µs
2044-01-01 Fri - MS-DOS : 2^6 years from 1980, 7-bit file date MSB sets
2044-01-01 Fri - Motorola VERSAdos : 2^6 years from 1980, 6-bit file date rolls to 1980 - Note 15
2046-01-01 Mon - Amiga system date failure
2046-06-08 Fri - BYTE says some UNIX password aging fails, 64^2 weeks from 1970. But see 2048-07-01
2047-09-19 Thu - CCSDS 16-bit day code MSB sets, 2^15 days from 1958-01-01 (q.v.)
2048-01-01 Wed - AD 2^11 starts - 12-bit signed overflow - PDP-8???
2048-01-19 Sun - Stratus VOS OS failure (1980-01-01 + 2^31 seconds)
2048-07-01 Wed - Some UNIX password aging fails; 64^2 weeks from 1970 (reported as June, or 2046 (q.v.)
2049-12-31 Fri - Microsoft Project 95 (and earlier) limit 

2050-01-01 Sat - YY-windowing into 1950-2049 collapses
2057-09-17 Mon - If Pick Day 1 is 1968-01-01, this is Day 32768
2058-02-08 Fri - TJD +32767 : greatest 16-bit signed TJD
2059-09-19 Fri - 2^15 days from 1970-01-01. Signed overflow?
2060-??-?? ??? - Around now, present-type TLEs for artificial satellites may become ambiguous, as they use 2-digit years (YYDDD)
2060-01-01 Thu - The trick of using a two-digit year representation with the first digit Hex (98,99,A0,A1..F9) fails today If the digits are stored as nibbles, no more can be done;  if as characters, 200 more years brings the end of Z9
2067-07-02 Sat - GRB numbering (yymmdd) becomes ambiguous (First : Vela GRB 670702)
2068-01-01 Sun - Sun SPARC: SunOS, Solaris, BSD/OS, Linux: in RTC, YYMMDD=000101 again
2069-01-01 Tue - POSIX standard assumes 1970 ≤ year < 2069   (gnulist)
2069-01-19 Sat - At 03:14:08, 2^31 secs of the Third Millennium
2069-09-18 Wed - 2^15 days from 1980-01-01 MS-DOS CLOCK$ daycount word MSB sets - no effect? Seemingly used in Oyster
2070-01-01 Wed - Centenary of 1970-01-01, the start of UNIX, C, etc., time_t, and of JavaScript time. Possible Y2k-type errors in year handling appear. But see 2038
2071-05-10 Sun - AS/400 internal hardware clock (42-bits of 1024 µs centred on start of 2000) rolls over at 11:56:53.685248 to 1928-08-23
2072-??-?? - "Exact Date TBD: Overflow of Milstar Operating System". Possibly GPS-UTC signed 8-bit overflow, year approximate
2078-12-31 Sat - Excel 7.0 - The Last Day, #65380 (Phil E); and Excel 95
2079-06-05 Mon - 2^16 days from 1899-12-30 = Day 0; Delphi TDateTime resolution halves for dates from here. Previous, in 1989, 1944; Next, 2258
2079-06-06 Tue - 2^16 days from 1900-01-01 = Day 1
2079-08-04 Fri - 2^16 days from 1900-03-01 = Day 1
2080-01-01 Mon - MS-DOS file dates, when displayed with two-digit years, are ambiguous if files may be dated today or later. Windows File Manager, set to ISO 8601 dates, drops 100 years from displayed file dates of 2080+. My Amstrad PPC640, bought in 1988, evidently cleverly windows YY into 1980-2079; so will now err on boot
2094-02-06 Sat - CCSDS 32-bit time code overflow 06:28:16 TAI, 2^32 seconds from 1958-01-01 (q.v.)
2096-01-01 Sun - As 2060, but for two Hex characters 

2100-01-01 Fri - Y2.1K - will they never learn? 
    Most current PC BIOS run out of dates. 
    MS-DOS DIR renders filedate years 2100-2107 as 99. 
    Ada: package Ada.Calendar defines years as being in the range 1901..2099. 
    Many short-term Y2k fixes fail
2100.02.29 --- - Next non-existent February 29 in a year divisible by 4 ; first failure of plain "4-year" rule since 1900 
    (except for Greek Orthodox outside Greece, using Julian; and for the usual PC RTC); 
    End of 200 years of 28-year calendar repeat. Start of 100 years thereof
2100-03-01 Mon - Zeller, as 2000-03-01 

2101-01-01 Sat - POSIX.1-1996 spec bug begins to act - UTC0-to-"seconds since the Epoch" 2100 leap error
2101-01-02 Sun - and probably every 400 years after : Some VBScript DatePart give wrong ISO Week Number - see via 2007-12-31
2106-02-07 Sun - 32-bit UNIX : 2^32 seconds from 1970-01-01, unsigned time overflows @06:28:16 GMT. Slightly earlier times (4h?) may be error markers. NFS rollover 
2108-01-01 Sun - MS-DOS : 2^7 years from 1980, year field of file date overflows. Win3, Win95, etc. fail
2108-04-01 Sun - 08:04:02 - equivalent of MS-DOS ultimate datestamp $FFFFFFFF = 2107-15-31 31:63:62
2111-11-11 Wed - First zero-free YYYYMMDD in M3
2112-12-21 Wed - Doubly palindromic as DDMMYYYY
2114-10-15 Mon - Last Day (99999) for ANSI MUMPS $Horolog function customary 5-digit format.
2116-02-07 Fri - 2^32 secs from 1980-01-01 at 06:28:16
2128-01-01 Thu - EEPROM signed year rollover, Wikipedia; unsigned in 2256
2132-08-31 Sun - JD 2500000 starts at noon GMT
2132-09-01 Mon - CMJD 100000; sixth digit needed
2135-01-01 Sat - MMDCCCLXXXVIII : the Roman a.u.c. date field will be longer than ever before
2136-12-25 Tue - Newer 13-bit GPS week count first rollover, UTC ignoring omission of leap seconds (exact date uncertain)
2137-06-07 Fri - CCSDS 16-bit day code overflow, 2^16 days from 1958-01-01 (q.v.)
2147-10-28 Sat - TJD +65535 : greatest 16-bit unsigned TJD
2148-01-01 Mon - Rollover of 32-bit signed ((YYYY×100+MM)×100+DD)×100+SeqNo format, used for DNS serial numbers . Unsigned fails in AD 4295
2149-06-07 Sat - 2^16 days from 1970-01-01. Unsigned overflow?
2154-03-23 Sat - CDMA mobile phone (Americas, S Korea) system timer, 36 bits from 1980-01-06 UTC, overflows at 03:28:58.88 UTC exactly, ignoring leap seconds.
2155-12-31 Wed - Last possible "update date" for dBase format files (.dbf) : Y M D are each stored in a byte. ...
2156-01-01 Thu - "1900 + a byte" year overflow
2159-06-07 Thu - 2^16 days from 1980-01-01. MS-DOS CLOCK$: internal daycount would overflow
2173-10-14 Thu - 100000 days from 1899-12-30 

2217-09-28 Sun - CMJD 2^17; original IBM halfword MJD use would fail
2239-09-29 Sun - Y6k Jewish, at sunset. Tishri 1 (Rosh Hashanah), 6000. Messiah expected, now or before
2247-01-01 Fri - Y3K a.u.c. starts (but on which exact date?)
2248-06-03 Sat - Risc OS / NC OS / ARM time rollover at 06:57:57.76 : unsigned 2^40 centiseconds from 1900-01-01 00:00:00. $0000000000, $FFFFFFFFFF may be markers.
2256-01-01 Tue - see 2128
2260-01-01 Sun - The trick of using a two-character year representation with the first character alphanumeric fails today (98,99,A0,A1..Z9); used on HP3000
2286-11-20 Sat - UNIX time_t 10 Gs from 1970, at 17:46:40 GMT. JavaScript 10 Tms
2400-02-29 Tue - Will exist - "100-year" rule overridden
2433-04-30 Sat - Last valid day for MMMM-DD notation based on 1600. I hear that MMMM-DD is sometimes used where YY-* will not serve. Also 2633, 2733 

2576-08-08 Thu - CMJD 2^18; see 2217
2698-04-24 Sun - Last Gregorian Easter on the same day as Julian Easter (/04/06) of the same-numbered year
2738-11-28 Mon - Day One Million A.D. (approx)
2800-02-29 Tue - First Leap Day difference between Gregorian and Greek Greek Orthodox
2877-03-21 Sun - On proposed Aleppo rules, first March 21 Easter; -03-21 is impossible on Gregorian rules - see Note 23
2888-01-01 Thu - MMDCCCLXXXVIII : the Roman A.D. date field will be longer than ever before - 14 characters (1888 first to need 13; 3888 first to need 15; cvt_rome.pas)
2900-01-01 Fri - (Year-1900) exceeds %3d
2999-01-01 Tue - Windows CE FAT fails 

3001-01-01 Thu - gmtime() localtime() functions in Visual C++ 2008 fail
3003-03-30 Wed - Doubly palindromic as DDMMYYYY
3111-11-11 Sat - All digits odd, first since 1999-11-19; cf. 0888-08-28, 2000-02-02
3173-10-13 Sat - Another Mayan Long Count end; world re-created
3199-12-31 Fri - Quattro Pro last day.
3268/01/01 Sun - (Julian date - 3268-01-23 Gregorian) start of Second Julian Period - see Calendar FAQ, and Peter Meyer. 28×19×15 years from JD 0 (Solar Cycle × Metonic Cycle × Roman Indiction)
3400-01-01 Wed - Microsoft's Visual Studio documentation: Jet database engine GUIDs algorithm avoids duplicates until AD 3400. (AD 1582-10-15 + 2^59×0.1 µs = Sat, AD 3409-07-08 22:40:30.3423488 ; perhaps should be AD 1582-10-15 + 2^60×0.1 µs = Mon, AD 5336-03-31 21:21:00.6846976)
3800-01-01 Wed - (Year mod 1900) diverges from (Year-1900)
3999-12-31 Fri - Last Day for some systems 

4000-01-01 Sat - Roman year number is ill-understood after MMMCMXCIX
4000-02-29 Tue - Will occur, on the Gregorian calendar. I believe that 4000 was not going to be Leap in the USSR, and proposed not in Revolutionary France. The Greek Orthodox will agree with that, for different reasons
4047-01-01 Tue - As 2147, but for 1900-biased YYYY
4082-12-31 Thu - Last valid date according to a Y2k Glossary (first seen at NIST?); 1582+2500 & Gregorian Calendar error is about 1 day in 2500 years !!
4095-12-31 Sat - MS Word WordBasic date limit
4200-01-01 Wed - Gregorian Easter algorithms containing Year/300 or centade/3 are invalid from here - Zeller
4295-01-01 Tue - ??? BIND DNS serial number, YYYYMMDDxx, stored as 32-bit unsigned, wraps today: 2^32 = 4294 96 72 96,
4338-11-28 Mon - Cobol-85 Integer day 1000000 - exceeds 6-digit field
4500-09-01 Wed - Reported that the observed date limit for MS Outlook 2003 is about here
4501-01-01 Sat - 08:00:00 is reportedly a default date-time in Microsoft Outlook '98. End of Outlook Calendar
4712-12-31 Tue - Limit of Oracle?
4772-10-13 Fri - Completion of Mayan Great Cycle
5138-11-16 Wed - UNIX time_t 100 Gs from 1970, at 09:46:40 GMT. JavaScript 100 Tms
5336-03-31 Sat - see 3400-01-01
6053-01-23 Thu - @ 02:08, 2^31 minutes from 1970-01-01
9006-04-20 Sun - First Easter date for which Knuth's code  has a problem with Epact : J D McC
9999-01-01 Fri - HTTP cacheing fails (or at year's end???)
9999-12-31 Fri - Last date for VBScript, etc.
9999-999   --- - (etc.) a marker date ; = 10001-09-25
9999-99-99 --- - (etc.) a marker date ; = 10007-06-07. 

10000-01-01 Sat - Y10K - no - many problems recur - e.g. UNIX (etc.) ASCII runs out of YYYY, internal ".DBF" format fails?, PC RTC "century" CCYY rollover to 0000
10136-02-16 Thu - @ 04:16, 2^32 minutes from 1970-01-01
20010-??-?? ??? - An easy mistake for "2010", apparently
20874-05-01 Tue - In Y-M-D form, Islamic (A.H.) and Gregorian (A.D.) dates agree only from 20874-05-01 to 20874-05-30, after which the A.H. figures are the larger (subject to month-start uncertainty)
22666-12-20 Thu - CJD 10000000 (1E7) - JD 10000000 (1E7), from noon GMT
24867-03-24 Thu - 2^23 days from 1899-12-31 (ICL George 3 - the ICL 1900 was 24-bit; date error?)
24925-03-25 Sun - CCSDS 24-bit day code MSB sets, 2^23 days from 1958-01-01 (q.v.)
29228-09-14 Thu - at 02:48:05.4775808, 2^63 × 100 ns from 0001-01-01.0, .NET epoch
29601-01-01 Mon - Now or next year,
29602-01-01 Tue - Microsoft Windows NT file system (NTFS) fails
29940-##-## ??? - New Apple Macs' signed 64-bit time fails (OK since BC 30081)
30828-09-14 Thu - Win32, NT : signed (63-bit) time rollover at 02:48:05 (100 ns from 1601-01-01, assumed Gregorian)
31086-07-31 Sat - The internal DEC VMS time fails at 02:48:05.47. 2^63×100 ns from MJD 0. SLAC
32132-##-## ??? - Limit of my dateprox.pas about now; my longcalc.pas continues .... 
Dates from here may be less reliable :-
32768-01-01 Mon - Start of Year 2^15, 16-bit signed integer limit
33658-09-27 Fri - UNIX time_t 1 Ts from 1970, at 01:46:40 GMT. JavaScript 1 Pms
34668-01-01 Wed - (Year-1900) + 2^15; 16-bit struct tm's tm_year fails
38434-08-17 Thu - IBM 370 STCKE instruction latest possible rollover @21:30:06.846976 GMT. 1900-01-01 + 2^60 µs
60056-05-28 Sun - Win32, NT : 64-bit time fails at 05:36:10 (100 ns from 1601-01-01, assumed Gregorian)
65536-01-01 Wed - 16-bit year code overflows, e.g. CCSDS 

269078-08-08 Thu - JD 100000000 (1E8), from noon GMT
275760-09-13 Sat - +1E8 days from 1970-01-01 : JavaScript Date Object upper limit; lower limit is -1E8, -271821.04.20 Tue
685720-11-04 Mon - Second complete cycle of the Jewish Calendar starts about now 

2733194-11-28 Mon - JD 1000000000 (1E9), from noon GMT
5874898-06-05 Thu - JD 2^31; 32-bit longint(JD) fails
5879611-07-12 Tue - Day 2^31, if 0001-01-01 Gregorian is Day 1
5881469-05-28 Fri - CMJD 2^31; 32-bit longint(CMJD) fails 

11754508-12-14 Fri - JD 2^32, from noon GMT
27374357-12-21 Sat - JD 10000000000 (1E10), from noon GMT
3E08 approx. - Java time fails - (64-bit signed milliseconds from 1970) - AD 292,278,994-08-17 Sun 07:12:55.808 GMT
2147483648-01-01 Wed - Start of Year 2^31, 32-bit signed integer limit
3E11 approx. - UNIX 64-bit signed time_t fails (seconds from 1970) - AD 292,277,026,596-12-04 Sun 15:30:08 GMT (checked)
6E11 approx. - Tower of Hanoi completed (at one ring per second) : world ends (again)
5E16 approx. - AD 50,505,469,855,528,397-01-15 Wed, JD 2^64, from noon GMT
5E30 approx. - AD 5,391,559,471,918,239,497,011,222,876,596-04-18 Mon 16:02:08 GMT, UNIX 128-bit signed time_t fails
2E69 approx. - AD 1,834,652,618,499,343,590,337,415,746,119,712,509,834,124,421,548,072,260,582,352,567,003,896-01-25 17:06:08 GMT, UNIX 256-bit signed time_t fails. A Saturday
3.1...E19720 - 31...188450-03-24 Thu 09:06:08 GMT - UNIX 65536-bit signed time_t fails
2^1E80 approx. - As there are only about 1E80 particles in the observable universe, it has by now become impossible to write the date
Notes

0 :-
To determine CMJD and/or Day-of-Week, see "mjd_date", "bat_date", "nowminus", and "dateprox" in my programs directory; "longcalc", which works in wide-range exact integer seconds, can be used for dates after Y32k; see also Zeller. For a JavaScript calendar, JavaScript Calendars and Clocks.
1 :-
"These are machines built by Apollo Computer, running the DomainOS operating system (DomainOS is Not Unix, BTW). The fail date is 14:59 GMT November 2, 1997. At that time, the highest bit of the 32-bit system clock value will go to '1'. Some functions may treat this a signed integer, and will give erroneous values if they use subtraction to calculate elapsed time." 
    http://www.mitre.org/research/cots/APOLLO_PROBLEM.html 
    http://www.mitre.org/tech/y2k/docs/DATES.html 
    http://www.InterWorks.org/Tech/apollonov2/ 
Thread "Hp's Computers" in news:comp.software.year-2000, Oct'97. 
E-mail 2001-04-19 - these are really Apollo machines, from before the HP takeover in 1998. Good patch info from Jim Rees; 1997-11-02 14:59 is an erroneous 31-bit rollover; the genuine 32-bit one is at 2015-09-05 05:58.
2 :-
This set is largely derived from Randall Bart :- Erroneous date-form is longer than ever before - field overflow is possible - null-terminated strings may lose termination. Date-form occurs when (Year-1900) is printed with %d, %2d or equivalent, and Year>1999; the "19" may be implicit or explicit; leading zero may be truncated. Date strings are here in UK D/M/Y order, or Ordinal Date Y-D. Note 3.
????-??-?? - The day on which "YY" is changed to "YYYY"
2000-01-01 - "01/01/100" - N.B. UNIX tm-year is (Year-1900). 
2000-01-01 - "100-001" - (YY overflow & %3d daycount).
2000-01-05 - "Wednesday, 05/01/100"
2000-01-10 - "10/01/100" (format string "%d/%2d/%2d")
2000-01-12 - "Wednesday, 12/01/100"
2000-04-09 - "100-100" (YY overflow & %d daycount)
2000-09-01 - "01 September 19100"
2000-09-06 - "Wednesday, 06 September 19100"
2000-09-10 - "10 September 19100"
2000-09-13 - "Wednesday, 13 September 19100"
2000-09-27 - "Twenty-seventh [of] September 19100"
2000-10-01 - "01/10/100" (format string "%2d/%d/%2d")
2000-10-04 - "Wednesday, 04/10/100"
2000-10-10 - "10/10/100"
2000-10-11 - "Wednesday, 11/10/100"
In languages other than English ... 
These may occur in 1999, if the date format has been changed from YY to YYYY.
3 :-
If in conjunction with time as %d:%d:%d, full length is not achieved until mid-morning.
4 :-
And non-UNIX 32-bit or compatible C/C++ libraries, etc., which means that the bug can appear in, for example, DOS programs; I may have found it in ZIP.EXE, from ZIP22X.EXE, from Info-Zip via FTP sites. It's been reported in Microsoft MFC CTime class. It's been seen in control software. It's alleged in Word Perfect 6.1 (for ?). In UNIX, 03:14:08 is GMT/UTC; in DOS/Win3/Win9x, it's local time.
5 :-
Unisys A Series system date, various possible year overflows in 1987, 2003, 2036.
6 :-
Microsoft's help file: "mktime handles dates in any time zone from midnight, January 1, 1970, to midnight, February 5, 2036."
7 :-
In 2000 .. 2009, code using  'printf("Year=%d", yy)'  will print 0 .. 9 rather than 00 .. 09; so  'printf("Year=%d%d", cc, yy)'  will print 200 .. 209.
8 :-
Code using %2d to write tm_year = Year-1900 to a string, then moving the first two characters to a print field, will in 2000-9 give 10, 2010-9 give 11, ...
9 :-
Moving yyyy mod 100 (as opposed to yyyy - 1900) into a string with %d format will in 200X give an X followed by an unmodified byte.
10 :-
Graham E. Kinns wrote (Jul 98) : SNews has a severe 9th Sep 2001 problem when the decimal representation of time_t rolls from 9 to 10 digits, breaking the fixed format of the .idx files :(    I believe the same applies to NewsWin. 
Richard Clayton wrote in article <+ypcqNIrBmY4EAt2@turnpike.com> of Thu, 23 Dec 1999 17:48:27 in news:demon.ip.support.pc that the new SNews 1.31 fixes this. 

Philip Guenther (mail, Apr 2001) reports that "maildir" mail format usually includes the time_t value in decimal at the start of the filename, and that this is often used for sorting; mis-sorts expected from Sep 9.
11 :-
"Both localtime() & time() are Perl equivalents of the corresponding C functions and use them internally. But what most Perl programmers probably do not know is that time(3c) will return (( time_t )-1) if it fails for any reason, so localtime(-1) will happily return a formatted date string for 'Wednesday December 31, 1969'." Risks Digest 19.88/7.
12 :-
It's suggested that 2000.01.00 may lock Pentiums up irrevocably.
13 :-
Calendars, January 1900 and 2000 :-
        1   2   3   4   5   6   7   8   9   10 ...
1900 : Mon Tue Wed Thu Fri Sat Sun Mon Tue Wed ...
2000 : Sat Sun Mon Tue Wed Thu Fri Sat Sun Mon ...
Systems that fell back a century therefore have the weekends two days early. 
They will also have Summer Time and many Church and secular holidays wrong. 
Beware of automatic controls.

14 :-
UK and foreign general holidays near Y2k: my best estimate so far; most foreign ones were guessed only (RSVP) :-
---------------------- 1999 ---------------   ----------- 2000 ------
Dec:  22  23  24  25  26  27  28  29  30  31, Jan: 01  02  03  04  05
     Wed Thu Fri Sat Sun Mon Tue Wed Thu Fri      Sat Sun Mon Tue Wed

E+W:  W   W  1/2 w/e w/e Hol Hol  W   W  Hol      w/e w/e Hol  W   W
NI :                                  <--- as E+W ? --->
Sco:  W   W   W  w/e w/e Hol Hol  W   W  Hol      w/e w/e Hol Hol  W

Irl:  W   W  1/2 w/e w/e Hol Hol  W   W   W       w/e w/e Hol  W   W

NL :  W   W   W  w/e w/e  W   W   W   W   W       w/e w/e  W   W   W

EU :  W   W   ?  w/e w/e  W?  W?  W   W   W       w/e w/e  W   W   W

Can:  W   W  1/2 w/e w/e Hol Hol  W   W   W       w/e w/e Hol  W   W
USA:  W   W* Hol w/e w/e  W*  W   W   W  Hol      w/e w/e  W   W   W

ISO: ----- Week 51 -----|----------- Week 52 ------------|--- Week 1 ---
1999-09-06 : Updated, esp. Sco, from 1999-2000 IoP diary. 
W/h:   Working day, though half-holiday for many. 
"Holidays aren't uniform over Scotland - different places have different odd days here and there, but over the new year period they are relatively standard". 
*   "In the USA, banks and exchanges will open Dec 23 and 27, but either may be a state or local holiday in some locales. Some companies will be closed."   URL? 
*   See also Annual Holiday Dates.

15 :-
I hear that in Motorola's VERSAdos Multi-tasking Operating System (UNIX look-alike), at 31 December 2043, the system clock rolls-over to 1 January 1980, because the 'Telefile' Time/Date 4 byte (32 bit) format is used, where the MSB 6 bits are used for years from 1980 (i.e. 1980 + 0 - 63 years expires at 2043).   (Telefile format : y6 m4 d5 h5 m6 s6) 

This probably obscure operating system is still used by a 1980's developed SCADA system from Leeds & Northrup (Australia) Pty Ltd of Sydney (now Foxboro-LN Pty Ltd of Sydney), their LN2068 SCADA System (or LN700 in USA). It is the current SCADA system used by a number of power utilities in Australia and New Zealand, Asia and USA.
16 :-
Note that it will be Shabbat from before dusk 1999-12-31 to after dusk 2000-01-01. One should not expect observant Jews to want to participate either in program remediation or in Gentile celebration during that period (they're probably unenthusiastic about the whole affair, anyway). Also, they should consider reading 2000-04-30 above as 2000-03-31.
17 :-
The predicted Sunspot count peak was essentially flat over several months. Radio noise may affect communications. Geomagnetic storms may affect the National Grid. Solar flares peak probably within 2000..2002. 
Monash, 1997-04-10? : "If current projections are correct, the sunspot maximum is currently estimated to peak in March of the year 2000. It must be noted, however, that predicting the month of maximum is even less certain than the sunspot number. The actual month of sunspot maximum could be as early as January 1999 or as late as June, 2001." 
Harjit S. Ahluwalia, for 1998-04-03 : Abstract : The Planetary Index Ap, Ohl's Conjecture and the Predicted Size of Solar Cycle 23.
18 :-
I have seen a report that : Digital Unix had a bug where a timespec value (seconds and nanoseconds) was being checked to make sure the nanoseconds field wasn't more than 1 billion; instead, it was checking the seconds field, and as we hit the (Unix epoch) 1 billion second mark in 2001, the check would erroneously indicate it was invalid. (On the "documentation CD-ROM that came with Digital Unix 4.0D"; other Y2k errors were also fixed.)
19 :-
A system which is at the last valid day of any month MUST roll over at midnight to the first day of the next month. It SHOULD NOT (but, I think, not MUST NOT) be possible to set to a day in any month after the last valid day (and likewise before the first), and a system SHOULD if possible be designed not to allow this; but, if such a setting has been made, it is not at all clear what the setting should become at subsequent midnights - it's unlikely to be right, anyway, and it may be better to leave the error blatant and unambiguous by just incrementing the day field.
20 :-
The exact interpretation of the sources, and its representation on the Gregorian scale, are not necessarily always agreed. 

Anno Mundi started on BC 3761/10/07 Monday (beginning at the previous Sunset [in Jerusalem] or 6 p.m.), Julian Calendar. 
Whitaker's Almanac (1989; Pocket 2000) gives the epoch for chronology as Oct 7, 3761 BC. I make that CMJD -2052003, BC 3761 09 07 Gregorian, Monday. It is numbered as Day 2. 
Remy Landau's Hebrew Calendar site; be careful with its notation (Proleptic Gregorian Astronomical), particularly before AD 1. My The Hebrew Calendar.
21 :-
(1) At NIST, USA : Ancient Calendars (a few pages), and From Sundials To Atomic Clocks (26MB PDF). 
(2) At webexhibits, via Calendars through the Ages, 
& Doggett, Calendars. 
(3) At ScienceWorld : Weisstein. 
(4) Thor Heyerdahl, Early Man and the Ocean, ISBN 0 04 572022 3, p.335 : "The zero date 4 Ahau 2 Cumhu .. our system .. 12 August 3113 BC". Gregorian?
22 :-
According to James Ussher, Anglican Archbishop of Armagh (1581-1656) in a posthumous edition (of Annales veteris testamenti a prima mundi origine deducti, 1650), The Annals of the World, iv, of 1658 : the Creation of the World occurred at the Equinox in October of BC 4004 (Julian). Note that Ussher seems, like others, to consider the evening of a day to be what we would now call the previous evening. 

Ussher wrote : ... from the evening ushering in the first day of the World, to that midnight which began the first day of the Christian era, there was 4003 years, seventy days, and six temporarie hours - and AD 0001-01-01 0h minus 4003y 70d 6h is BC 4004-10-22 18h, i.e. 6 p.m. of Saturday 22nd October, BC 4004. That makes the first full day Sunday 23rd (Genesis, 1,5; the seventh day, of rest, is the Jewish Sabbath). Garden of Eden Time, presumably. 

The date and time are often misquoted as the 23rd or 26th, and as 9 a.m. 

The date, or the year, is often given in old Bibles : _ _ _
23 :-
World Council of Churches (Aleppo 1997), Towards a Common Date of Easter - also see Claus Tøndering's Calendar FAQ, and The Date of Easter Sunday
Coda

Doubtless I've missed a lot ... Leap seconds may be omitted above. Each "999" problem may be accompanied by a "1000" problem, and so on. For over three decades after 2000, it will not be possible to discriminate between YY/MM/DD and DD/MM/YY by inspection.

Cory Hamasaki (kiyoinc@ibm.net) wrote: 
"... EXPDT=98000 or EXPDT=99000 or EXPDT=99365 which are fun dates, ..." which I think are specials in an expiry date field on some misbegotten systems ...

Also critical - the start of any regular period which first includes 2000 (the Jo Anne Effect) - for example corporate FY 1999-07-01..2000-06-30; or includes 1999. Note that while the UK national FY starts on April 6th, UK companies can choose their own FY, and I understand an April 1st start is common. Also that some bodies number their FY with its start year, some with its end year; the rational ones will, unless starting on Jan 1, use for example 1998-99 or 1999-2000 - which is a longer string.

When checking, verify Day-of-Week, especially across the Feb-Mar transitions, and at the ends of 2000.

Foreigners, beware side-effects of peculiar calendars, and North-South differences. Summer Time (Daylight Saving Time, DST) rules mean that time errors may arise from Date or Day-of-Week errors.

Any other date which used to seem far in the future (or past) may have been used as a "special" marker. Consider YY/MM/DD with YY=MM=DD≤12.

For many dates bearing an arithmetical relationship with the start of 2000, there may be corresponding problems with dates bearing the same relationship with 2038-01-19 (or other range-end dates) - cf. 2008-01-19.

Failure Modes

At MSU.

Repeated Risks

Some listed here as Y2k hay have correponding Y2038 risks.

Y2k-Type

20#0-01-01 - Likely date windowing critical points.
2000-01-(01-M) - M days to 2000, for any special short-term M (30 days, ...).
####-01-01 - N years to/from 2000 - possible problems with N-year subscriptions.
####-##-## - N years to/from your FY 2000 - fiscal year 2000 (Jo Anne effect).
ANY date with a memorable pattern early or late in the 1900's/2000's may have been chosen in the past as a "signal" date.
In fact, any digit or field rollover may fail; I have read of an OS that, at midnight, rolled the last digit of the 9th, 19th, 29th of the month from "9" to "A".
TJD = 0 recurs every ten kilodays from 1968-05-24.
Leaps in Date/Time

Leap Years - Any ####-02-29 and the following ####-03-01 and ####-12-31 (Day 366). Digital watches, etc., may need a 1-day adjustment - check date and day-of-week.
Leap Seconds; Risks Digest 24.02/9.
PC Time Dilation.
Summer Time

Summer Time - BST/DST - Daylight Saving Time :-

Alterations, temporary or permanent, in Rules may cause difficulty or confusion; the US has new Rules from 2007.
Misunderstandings, of Rules may occur; the US 2007 change has been described as "Spring, 3 weeks earlier", which is true in 2007, but only in 3 years out of 7.
Spring :-
Clocks go forward in EU & NA (and ZA, AU, NZ, etc., ?).
One hour's worth of civil time is omitted, timed events may be skipped.
EU-NA time differences change, previously for about a week, but for three or four weeks from 2007; beware auto-changers.
Spring And Autumn :-
North-South time differences change, perhaps twice.
Brief time difference changes occur within NA; their zones ripple-change at 0200h clock time, whereas all EU changes simultaneously at 0100h GMT.
The USA clock change is at 0200h clock time, the UK at 0100h GMT; so do not be surprised if systems change an hour late. My Win98 1st Edn + MSIE 4 changed at 0200h GMT, as was shown by JavaScript Calendars and Clocks.
See 2001-04-01 - the effect probably repeated, on average, every seven years.
Dual-boot systems may dual-change.
Beware possible effects on apparent Windows file timestamps; Risks Digest 22.35/10.
Autumn :-
Clocks go back in EU & NA (and ZA, AU, NZ, etc., ?).
One hour's worth of civil time is repeated, timed events may be duplicated. VCRs (Risks Digest 19.43, #11/19), ATMs (ibid. #12/19), birth times (RD 24.92 #9/13), ... can get confused.
EU-NA time differences change, currently for a few hours.   
AIUI, the first version of Windows 95 (cf. ibid. 13,14/19) sets the clock back whenever it thinks that the clock has reached 2 a.m. on the day in question, not just on the first occasion.
Reported that some Windows 95 applied out-of-date EU/CET Autumn rules.
UNIX CRON is OK; periodic jobs should not be controlled by local time. Or should they?
Year Rollover

Old DOS GAWK and C Library week numbers - see 2002-12-30 and Batch; affects many years.

Apparently, systems for NASA's shuttles may have inadequate provision for the Year Number to change during flight, so that 2007-01-01 would be 2006-366 - "YERO (Year End Rollover)".

Easter

In some countries, the dates of certain public holidays are governed by that of Easter Sunday. Problems may occur when those coincide with other important dates, such as the beginning or end of a financial year.

Other faiths may give similar problems.

Appointments Scheduling

Some "Diary" software is wrongly influenced by Summer Time or Time Zone, using absolute where it should use local, or vice versa. A regular 0900h meeting in Mar-Apr may shift to 0800h. A Londoner, having entered a meeting for 1000h in Paris, may find on arrival that it is now listed as at 1100h. It is unsafe to rely, in today's world, on a time of dubious offset from GMT.

Specific Systems

HMG Red Tape Change Days, April 6 & October 1.
GPS rollover every 1024 weeks, less LeapSecs.
VMS TODR clock needs annual re-basing before 466 days (2^32 × 10 ms) from previous Jan 1st, or next reboot will hiccup. "Information about the VMS TODR (time of day register) problem is in section 20.5.2.1 of the OpenVMS System Manager's Manual".
Windows 98 - any year/day end - The Sunday Times and the BBC report that, at the end of each year, Windows 98 gains two days or loses one. Microsoft agreed saying that this only occurs if Windows 98 is started within a particular but defined second of the last minute of the year; a fix is being developed. See here? But Risks Digest 19.92 #11 says that it can occur any day, if one boots during a critical five seconds near midnight.
Some Microsoft Outlook Calendars have holidays such as US Memorial Day, UK Spring Bank Holiday, UK Late Summer Holiday on the fourth Monday of the month, rather than on the last one as it should be - so being a week early three years in seven. See 1999 above; I only give samples.
Reported that UNIX systems often contain that "Fourth-is-Last" error.
Reported that the Delphi IDE may misjudge file state if the state of Summer Time changes during use. Other IDEs, etc.?
Periodic Events

Critical Periods

In general, these may start, and therefore finish, at any time. They are based on counting in units of time : note that it is not uncommon to count in fractional units, such as tenths of a second.

While not necessarily significantly repetitive, a system with an uninitialised or mis-set calendar or clock may reach a significant moment, Y2k or otherwise, at any time.

Preferred financial periods are likely to be country-dependent - 40-year term loans, 30, 25, 20-year mortgages, etc.

Multiples of Units of Time
Years	Days	hh:mm:ss.sss	Duration	Text	##
-	-	09:06:08	2^15 seconds	Signed WORD wraps	1
-	-	18:12:16	2^16 seconds	Unsigned WORD wraps	2
-	24.85	20:31:23.648	2^31 milliseconds	Signed DWORD wraps	3
-	49.71	17:02:47.296	2^32 milliseconds	Unsigned DWORD wraps	4
-	248.55	13:13:56.480	2^31 centiseconds	Solaris; Galaxy?	5
4.91	1762.0	00:00:00	2^8 weeks	GPS rollover	6
31.90	11650.8	20:16:00	2^24 minutes		7
68.05	-	03:14:08	2^31 seconds	Signed time_t wraps	8
136.10	-	06:28:16	2^32 seconds	Unsigned time_t wraps	9
179.43	65536.0	00:00:00	2^16 days		10
1. -
2. -
3. Windows GetTickCount is a DWORD of milliseconds from boot.
4. Windows GetTickCount. Also used in Internet RFCs. 
According to Microsoft, Windows 95/98 could [Q216641] hang; VTDAPI.VXD needs fixing. The problem apparently was fixed in Windows 98 Second Edition and in Windows Millennium. (see Risks Digest 23.53/1,2,3)
5. Report seen : Solaris 2.x hangs when lbolt, which is zeroed at boot and increments every centisecond, flips its MSB. Sun bug ref is 4032974; fixed in 2.6, patches for earlier 2.x. 
Also reported - and denied (see Risks Digest 19.93) - that this failure, in the ground controls, killed the Galaxy IV "pager" satellite in May 1998.
6. GPS. See 2003-11-28 above.
7. -
8. -
9. -
10. -
Other Periods

These may be of interest, but are unlikely to be of much technical importance.

8 years : (octaeteris Lunar Cycle) - phases of Moon repeat, approximately - 8×12+3 = 99 lunar months
15 years : Roman Indiction (fiscal)
19 years : (Metonic/Lunar Cycle) - phases of Moon repeat, approximately - 19×12+7 = 235 lunar months
28 years : Julian Calendar (Solar Cycle) - days repeat
50 years : Biblical Jubilee - 7×7+1 or 3×3 + 4×4 + 5×5 years
400 years : Gregorian Calendar - days repeat
532 years : Julian Easter (19×28) - repeats. "Great Paschal Cycle", "Dionysian Cycle", "Victorian Cycle"
2880000 days (20×20×20×18×20) : Mayan Long Count - c. 7885.63 years
7980 years : Julian Period (15×19×28)
49033 years (approx) : Julian/Gregorian seasons match
689472 Hebrew years : Calendar repeats (36288×19)
5700000 years : Gregorian Easter (19×25×30×400) - repeats
39900000 years : Combined Julian & Gregorian Easter?
5255890855047 days = 14390140400 years Gregorian = 14389970112 years Hebrew - Dual Secular (no Easter) calendar repeats ?
74896444684419750 days = 205059500700000 years Gregorian = 205057074096000 years Hebrew - Dual Religious (Easter) calendar repeats ?
Home Page
Mail: no HTML
© Dr J R Stockton, near London, UK. 
All Rights Reserved.
These pages are tested mainly with Firefox and W3's Tidy. 
This site, http://www.merlyn.demon.co.uk/, is maintained by me.
Head.


Yours
---
Paul Brian
paul@mikadosoftware.com
07540456115
@lifeisstillgood----------------------------------------
----------------------------------------
book

https://www.oii.ox.ac.uk/blog/the-blockchain-paradox-why-distributed-ledger-technologies-may-do-little-to-transform-the-economy/

- agree on schemas???
- agree on which to use
-- 
Paul Brian
paul@mikadosoftware.com
07540 456 115
twitter: @lifeisstillgood
skype: paul.mikadosoftware
----------------------------------------
----------------------------------------
Re: book ideas

book
the design of organisations matters
- reverse conway's law and two pizza team
- two pizza team and coase theory ofnform
- coase theory of firm and ???

Yours
---
Paul Brian
paul@mikadosoftware.com
07540456115
@lifeisstillgood

> On 18 Oct 2017, at 09:49, Paul Brian <paul@mikadosoftware.com> wrote:
> 
> trade off between innovation of square / bazaar and direction command reaction - order - of hierarchy 
> 
> networks both cases 
> 
> but there are choices where network chooses to defer to hierarchy
> 
> it's the defence against fake news - what truth is there to this
> 
> david avocado defence
> 
> we choose to enforce certain 
> 
> view a network as a RNN
> and so what we believe can be chosen by reinforcement - chosen by which reinforcement models we subscribe to
> 
> Yours
> ---
> Paul Brian
> paul@mikadosoftware.com
> 07540456115
> @lifeisstillgood
> 
>> On 18 Oct 2017, at 09:24, Paul Brian <paul@mikadosoftware.com> wrote:
>> 
>> death of bypass
>> 
>> dictator and social network 
>> square and tower - but temporary rowe r in time of need 
>> 
>> Yours
>> ---
>> Paul Brian
>> paul@mikadosoftware.com
>> 07540456115
>> @lifeisstillgood
----------------------------------------
----------------------------------------
book

shared story
https://zwischenzugs.wordpress.com/2017/10/15/my-20-year-experience-of-software-development-methodologies/

so ... what is the story of the business we are in - and how do we optimise

also what is programming ? for computers easy, for humans it's stories - and path least resistance

becomingnautomation is the thing we need - fast feedback 

Yours
---
Paul Brian
paul@mikadosoftware.com
07540456115
@lifeisstillgood----------------------------------------
----------------------------------------
Re: book

coase and the new parameters of the theory of the firm

conway's law has impact in reverse - the much vaunted "two pizza" team is a short hand way of discussing micro services based software architecture- but it starts to force changes to the 

working in a large bank the most noticeable thing is the lack of people and time - they may be vast well funded employers but they are doing so much that there are never enough people to go round (yes of course the seemingly unnecessary bureaucracy slows things down)

so what is preventing these productive valuable micro-teams from
simply
leaving setting up on their own and selling back to the company. that's pretty much where they are 


- unix philosophy 


the issue is coase - there is a tension / balance between market based contracting and the internal cost of allocating resources.

but this is changing now - the teams are being converted away from the monolith and into micro-servo e teams 

the biggest cost is access to internal data.  and more and more of that is being pushed externally.  finance data and facebook/google data

finance data - banks internally track vast vast numbers of transactions - and each bank views a transaction slightly differently (one bank selling an option on a stock might see it as a revenue 
when you add in the cost that those stocks or cash might be needed next month to settle a deal in a totally different part of the bank you see the concerns )


google data - this is easy - it's all personal data. movement, purchase, interests, fetiches whatever. and this ought to be data that can be split up and the models run over the disparate data and still have the models accurately reinforce themselves 

as such the social cost (the less food model) is very low compared to the costs of the walled garden.

so open protocols allow facebook to simply be replaced
but open data ledgers allow teams to access the data needed 

while large capital has advantages it will
winnbut in a blockchain world dealing with a large provider simply because you know they will be around next week is less vital.  but it will never go away entirely. (how to quantify this - the month on month margin?)



Yours
---
Paul Brian
paul@mikadosoftware.com
07540456115
@lifeisstillgood

> On 11 Oct 2017, at 09:20, Paul Brian <paul@mikadosoftware.com> wrote:
> 
> organisational design !! 
> 
> anyway
> 
> the ind blowing part is the two pizza team - it implies a unix philosophy to organisational design 
> 
> and this has implications - 
> 
> why does the team (coase style) have to stay in the organisation - why not contract supply
> 
> how do we meet the needs of regulators - the design of ops and dev being separate monolithic organisations no longer meets the micro services form 
> 
> conway's law works both ways and so will force companies to provide unix like internal structure
> 
> the embedded ops team
> 
> but 24/7 ops is hard on two pizzas a so there is a scale challenge
> 
> but the real coase cost is cost of access to data.  building models based on massive data input is much much cheaper when all the data come late to you 
> 
> face book obviously a walled garden but so is google and iphone etc
> 
> but central tenet of internet is data wants to be free. 
> 
> so in the world of finance we can see the ideas of blockchain a being the external data provider - and when that happens the internal small teams will split out 
> 
> we will see industries that want to have these new efficiencies having to agree their open protocols - and then models can be trained across disparate data sets and models joined up
> 
> i see a triumph of open 
> 
> Yours
> ---
> Paul Brian
> paul@mikadosoftware.com
> 07540456115
> @lifeisstillgood
> 
>> On 11 Oct 2017, at 09:10, Paul Brian <paul@mikadosoftware.com> wrote:
>> 
>> 
>> important
>> 
>> 
>> organic stationary design as important as software design
>> 
>> amazon- twonoizza team small teams running unix philosophy internally as services
>> 
>> coase - so what's to stop those small teams being outside the company? 
>> 
>> Yours
>> ---
>> Paul Brian
>> paul@mikadosoftware.com
>> 07540456115
>> @lifeisstillgood
----------------------------------------
----------------------------------------
Book ideas Eight Things Cryptocurrency Enthusiasts Probably Won’t Tell You | Great Wall of Numbers


http://www.ofnumbers.com/2017/09/21/eight-things-cryptocurrency-enthusiasts-probably-wont-tell-you/


Yours
---
Paul Brian
paul@mikadosoftware.com
07540456115
@lifeisstillgood----------------------------------------
----------------------------------------
Book AI history

https://www.technologyreview.com/s/608911/is-ai-riding-a-one-trick-pony/

Hinton did back prop and showed in 2012 it worked in image recognition and all took off

Yours
---
Paul Brian
paul@mikadosoftware.com
07540456115
@lifeisstillgood----------------------------------------
----------------------------------------
Re: Book

So we are all oil based (or oil hostages)

And now we are seeing oil prices being forced down by competition from shale oil and fracking.  But that is only viable because of the massive QE and low interest rates post crash - and that will have to end sometime

More debt more expensive oil

It's not the end of the world but it is time to see vast infrastructure investment in renewable (non oil) sources 

Yours
---
Paul Brian
paul@mikadosoftware.com
07540456115
@lifeisstillgood

> On 14 Aug 2017, at 09:46, Paul Brian <paul@mikadosoftware.com> wrote:
> 
> Page on global geo politics
> https://itunes.apple.com/gb/podcast/talking-politics/id974670140?mt=2&i=1000389327698
> 
> New Chinese policy - one road one belt, investment in Africa. Chinese trade like British in 19C and USA 20
> 
> Iran and Saudi Arabia
> 
> Failing policies of world bank being returned to more equitable 
> 
> Economics as means of describing world 
> 
> Yours
> ---
> Paul Brian
> paul@mikadosoftware.com
> 07540456115
> @lifeisstillgood
----------------------------------------
----------------------------------------
Book

So free marketers especial in tech look for technology to solve what can also be solved through gov fiat.

But that only really happens where tech offers a solution now that is ordess magnitude more attractive

Look at housing zoning 

Yours
---
Paul Brian
paul@mikadosoftware.com
07540456115
@lifeisstillgood----------------------------------------
----------------------------------------
Book

https://epjdatascience.springeropen.com/articles/10.1140/epjds/s13688-017-0110-z

Finding depression signals with instagram posts

Yours
---
Paul Brian
paul@mikadosoftware.com
07540456115
@lifeisstillgood----------------------------------------
----------------------------------------
Re: book serverrless

Principles to serverless 

- https://redislabs.com/blog/your-cloud-cant-do-that-0-5m-ops-acid-1msec-latency/

Erlang etc: you can do much much better in your own server environment - but this is only worth doing when your business need that level of optimisation and cost - it's a prize racehorse from  a field of cattle



Yours
---
Paul Brian
paul@mikadosoftware.com
07540456115
@lifeisstillgood

> On 17 Jul 2017, at 14:56, Brian, Paul <paul.brian@baml.com> wrote:
> 
> https://thenewstack.io/five-tips-building-serverless-teams-enterprise/
>  
> --
> Paul R Brian
> Quartz Developer
> Elmfield Road, Bromley, London.
> +44 207 995 6249
> +44 7540 456 115
> paul.brian@baml.com
>  
>  
>  
> This message, and any attachments, is for the intended recipient(s) only, may contain information that is privileged, confidential and/or proprietary and subject to important terms and conditions available at http://www.bankofamerica.com/emaildisclaimer. If you are not the intended recipient, please delete this message.
----------------------------------------
----------------------------------------
Book commits and new company structure

A programmable company is one where the current decisions are encoded in software

So let's imagine we take a decision on a project - this must mean a chnage to something (else it's a rubbish decision) so we record 

- what was decided
- why it was decided
- how to judge its success

This is a series of commits / changes across the base - from change to monitoring system to commits on the codebase 

Yours
---
Paul Brian
paul@mikadosoftware.com
07540456115
@lifeisstillgood----------------------------------------
----------------------------------------
Book - programmable company conjecture

We have seen no real productivity gains in large companies (or small?) with computers

My conjecture is that they are overridden by social organisation issues

Tournament company - where many different managers try to organise same thing - many waste different cycles trying to get off ground and then one succeeds gets credit and moves up in tournament 

This is not pathological - it's common

But a programmable company ... a backlog driven company, where there is no hiding, no perverse mkt place  that will be more efficient 

Combined with coase shift in ideal sizes, we shall see reduction

Third option is size gives hiding place to financial fraud that sustains companies in giant manner



Yours
---
Paul Brian
paul@mikadosoftware.com
07540456115
@lifeisstillgood----------------------------------------
----------------------------------------
Book

Serverless makes sizing just right

- have you ever tried to persuade an enterprise to buy new server boxes.  There is a bias to not spending money cos that's all they get measured on

There is no way to prove you need that box 

All you can do is .. serverless

Yours
---
Paul Brian
paul@mikadosoftware.com
07540456115
@lifeisstillgood----------------------------------------
----------------------------------------
Re: Book

Internally it's kill all project managers - the injection into backlogs approach to initiating and managing projects

But once do that can start removing the co-ordination portions and start removing the auto stable jobs

But this leads to the architecture paradox - by having a robot do the building there is a lot more upfront work fromthe architect (coding)

And then we see the blockchain / ledger internally - which means we can provide supply chain transparency externally - finally linking the two up

Physical work and manufacturing first but actual work (see trader transparency)

It's a possible path to the future

Yours
---
Paul Brian
paul@mikadosoftware.com
07540456115
@lifeisstillgood

> On 15 Jul 2017, at 10:20, Paul Brian <paul@mikadosoftware.com> wrote:
> 
> Solow quip about productivity and computers - and possible future company structures 
> 
> Being a veggie - being superior - but still consuming other destructive things
> 
> But I don't know what is destructive
> 
> Productivity gains :
> Blockchain supply chain verifications?
> Distributed programmable company operating on blockchain supply chain workflows
> 
> This leads to open source manufacturing? Where jobs outsourced and picked up where needed. 
> 
> It's wheat growing near Chicago - near perfect competition
> 
> It's terrifying and a long way off - but we cannot stay where we are 
> 
> So where and how do we get there? 
> RFID attachments to every component / indelible barcodes and photo attached to blockchain? 
> 
> We can imagine - but can it work and can we get there? 
> 
> 
> 
> Yours
> ---
> Paul Brian
> paul@mikadosoftware.com
> 07540456115
> @lifeisstillgood
----------------------------------------
----------------------------------------
Book

Blockchain transparency in supply chains

Yours
---
Paul Brian
paul@mikadosoftware.com
07540456115
@lifeisstillgood
----------------------------------------
----------------------------------------
Book

Can a dinosaur choose it's evolution? 
How to program a company / organisation  
Machine vs programmable machine - business vs programmable machine 



Yours
---
Paul Brian
paul@mikadosoftware.com
07540456115
@lifeisstillgood
----------------------------------------
----------------------------------------
Book

But what is the next mega-platform? CV? Drones AR/VR

The serverless manual
The dev team manual
The no more project managers manual
Or rather - it's all about identifying risks, tracking them and triggering things 

Really I want company section to be

- literate 
- programmable
- implications of programmable :: 
No project managers !!  
Programmer anarchy as a form of organisation - 

Yours
---
Paul Brian
paul@mikadosoftware.com
07540456115
@lifeisstillgood----------------------------------------
----------------------------------------
Book etc

Clean up book
Design a web based system with deployments to run hackermews, and publish it ... 

Yours
---
Paul Brian
paul@mikadosoftware.com
07540456115
@lifeisstillgood----------------------------------------
----------------------------------------
Re: Here is your Bidbetter e-book download link

Sure - I will be available from about 8 though to 7ish (sadly this seems "normal" office hours these days!)

Shall I call you ?

Shall we say 11 am as a placeholder? 


Yours
---
Paul Brian
paul@mikadosoftware.com
07540456115
@lifeisstillgood

> On 13 Jun 2017, at 14:13, philip.norman@bid-better.co.uk wrote:
> 
> Hi Paul
> 
> Many thanks for completing our survey. As promised, please find below the link to download your free "Bidding after Brexit" e-book.
> 
> You can access your content any time via this link.
> 
> We hope that you find it a useful resource. If you have any questions or need more information, please don’t hesitate to get in touch. We would be more than happy to help.
> 
> Kind Regards,
> 
> The Bidbetter team
> 
> philip.norman@bid-better.co.uk
> 
> +44 (0)1202 237506 
> 
> http://bid-better.co.uk/
> 
> Follow us on twitter @Phil_Bidbetter 
----------------------------------------
----------------------------------------
book

-- 
Paul Brian
paul@mikadosoftware.com
07540 456 115
twitter: @lifeisstillgood
skype: paul.mikadosoftware
----------------------------------------
----------------------------------------
Book The hijacking flaw that lurked in Intel chips is worse than anyone thought | Ars Technica


https://arstechnica.com/security/2017/05/the-hijacking-flaw-that-lurked-in-intel-chips-is-worse-than-anyone-thought/


Yours
---
Paul Brian
paul@mikadosoftware.com
07540456115
@lifeisstillgood----------------------------------------
----------------------------------------
Book: realtime face reenactment Face2Face: Real-time Face Capture and Reenactment of RGB Videos (CVPR 2016 Oral) - YouTube


https://m.youtube.com/watch?v=ohmajJTcpNk


Yours
---
Paul Brian
paul@mikadosoftware.com
07540456115
@lifeisstillgood
----------------------------------------
----------------------------------------
Book

No strategic stuff
No grand designs
We don't know if they work in govt or bus
Just keep sharpening tools and game of inches


Yours
---
Paul Brian
paul@mikadosoftware.com
07540456115
@lifeisstillgood
----------------------------------------
----------------------------------------
Google SRE book v interesting

https://landing.google.com/sre/book/chapters/introduction.html

I have a new quote (hope is not a strategy) and halfway down the page you get "we place a cap of 50% work time on manual ops work - to leave sufficient time for engineering"

This might be an interesting book to mount a defence for say, someone tasked with building a devops team 
:-)

Hope you are feeling better 



Yours
---
Paul Brian
paul@mikadosoftware.com
07540456115
@lifeisstillgood----------------------------------------
----------------------------------------
Book and learning

By feb 28

Complete Skelton up
Complete blog for publishing parts of the book including a sign up pipeline



By my birthday
- have published software mind plus dev manual (an expanding reference)

Have a section on wsgi and building a wsgi server and how they all compare to async and http pipelining 

Have a section on ML, linear algebra

Have a section on CV?

Just keep expanding 


Yours
---
Paul Brian
paul@mikadosoftware.com
07540456115
@lifeisstillgood----------------------------------------
----------------------------------------
Todo - book / blog

- and a Pony 
Section on what foundations etc to build
- software mind
- software manual



Yours
---
Paul Brian
paul@mikadosoftware.com
07540456115
@lifeisstillgood
----------------------------------------
----------------------------------------
Book based on a True story

<div>Book based on a True story</div><div><a href="https://www.amazon.co.uk/Finding-Winnie-Story-Worlds-Famous/dp/0316324906">https://www.amazon.co.uk/Finding-Winnie-Story-Worlds-Famous/dp/0316324906</a></div><div><br></div><div>Book based on a fairy tale</div><div><a href="https://www.amazon.co.uk/Revolting-Rhymes-Dahl-Colour-Illustrated/dp/0141350377">https://www.amazon.co.uk/Revolting-Rhymes-Dahl-Colour-Illustrated/dp/0141350377</a></div><div><br></div><div><a href="https://www.booklistonline.com/Rapunzel-s-Revenge-Shannon-Hale/pid=2849095">https://www.booklistonline.com/Rapunzel-s-Revenge-Shannon-Hale/pid=2849095</a></div><div><br></div><div><br></div><div>Book published in last five years</div><a href="https://www.amazon.co.uk/d/Books/Fortunately-Milk-Neil-Gaiman/1408841797">https://www.amazon.co.uk/d/Books/Fortunately-Milk-Neil-Gaiman/1408841797</a><div><br></div><div>Book based on a topic</div><div><br></div><div><br></div><div>Non fiction book</div><div><a href="https://www.goodreads.com/book/show/6948833-pop">https://www.goodreads.com/book/show/6948833-pop</a></div><div><br></div><div><a href="https://www.goodreads.com/book/show/15818081-brave-girl">https://www.goodreads.com/book/show/15818081-brave-girl</a></div><div><br></div><div><br></div><div>Newspaper article</div><div>Times or Guardian?&nbsp;</div><div><br></div><div><br></div><div>Poetry book</div><div><a href="https://www.amazon.co.uk/Falling-up-Drawings-Shel-Silverstein/dp/0060248025">https://www.amazon.co.uk/Falling-up-Drawings-Shel-Silverstein/dp/0060248025</a></div><div><br></div><div>Now we are six</div><div><br></div><div><br></div><div><br></div><div>On a kindle</div><div>Anything&nbsp;</div><div><br></div><div><br></div><div>Book with a Persons name in the title</div><div><br></div><div><br></div><div>Book that was turned into a Film</div><div><a href="https://en.m.wikipedia.org/wiki/List_of_children%27s_books_made_into_feature_films">https://en.m.wikipedia.org/wiki/List_of_children%27s_books_made_into_feature_films</a></div><div><br></div><div>The grinch that stole Xmas?</div><div><br></div><div>Book About a famous person</div><div><a href="https://www.amazon.co.uk/d/cka/Jamie-Vardy-Nowhere-My-Story/1785034820">https://www.amazon.co.uk/d/cka/Jamie-Vardy-Nowhere-My-Story/1785034820</a></div><div><br></div><div>Oh god really. Ollie will like it ...</div><div><br></div><div><br></div><div>Book published the Year you were born</div><div><a href="https://www.amazon.co.uk/Magicians-Elephant-Kate-DiCamillo/dp/1406322512">https://www.amazon.co.uk/Magicians-Elephant-Kate-DiCamillo/dp/1406322512</a></div><div><br></div><div><a href="https://www.amazon.co.uk/London-Eye-Mystery-Siobhan-Dowd/dp/0552572314">https://www.amazon.co.uk/London-Eye-Mystery-Siobhan-Dowd/dp/0552572314</a></div><div><br></div><div><br></div><div>Book review to display</div><div><br></div><div>Character description</div><div><br></div><div>Oral book review&nbsp;</div><div><br></div><div>This list of 100 best children's books ever is comprehensive</div><div><a href="http://www.telegraph.co.uk/books/childrens-books/100-best-childrens-books-of-all-time/">http://www.telegraph.co.uk/books/childrens-books/100-best-childrens-books-of-all-time/</a></div><div><br></div><div><br></div><div><br><div><br></div><div><br></div></div>----------------------------------------
----------------------------------------
Book based on a True story

<div>Book based on a True story</div><div><a href="https://www.amazon.co.uk/Finding-Winnie-Story-Worlds-Famous/dp/0316324906">https://www.amazon.co.uk/Finding-Winnie-Story-Worlds-Famous/dp/0316324906</a></div><div><br></div><div>Book based on a fairy tale</div><div><a href="https://www.amazon.co.uk/Revolting-Rhymes-Dahl-Colour-Illustrated/dp/0141350377">https://www.amazon.co.uk/Revolting-Rhymes-Dahl-Colour-Illustrated/dp/0141350377</a></div><div><br></div><div><a href="https://www.booklistonline.com/Rapunzel-s-Revenge-Shannon-Hale/pid=2849095">https://www.booklistonline.com/Rapunzel-s-Revenge-Shannon-Hale/pid=2849095</a></div><div><br></div><div><br></div><div>Book published in last five years</div><a href="https://www.amazon.co.uk/d/Books/Fortunately-Milk-Neil-Gaiman/1408841797">https://www.amazon.co.uk/d/Books/Fortunately-Milk-Neil-Gaiman/1408841797</a><div><br></div><div>Book based on a topic</div><div><br></div><div><br></div><div>Non fiction book</div><div><a href="https://www.goodreads.com/book/show/6948833-pop">https://www.goodreads.com/book/show/6948833-pop</a></div><div><br></div><div><a href="https://www.goodreads.com/book/show/15818081-brave-girl">https://www.goodreads.com/book/show/15818081-brave-girl</a></div><div><br></div><div><br></div><div>Newspaper article</div><div>Times or Guardian?&nbsp;</div><div><br></div><div><br></div><div>Poetry book</div><div><a href="https://www.amazon.co.uk/Falling-up-Drawings-Shel-Silverstein/dp/0060248025">https://www.amazon.co.uk/Falling-up-Drawings-Shel-Silverstein/dp/0060248025</a></div><div><br></div><div>Now we are six</div><div><br></div><div><br></div><div><br></div><div>On a kindle</div><div>Anything&nbsp;</div><div><br></div><div><br></div><div>Book with a Persons name in the title</div><div><br></div><div><br></div><div>Book that was turned into a Film</div><div><a href="https://en.m.wikipedia.org/wiki/List_of_children%27s_books_made_into_feature_films">https://en.m.wikipedia.org/wiki/List_of_children%27s_books_made_into_feature_films</a></div><div><br></div><div>The grinch that stole Xmas?</div><div><br></div><div>Book About a famous person</div><div><a href="https://www.amazon.co.uk/d/cka/Jamie-Vardy-Nowhere-My-Story/1785034820">https://www.amazon.co.uk/d/cka/Jamie-Vardy-Nowhere-My-Story/1785034820</a></div><div><br></div><div>Oh god really. Ollie will like it ...</div><div><br></div><div><br></div><div>Book published the Year you were born</div><div><a href="https://www.amazon.co.uk/Magicians-Elephant-Kate-DiCamillo/dp/1406322512">https://www.amazon.co.uk/Magicians-Elephant-Kate-DiCamillo/dp/1406322512</a></div><div><br></div><div><a href="https://www.amazon.co.uk/London-Eye-Mystery-Siobhan-Dowd/dp/0552572314">https://www.amazon.co.uk/London-Eye-Mystery-Siobhan-Dowd/dp/0552572314</a></div><div><br></div><div><br></div><div>Book review to display</div><div><br></div><div>Character description</div><div><br></div><div>Oral book review&nbsp;</div><div><br></div><div><br></div><div><br></div><div><br></div><div><br><div><br></div><div><br></div></div>----------------------------------------
----------------------------------------
Book based on a True story

<div>Book based on a True story</div><div><a href="https://www.amazon.co.uk/Finding-Winnie-Story-Worlds-Famous/dp/0316324906">https://www.amazon.co.uk/Finding-Winnie-Story-Worlds-Famous/dp/0316324906</a></div><div><br></div><div>Book based on a fairy tale</div><div><a href="https://www.amazon.co.uk/Revolting-Rhymes-Dahl-Colour-Illustrated/dp/0141350377">https://www.amazon.co.uk/Revolting-Rhymes-Dahl-Colour-Illustrated/dp/0141350377</a></div><div><br></div><div><a href="https://www.booklistonline.com/Rapunzel-s-Revenge-Shannon-Hale/pid=2849095">https://www.booklistonline.com/Rapunzel-s-Revenge-Shannon-Hale/pid=2849095</a></div><div><br></div><div><br></div><div>Book published in last five years</div><a href="https://www.amazon.co.uk/d/Books/Fortunately-Milk-Neil-Gaiman/1408841797">https://www.amazon.co.uk/d/Books/Fortunately-Milk-Neil-Gaiman/1408841797</a><div><br></div><div>Book based on a topic</div><div><br></div><div><br></div><div>Non fiction book</div><div><a href="https://www.goodreads.com/book/show/6948833-pop">https://www.goodreads.com/book/show/6948833-pop</a></div><div><br></div><div><a href="https://www.goodreads.com/book/show/15818081-brave-girl">https://www.goodreads.com/book/show/15818081-brave-girl</a></div><div><br></div><div><br></div><div>Newspaper article</div><div>Times or Guardian?&nbsp;</div><div><br></div><div><br></div><div>Poetry book</div><div><a href="https://www.amazon.co.uk/Falling-up-Drawings-Shel-Silverstein/dp/0060248025">https://www.amazon.co.uk/Falling-up-Drawings-Shel-Silverstein/dp/0060248025</a></div><div><br></div><div>Now we are six</div><div><br></div><div><br></div><div><br></div><div>On a kindle</div><div>Anything&nbsp;</div><div><br></div><div><br></div><div>Book with a Persons name in the title</div><div><br></div><div><br></div><div>Book that was turned into a Film</div><div><a href="https://en.m.wikipedia.org/wiki/List_of_children%27s_books_made_into_feature_films">https://en.m.wikipedia.org/wiki/List_of_children%27s_books_made_into_feature_films</a></div><div><br></div><div>The grinch that stole Xmas?</div><div><br></div><div>Book About a famous person</div><div><br></div><div><br></div><div>Book published the Year you were born</div><div><a href="https://www.amazon.co.uk/Magicians-Elephant-Kate-DiCamillo/dp/1406322512">https://www.amazon.co.uk/Magicians-Elephant-Kate-DiCamillo/dp/1406322512</a></div><div><br></div><div><a href="https://www.amazon.co.uk/London-Eye-Mystery-Siobhan-Dowd/dp/0552572314">https://www.amazon.co.uk/London-Eye-Mystery-Siobhan-Dowd/dp/0552572314</a></div><div><br></div><div><br></div><div>Book review to display</div><div><br></div><div>Character description</div><div><br></div><div>Oral book review&nbsp;</div><div><br></div><div><br></div><div><br></div><div><br></div><div><br><div><br></div><div><br></div></div>----------------------------------------
----------------------------------------
Book based on a True story

<div>Book based on a True story</div><div><a href="https://www.amazon.co.uk/Finding-Winnie-Story-Worlds-Famous/dp/0316324906">https://www.amazon.co.uk/Finding-Winnie-Story-Worlds-Famous/dp/0316324906</a></div><div><br></div><div>Book based on a fairy tale</div><div><a href="https://www.amazon.co.uk/Revolting-Rhymes-Dahl-Colour-Illustrated/dp/0141350377">https://www.amazon.co.uk/Revolting-Rhymes-Dahl-Colour-Illustrated/dp/0141350377</a></div><div><br></div><div><a href="https://www.booklistonline.com/Rapunzel-s-Revenge-Shannon-Hale/pid=2849095">https://www.booklistonline.com/Rapunzel-s-Revenge-Shannon-Hale/pid=2849095</a></div><div><br></div><div><br></div><div>Book published in last five years</div><a href="https://www.amazon.co.uk/d/Books/Fortunately-Milk-Neil-Gaiman/1408841797">https://www.amazon.co.uk/d/Books/Fortunately-Milk-Neil-Gaiman/1408841797</a><div><br></div><div>Book based on a topic</div><div><br></div><div><br></div><div>Non fiction book</div><div><a href="https://www.goodreads.com/book/show/6948833-pop">https://www.goodreads.com/book/show/6948833-pop</a></div><div><br></div><div><a href="https://www.goodreads.com/book/show/15818081-brave-girl">https://www.goodreads.com/book/show/15818081-brave-girl</a></div><div><br></div><div><br></div><div>Newspaper article</div><div>Times or Guardian?&nbsp;</div><div><br></div><div><br></div><div>Poetry book</div><div><a href="https://www.amazon.co.uk/Falling-up-Drawings-Shel-Silverstein/dp/0060248025">https://www.amazon.co.uk/Falling-up-Drawings-Shel-Silverstein/dp/0060248025</a></div><div><br></div><div>Now we are six</div><div><br></div><div><br></div><div><br></div><div>On a kindle</div><div>Anything&nbsp;</div><div><br></div><div><br></div><div>Book with a Persons name in the title</div><div><br></div><div><br></div><div>Book that was turned into a Film</div><div><br></div><div><br></div><div>Book About a famous person</div><div><br></div><div><br></div><div>Book published the Year you were born</div><div><a href="https://www.amazon.co.uk/Magicians-Elephant-Kate-DiCamillo/dp/1406322512">https://www.amazon.co.uk/Magicians-Elephant-Kate-DiCamillo/dp/1406322512</a></div><div><br></div><div><a href="https://www.amazon.co.uk/London-Eye-Mystery-Siobhan-Dowd/dp/0552572314">https://www.amazon.co.uk/London-Eye-Mystery-Siobhan-Dowd/dp/0552572314</a></div><div><br></div><div><br></div><div>Book review to display</div><div><br></div><div>Character description</div><div><br></div><div>Oral book review&nbsp;</div><div><br></div><div><br></div><div><br></div><div><br></div><div><br><div><br></div><div><br></div></div>----------------------------------------
----------------------------------------
Book based on a True story

<div>Book based on a True story</div><div><a href="https://www.amazon.co.uk/Finding-Winnie-Story-Worlds-Famous/dp/0316324906">https://www.amazon.co.uk/Finding-Winnie-Story-Worlds-Famous/dp/0316324906</a></div><div><br></div><div>Book based on a fairy tale</div><div><a href="https://www.amazon.co.uk/Revolting-Rhymes-Dahl-Colour-Illustrated/dp/0141350377">https://www.amazon.co.uk/Revolting-Rhymes-Dahl-Colour-Illustrated/dp/0141350377</a></div><div><br></div><div>Book published in last five years</div><a href="https://www.amazon.co.uk/d/Books/Fortunately-Milk-Neil-Gaiman/1408841797">https://www.amazon.co.uk/d/Books/Fortunately-Milk-Neil-Gaiman/1408841797</a><div><br></div><div>Book based on a topic</div><div><br></div><div><br></div><div>Non fiction book</div><div><a href="https://www.goodreads.com/book/show/6948833-pop">https://www.goodreads.com/book/show/6948833-pop</a></div><div><br></div><div><a href="https://www.goodreads.com/book/show/15818081-brave-girl">https://www.goodreads.com/book/show/15818081-brave-girl</a></div><div><br></div><div><br></div><div>Newspaper article</div><div>Times or Guardian?&nbsp;</div><div><br></div><div><br></div><div>Poetry book</div><div><a href="https://www.amazon.co.uk/Falling-up-Drawings-Shel-Silverstein/dp/0060248025">https://www.amazon.co.uk/Falling-up-Drawings-Shel-Silverstein/dp/0060248025</a></div><div><br></div><div>Now we are six</div><div><br></div><div><br></div><div><br></div><div>On a kindle</div><div>Anything&nbsp;</div><div><br></div><div><br></div><div>Book with a Persons name in the title</div><div><br></div><div><br></div><div>Book that was turned into a Film</div><div><br></div><div><br></div><div>Book About a famous person</div><div><br></div><div><br></div><div>Book published the Year you were born</div><div><a href="https://www.amazon.co.uk/Magicians-Elephant-Kate-DiCamillo/dp/1406322512">https://www.amazon.co.uk/Magicians-Elephant-Kate-DiCamillo/dp/1406322512</a></div><div><br></div><div><a href="https://www.amazon.co.uk/London-Eye-Mystery-Siobhan-Dowd/dp/0552572314">https://www.amazon.co.uk/London-Eye-Mystery-Siobhan-Dowd/dp/0552572314</a></div><div><br></div><div><br></div><div>Book review to display</div><div><br></div><div>Character description</div><div><br></div><div>Oral book review&nbsp;</div><div><br></div><div><br></div><div><br></div><div><br></div><div><br><div><br></div><div><br></div></div>----------------------------------------
----------------------------------------
Book based on a True story

<div>Book based on a True story</div><div><a href="https://www.amazon.co.uk/Finding-Winnie-Story-Worlds-Famous/dp/0316324906">https://www.amazon.co.uk/Finding-Winnie-Story-Worlds-Famous/dp/0316324906</a></div><div><br></div><div>Book based on a fairy tale</div><div><a href="https://www.amazon.co.uk/Revolting-Rhymes-Dahl-Colour-Illustrated/dp/0141350377">https://www.amazon.co.uk/Revolting-Rhymes-Dahl-Colour-Illustrated/dp/0141350377</a></div><div><br></div><div>Book published in last five years</div><a href="https://www.amazon.co.uk/d/Books/Fortunately-Milk-Neil-Gaiman/1408841797">https://www.amazon.co.uk/d/Books/Fortunately-Milk-Neil-Gaiman/1408841797</a><div><br></div><div>Book based on a topic</div><div><br></div><div><br></div><div>Non fiction book</div><div><a href="https://www.goodreads.com/book/show/6948833-pop">https://www.goodreads.com/book/show/6948833-pop</a></div><div><br></div><div><a href="https://www.goodreads.com/book/show/15818081-brave-girl">https://www.goodreads.com/book/show/15818081-brave-girl</a></div><div><br></div><div><br></div><div>Newspaper article</div><div>Times or Guardian?&nbsp;</div><div><br></div><div><br></div><div>Poetry book</div><div><a href="https://www.amazon.co.uk/Falling-up-Drawings-Shel-Silverstein/dp/0060248025">https://www.amazon.co.uk/Falling-up-Drawings-Shel-Silverstein/dp/0060248025</a></div><div><br></div><div>Now we are six</div><div><br></div><div><br></div><div><br></div><div>On a kindle</div><div>Anything&nbsp;</div><div><br></div><div><br></div><div>Book with a Persons name in the title</div><div><br></div><div><br></div><div>Book that was turned into a Film</div><div><br></div><div><br></div><div>Book About a famous person</div><div><br></div><div><br></div><div>Book published the Year you were born</div><div><a href="https://www.amazon.co.uk/Magicians-Elephant-Kate-DiCamillo/dp/1406322512">https://www.amazon.co.uk/Magicians-Elephant-Kate-DiCamillo/dp/1406322512</a></div><div><br></div><div><br></div><div>Book review to display</div><div><br></div><div>Character description</div><div><br></div><div>Oral book review&nbsp;</div><div><br></div><div><br></div><div><br></div><div><br></div><div><br><div><br></div><div><br></div></div>----------------------------------------
