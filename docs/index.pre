============
Introduction
============

Organisation is hard. but the benefits immense - 8 billion on the planet
but how to organise? The human family unit has been overtaken by a meme - a cuckoo 
in the nest - that orgabisations not your family can be trusted a d treated like family

it is of course a lie - the job for life has gone. post office prosecuted 
its own emlloyees to save face over an IT failure.

this is not an action. y a few bad apples but a faikure if a org to be a family
to act in the individuals best interests.

organisations shoukd. ever come before the individual. that way madness lies.

orwell - that every organisation requires aome doublethink 
to survive - that the dossonance measures the freedom of the org - that 
the rules must now be made plain and only democractic and free organisations 
can find a way tonunwind the doublethinknand write rules 
that software demands 


* software is a new form of literacy

  literacy is a technology, as indeed is speech and perhaps thought? story of olphulla
goth germainic invents alphanet and writes it down - literacy matters as a technology the
blub paradox and software literacy - you cannot have large software literate company
without having all literate employees - its like mechanised warfare or gengis khan you can
only move the whole army when everyone is on horseback - speed of sound Implications
across board

http://scentofdawn.blogspot.com/2011/07/before-soul-dawn-helen-keller-on-her.html?m=1
humans teqch each other conciousness - we teeter on each orher 


* Companies will become programmable companies, cyborgs. - partly "Slow AI", partly
"institution" and partly "programmable machine". - We can see the differences more now -
institution has means to adjust itself - but can they do so in meaningful and deliberate
manner. To have policy and then to have policy implemented. To effect agreed change is a
*democratic effort*.#

  - the actions of the company speed up / improved but also *limited* to what the software
will allow, even if we can alter version numbers.

  - robotics as a model for companies - perception and funding

  - software guard rails - to leaser and greater extents software guides what individual
enployees can or cannot do the policy is encoded - sales discount limits, rlease appovals
etc But these are axattered and hard to extract. but they donexist reading the code,
writing the tests, putting the org in test rig allows you to doscover ans teat thise
limits, younkight be abek to do some with ai - but you can do it all now with effort and
software seeing the gilded cage? all in one enterprise language?

  - companies are *machines*. Entreprenuers build companies like inventors build machines.
They do one thing well.  COmpanies that do many things are a financial cheat - using
treasury to reduce cost of capital, see banks are a mirage.  The point is if we see them
as 'autonomous functioning machines that have role in benefiting human society' then their
position becomes clearer.  And it challenges some of assumptions of capitalism.  See
"public transport is the answer to how can uber manage"?
    

* coders are the new managers, the code is the design
  - which leads to "software is disaggregating management"

* disaggregation of management - implications - co-ordination of company is way more
effective in software, test rigs etc. - co-ordination of change is mostly politics, which
can be eitehr democratic and open or totalitarian and feudal.  I prefer one. THe bet is
one works better. - management role in deciding what to do where to go (strategy) is
limited. Thats basically eitehr built in (oil production) or its top down executive choice
or shareholder choice. - management role in operations can be large - but again this is
built and modelled.  hilarious thing on indiced demand and modelled software showing road
changes in future. THere is not a choice. - managemtn role in tactics and doctrine.  Yes -
but those are also bottom up, industry practise - see DevManual - coase and chandler views
on mgmt - simplified large company single treasury cost of capital - finance as 2(O)
function or 4(O) company operating system is not "core competancy" people try to outsource
but can work for very snall companies, medium companies isually try to customise (demon)
but at some point each compnay is many companies (do one thing well) with shared treasury
(multi prodict sales) Foss chnages the coaseing equilibrium- thats wjat we miss about foss
- everythign is a buskness operating system


Software models and dice rolls - playable democracy, communicationg via games.

Listen to
https://podcasts.apple.com/gb/podcast/three-moves-ahead/id307176617?i=1000605795748

one take away is there is andoscussion about "+25 on constructionncosts wothbthis
hardware" when playing covilisationngames.  they are referring to a shared playable model
that they have all used and its impact / relvance to rela world history (and the doctor of
military history helps) but the point is they understand the aoftware models and the flaws
in those models - now imagine companies CEOs doscussing the same models

i rmeeber being anciallry to board discussions on takeovers where my boss woukd come
outnof the days long meeting severu couple hours and adjust the big spewadsheet we had
curated thats the inefficient method - and you cannot plug realmworld metrics into
spreadsheet because the CEO probably sesigned it wrong (the exonomist folly) but when we
have a whole org test rig, we can sit modelling and simulation o top of it and it informs
our discussio  or it just helps everyone agree

and simply put when we want to see chnage we add new test or comstraint to whole org test
rig and we peg that to a telease date - that becomes the project no need for status
reports !

* democractic bet. We bet that at scale of society, and presumably at scale of large
companies that democracy long term works better. See the elites view on Sparta.

* FOSS - if marginal cost of software writing is essentically Ramen, then the choice for
who works on your software is mission.  If your mission is inspiring, you get free work
that needs co-ordinating (which can be software dirven).

* use of democracy in companies - allocation of resources in abscence of "commanders
intent" - we are supplying a new product (company) to a financier. hard to ignore use of
democracy when feudalism of management is breaking.

* AI / journalism open infomraiton flow You dont need AI tomorrow, you can software
today.

* MOOP - epidemiology at scale
  
  https://news.ycombinator.com/item?id=40130477

  * conclusion - software is literacy, for all. But it will explicitly define what orgs
can and cannot do, regulate and prepsent challenges as whistle blowing but only criminal
orgs can benefot from secrecy more than gain from speed and perception. Democracy,
openness, and realisation of benefits and losses. modelling?

(doctrine, (wardley - purpose, landscape, climate, leadership, doctrine) 2(O) - majors
have tactical control, generals have operational control ans politicians have strategic
control and everyoneninterferes one level below


* conclusion: write code. Its fun. It is a new form of literacy and it will like the
previous form, bend human organisation around its gravity. AI is useful, but almost
everything people think AI can solve tomorrow can be solved today (thats people putting
too much ito AI not AI being bad)

* We have a democratic bet to make - our society builds on individual rights and the next
forms of society are being built now.  We need to win the democracti bet.
 
<<<software_literacy.rst>>>

<<<coders_are_the_new_managers.rst>>>

<<<mgmt_disaggregated.rst>>>

<<<democractic_bet.rst>>>

<<<cyber_company.rst>>>

<<<cyber_society.rst>>>

<<<meditations.rst>>>

<<<moop.rst>>>

<<<ai_journalism.rst>>>

<<<software_mind.rst>>>




